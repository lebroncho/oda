main: true
name: SupportBot
context:
  variables:
    iResult: "nlpresult"
    liveHelp: "LiveHelp"
    orderHelp: "OrderHelpBag"
    refundHelp: "RefundHelpBag"
    returnsHelp: "ReturnsHelpBag"
    productHelp: "ProductHelpBag"
    laptopHelp: "LaptopHelpBag"
    phoneHelp: "PhoneHelpBag"
    peripheralHelp: "PeripheralHelpBag"
    support: "SupportBag"
    prompt: "YesNoBag"
    contactInfo: "map"
    serialNumber: "string"
    serialNumberTemp: "string"
    chatQuestion: "string"
    rma: "RmaBag"
    rmaFromRazer: "boolean"
    rmaProof: "RmaProofBag"
    rmaProofFile: "string"
    rmaProofType: "string"
    rmaProofTitle: "string"
    rmaStatus: "RmaStatusBag"
    rmaDetails: "map"
    rmaDetailsOutput: "string"
    rmaType: "string"
    capturedText: "string"
    lastAttempt: "boolean"
    hasProof: "boolean"
    chatHoops: "boolean"
    contactId: "int"
    chatType: "int"
    chatQueue: "int"
    currentDateAndTime: "string"
    caseReferenceNumber: "string"
    caseIncidentId: "int"
    rmaRequestedFromAnswer: "boolean"
    webIncident: "string"
    case: "CaseBag"
    hasCaseFile: "boolean"
    caseFile: "string"
    caseFileType: "string"
    caseFileTitle: "string"
    caseLastAttempt: "boolean"
    caseOptions: "map"
    caseProductId: "string"
    caseProductCategory: "string"
    caseCategory: "string"
    caseResetOptions: "string"
    caseTemp: "string"
    caseEntity: "string"
    caseReset: "boolean"
    selectedOption: "string"
    requestFromSS: "string"
    requestActivationCode: "boolean"
    caseCategoryId: "string"
    caseSSCategoryName: "string"
    caseSSCategoryResetAll: "string"
    razerComOrderBag: "RazerComOrderBag"
    casePrivateNotes: "string"
    currentFlow: "string"
    caseCreationState: "string"

    ########### RAZER CORTEX VARIABLES ##########
    cortexIssue: "string"
    #############################################

    ######### RAZER COM ORDER VARIABLES #########
    razerComOrder_issue: "string"
    razerComOrder_fromUS: "boolean"
    razerComOrder_postalCode: "string"
    razerComOrder_reason: "string"
    razerComOrder_orderNumber: "string"
    #############################################

    productModel: "string"
    productDescription: "string"

defaultTransitions:
  actions:
    attachmentReceived: handleInvalidAttachment

states:
  setCasePrivateNotes:
    component: "System.SetVariable"
    properties:
      variable: "casePrivateNotes"
      value: ""
  setCaseCreationState:
    component: "System.SetVariable"
    properties:
      variable: "caseCreationState"
      value: ""
  setCurrentFlow:
    component: "System.SetVariable"
    properties:
      variable: "currentFlow"
      value: ""
  setProductModel:
    component: "System.SetVariable"
    properties:
      variable: "productModel"
      value: "<#if (profile.contactInfo)??><#list profile.contactInfo.value.customFields as p><#if p.name=='Product_sku'><#if p.value!='Unavailable' && p.value!=''>${p.value}<#else>-</#if></#if></#list><#else>-</#if>"
  setProductDescription:
    component: "System.SetVariable"
    properties:
      variable: "productDescription"
      value: "<#if (profile.contactInfo)??><#list profile.contactInfo.value.customFields as p><#if p.name=='Product_desc'><#if p.value!='Unavailable' && p.value!=''>${p.value}<#else>-</#if></#if></#list><#else>-</#if>"

  intent:
    component: System.Intent
    properties:
      translate: false
      variable: iResult
    transitions:
      actions:
        Greeting: initiatilizeContact
        HelpGuide: helpGuide
        StartOver: resetConversation
        RmaFlow: contactSupport
        OrderStatus: RazerComOrder.start
        RmaStatus: rmaStatus
        CaseStatus: caseStatus
        RefundStatus: refundStatus
        RefundRequest: requestRefund
        ReturnRefundPolicy: returnPolicyOutput
        CreditRejected: ccRejectedOutput
        FinancingOptions: financingOutput
        ItemAvailability: availabilityOutput
        OrderCustoms: RazerComOrder.start
        OrderCancel: RazerComOrder.outputCancelOrder
        TrackingNumber: shippingStatus
        ContactSupport: contactSupport
        NariPairing: nariPairing
        PromoCode: promoCodeOutput
        KishiGrips: kishiGrips
        RazerWebcam: razerWebcam
        RazerRipsaw: razerRipsaw
        RazerTurret: resolveTurret
        RazerSynapse: resolveSynapse
        BloatedBattery: batteryIssue
        LaptopSupport: laptopFaqs
        TomahawkSupport: tomahawkFaqs
        CoreSupport: egpuFaqs
        MicSupport: micSupport
        StreamingSupport: streamingFaqs
        ControllerSupport: controllerFaqs
        MatSupport: matFaqs
        MonitorSupport: monitorFaqs
        ChairSupport: chairSupport
        NetworkSupport: networkFaqs
        PhoneSupport: phoneFaqs
        ProductSupport: technicalSupport
        ConnectAgent: agentPrompt
        EndChat: endPrompt
        unresolvedIntent: errorOutput
        AuthorizedSeller: authorizedSellerOutput
        BluetoothDevice: bluetoothDeviceOutput
        BorderFee: borderFeeOutput
        BrowserCookies: browserCookiesOutput
        CardCharged: cardChargedOutput
        ChangeDeliveryAddress: changeDeliveryAddress
        ChargingDock: chargingDockOutput
        ChargingIssue: chargingIssueOutput
        ChromaLighting: chromaLighting
        CountryAvailability: countryAvailabilityOutput
        CustomsFees: customsFees
        DebitRejected: debitRejectedOutput
        DeviceNotDetected: deviceNotDetected
        ErrorCode43: errorCodeOutput
        RazerCare: razerCare
        FanNoise: fanNoiseOutput
        LaptopOverheating: laptopOverheatingOutput
        LegacyProduct: legacyProductOutput
        MilitaryDiscount: militaryDiscountOutput
        PaymentMethods: paymentMethodsOutput
        PayPalCredit: paypalCreditOutput
        PrivacyPolicy: privacyPolicyOutput
        PurchaseProof: purchaseProofOutput
        RazerAccount: razerAccountOutput
        RazerGold: razerGoldOutput
        ReceiveDelivery: receiveDeliveryOutput
        SalesTax: salesTaxOutput
        SerialNumber: serialNumberOutput
        ShippingAddress: shippingAddressOutput
        SurroundSoundGetCode: surroundSoundGetCode
        THXSpatialAudio: thxSpatialOutput
        UserManual: userManualOutput
        WarrantyCoverage: warrantyCoverageOutput
        WindowsHello: windowsHelloOutput
        WristRest: wristRestOutput
        AuthSupport: authSupport
        UnhelpfulAnswer: unhelpfulAnswer
        ChatExpired: chatExpired
        GetAccessory: getAccessoryOutput
        OrderSupport: RazerComOrder.start
        RmaChangeAddress: rmaChangeAddress
        RmaSla: rmaSla
        OrderNotFound: RazerComOrder.start
        OrderRefund: RazerComOrder.askFromUS
        RegistrationFailed: registrationFailed
        ThumbpadIssue: thumbpadIssue
        LowFPS: lowFps
        PowerAdapterIssue: powerAdapterIssue
        SynapseCrashed: synapseCrashed
        MicSetDefault: micSetDefault
        SynapseDialKey: synapseDialKey
        BladeDead: bladeDead
        BladeDeadPixel: bladeDeadPixel
        BladeWifiIssue: bladeWifiIssue
        ErrorBsod: errorBsod
        AnzuFAQ: anzuFAQ
        AnzuPairing: anzuPairing
        AnzuAudio: anzuAudio
        SynapseLightSettings: synapseLightSettings
        BladeScreenTurnsBlack: bladeScreenTurnsBlack
        BladeScreenFlickering: bladeScreenFlickering
        BrokenDevice: brokenDevice
        OpusPairing: opusPairing
        BladeRefreshRate: bladeRefreshRate
        BladeLowStorage: bladeLowStorage
        TomahawkFirmware: tomahawkFirmware
        BrokenReplacement: brokenReplacement
        DownloadFirmware: downloadFirmware
        ChairRMA: chairRMA
        AnzuBTIssue: anzuBTIssue
        SeirenSupport: seirenSupport
        KiyoProFirmware: kiyoProFirmware
        CleanDevice: cleanDevice
        CreateMacro: createMacro
        BladeLighting: bladeLighting
        LeviathanSupport: leviathanSupport
        KairaSupport: kairaSupport
        DisplayMenu: displayMenu
        Blade14Activation: blade14Activation
        UnregisterDevice: unregisterDevice
        KeycapFit: keycapFit
        CoreSetup: coreSetup
        VesaInstallation: vesaInstallation
        DisassembleIskur: disassembleIskur
        UpgradeStorage: upgradeStorage
        UpgradeMemory: upgradeMemory
        Windows11Install: windows11Install
        Windows11Difference: windows11Difference
        Windows11Accessories: windows11Accessories
        Windows11Upgrade: windows11Upgrade
        Windows11Requirements: windows11Requirements
        SynapseMac: synapseMac
        SynapseInstall: synapseInstall
        AssignMacro: assignMacro
        SynapseReinstall: synapseReinstall
        ReplaceKeycap: replaceKeycap
        BladeNotWakingUp: bladeNotWakingUp
        KeyBinding: keyBinding
        ThunderboltDockSupport: thunderboltDockSupport
        ASCIISymbols: asciiSymbols
        BladeTrackpad: bladeTrackpad
        ChromaLightStrip: chromaLightStrip
        RipsawSetup: ripsawSetup
        GamingMode: gamingMode
        IskurAdjustLever: iskurAdjustLever
        BladeSystemRecovery: bladeSystemRecovery
        BladeMaxStorageMemory: bladeMaxStorageMemory
        PwmOverheating: pwmOverheating
        PwmNotSpinning: pwmNotSpinning
        PwmSetup: pwmSetup
        KunaiSetup: kunaiSetup
        KishiFirmware: kishiFirmware
        CreateSynapseAccount: createSynapseAccount
        ProductRegistration: productRegistration
        TomahawkStorage: tomahawkStorage
        ObsMixAudio: obsMixAudio
        ChargingStandXbox: chargingStandXbox
        ChairCasterStuds: chairCasterStuds
        BatteryLife: batteryLife
        BladeCrashing: bladeCrashing
        BladeSkinInstall: bladeSkinInstall
        BladeSkinRemoval: bladeSkinRemoval
        PhoneCoolerSetup: phoneCoolerSetup
        PhoneCoolerPairing: phoneCoolerPairing
        PhoneCoolerSettings: phoneCoolerSettings
        LightBleed: lightBleed
        ScreenBrightness: screenBrightness
        DedicatedGpu: dedicatedGpu
        NvidiaAdvancedOptimus: nvidiaAdvancedOptimus
        DgpuBlankScreen: dgpuBlankScreen
        MaximizeGpu: maximizeGpu
        MonitorUsbSpecs: monitorUsbSpecs
        UsbPort: usbPort
        BladeThirdPartyCharge: bladeThirdPartyCharge
        EthernetCable: ethernetCable
        AccessBios: accessBios
        BiosBoot: biosBoot
        WobblingBlade: wobblingBlade
        ThxActivationCode: thxActivationCode
        WolverineDeadzone: wolverineDeadzone
        BladeMonitor: bladeMonitor
        BladeHdmi: bladeHdmi
        InstallHanbo: installHanbo
        RgbHanbo: rgbHanbo
        OverheatingHanbo: overheatingHanbo
        IntermittentHanbo: intermittentHanbo
        LeakingHanbo: leakingHanbo
        NoisyHanbo: noisyHanbo
        LooseHanbo: looseHanbo
        ReadingsHanbo: readingsHanbo
        HeadCushionChromaPairing: headCushionChromaPairing
        HeadCushionChromaLighting: headCushionChromaLighting
        RecycleDevice: recycleDevice
        BladeGsync: bladeGsync
        AudioMixerSetup: audioMixerSetup
        AudioMixerUse: audioMixerUse
        AudioMixerSettings: audioMixerSettings
        KeyLightSetup: keyLightSetup
        KeyLightCustomization: keyLightCustomization
        BladeOvercharge: bladeOvercharge
        SsdScrewSize: ssdScrewSize
        LowerWattageBlade: lowerWattageBlade
        ModernStandby: modernStandby
        DeviceEncryption: deviceEncryption
        WatchWristbandSupport: watchWristbandSupport
        PairingUtility: pairingUtility
        EnkiProFunctions: enkiProFunctions
        BarracudaUsbCPair: barracudaUsbCPair
        StreamControllerSupport: streamControllerSupport
        SetupKatana: setupKatana
        RazerCortex: RazerCortex.quickAnswerTS1
        PwmRpm: pwmRpm
        Dongle: dongleOutput
        SurroundSoundHelpActivate: surroundSoundHelpActivate
        VirtualRingLightAppGetCode: virtualRingLightAppGetCode
        ActivationCode: activationCode
        PowerSurgeWarning: powerSurgeWarning
        RazerAxon: RazerAxon.quickAnswerTS1
        BlueScreen: blueScreen
        BladeBootLoop: bladeBootLoop
        BladeSetUpRAID: bladeSetUpRAID
        BladeOverclocking: bladeOverclocking
        BladeSecureBoot: bladeSecureBoot
        NexusVirtualController: nexusVirtualController
        HeadStrapSetup: headStrapSetup
        HeadStrapAdjustment: headStrapAdjustment
        FacialInterfaceSetup: facialInterfaceSetup
        NommoV2PowerSaving: nommoV2PowerSaving
        NommoV2Switching: nommoV2Switching
        HammerheadProDryOff: hammerheadProDryOff
        RetroSuperFuture: retroSuperFuture
        AutoCancelledOrder: autoCancelledOrder
        KeyboardMechSwitchReplacement: keyboardMechSwitchReplacement
        KishiV2ProVirtualController: kishiV2ProVirtualController
        KishiV2ProAudioHaptic: kishiV2ProAudioHaptic
        BladeScrewSizes: bladeScrewSizes
        WirelessControlPod: wirelessControlPod
        WirelessControlPodSupportedDevices: wirelessControlPodSupportedDevices

        #------ Order-related Intents -------#
        RazerComOrder: RazerComOrder.start
        RazerComReturnOrder: RazerComOrder.RO_quickAnswerCS
        RazerComCancelOrder: RazerComOrder.CO_quickAnswerCS

        #------ Mouse-related Intents -------#
        MouseSupport: mousePath
        MouseSpamming: mousePath
        MouseProfile: mousePath
        MouseNotCharging: mousePath
        DirtyMouse: mousePath
        HypershiftMouse: mousePath
        DongleBasiliskViper: mousePath

        #----- Headset-related Intents ------#
        HeadsetSupport: headsetPath
        HeadsetAudioIssue: headsetPath
        HeadsetCracklingNoise: headsetPath
        HeadsetEarCushions: headsetPath
        HeadsetNotDetected: headsetPath
        EchoSound: headsetPath #echoSoundOutput
        HammerheadTrueWireless: headsetPath #hammerheadTWSOutput
        KrakenKitty: headsetPath #krakenKittyOutput
        KrakenAudioIssue: headsetPath #krakenAudioIssue
        NariFAQ: headsetPath #nariFAQ
        SensitiveMic: headsetPath #sensitiveMic

        #----- Keyboard-related Intents -----#
        KeyboardSupport: keyboardPath
        KeypressIssue: keyboardPath
        KeyboardSpamming: keyboardPath
        KeyboardNotDetected: keyboardPath
        KeyboardDifferentColor: keyboardPath
        KeyboardDemoMode: keyboardDemoMode

        #-------- Razer Edge Intents --------#
        RazerEdge: RazerEdge.start
        RazerEdgeSetup: RazerEdge.setup
        RazerEdgeSetupGoogle: RazerEdge.setupGoogle
        RazerEdgeConnectBluetooth: RazerEdge.connectBluetooth
        RazerEdgeAdjustRefreshRate: RazerEdge.adjustRefreshRate
        RazerEdgeAudioIssues: RazerEdge.audioIssues
        RazerEdgeOverheatingIssues: RazerEdge.overheatingIssues
        RazerEdgeBTPCInternetIssues: RazerEdge.connectionIssues

  #-------------------------------------------------------------------------------
  # Greeting ---------------------------------------------------------------------
  #-------------------------------------------------------------------------------
  greeting:
    component: System.Output
    properties:
      text: "<#if profile.firstName.value != ''>Hi ${profile.firstName.value}!<#else>Hi!</#if>I'm Razer Assist, your virtual assistant."
      keepTurn: true
    transitions:
      next: resetLiveHelp

  helpGuide:
    component: System.Output
    properties:
      text: "${rb.actionKeywords}"
      keepTurn: false
    transitions:
      next: intent

  resetConversation:
    component: System.Output
    properties:
      text: "Let's start over..."
      keepTurn: true
    transitions:
      next: resetLiveHelp

  #-------------------------------------------------------------------------------
  # Live Help --------------------------------------------------------------------
  #-------------------------------------------------------------------------------
  initiatilizeContact:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: "contactInfo"
      value: "${profile.contactInfo.value}"
  initiatilizeSerial:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: serialNumber
      value: "<#list contactInfo.value.customFields as p><#if p.name=='Serial Number'><#if p.value!='unavailable'>${p.value}<#else>-</#if></#if></#list>"
  resetLiveHelp:
    component: System.ResetVariables
    properties:
      variableList: "liveHelp,orderHelp,refundHelp,productHelp,laptopHelp,phoneHelp,peripheralHelp,support,prompt,rmaRequestedFromAnswer,selectedOption,requestFromSS,requestFromSSLaunch"
  resolveLiveHelp:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      autoNumberPostbackActions: "false"
      maxPrompts: 2
      metadata:
        responseItems:
          - type: text
            text: "To get started, select one of the options below or type in your question."
            footerText: 'At any time, you can get a list of shortcuts by typing "chat guide".'
            actions:
              - label: "7.1 Surround Sound Activation"
                type: postback
                keyword: "1,a,A"
                payload:
                  action: "activation"
              - label: "Get RMA status"
                type: postback
                keyword: "2,b,B,rma,status"
                payload:
                  action: "status"
              - label: "Product Support"
                type: postback
                keyword: "3,c,C,product,support"
                payload:
                  action: "question"
              - label: "Razer order inquiry"
                type: postback
                keyword: "4,d,D,order"
                payload:
                  action: "order"
              - label: "Buy spare part/accessory"
                type: postback
                keyword: "5,e,E,parts,accessory"
                payload:
                  action: "accessory"
              - label: "Product registration issue"
                type: postback
                keyword: "6,f,F,register"
                payload:
                  action: "registration"
    transitions:
      next: intent
      actions:
        activation: surroundSoundTs
        status: rmaStatus
        question: technicalSupport
        order: RazerComOrder.start
        accessory: menuGetAccessory
        registration: menuRegistrationFailed
        match: hiddenAction
        cancel: errorOutput

  technicalSupport:
    component: "System.CommonResponse"
    properties:
      processUserMessage: true
      keepTurn: false
      transitionAfterMatch: true
      maxPrompts: 2
      autoNumberPostbackActions: false
      metadata:
        responseItems:
          - text: "Select your product"
            type: "text"
            actions:
              - skipAutoNumber: true
                payload:
                  variables:
                    system.text: "RPSVFDMSE VFD"
                    user.journey: true
                    user.secondTry: true
                    user.chatType: "TS1"
                  action: "system.textReceived"
                label: "Mouse"
                type: postback
                keyword: "mouse"
              - skipAutoNumber: true
                payload:
                  variables:
                    system.text: "RPSVFDKBRD"
                    user.journey: true
                    user.secondTry: true
                    user.chatType: "TS1"
                  action: "system.textReceived"
                label: "Keyboard"
                type: postback
                keyword: "keyboard"
              - skipAutoNumber: true
                payload:
                  variables:
                    system.text: "RPSVFDHDST"
                    user.journey: true
                    user.secondTry: true
                    user.chatType: "TS1"
                  action: "system.textReceived"
                label: "Headset"
                type: postback
                keyword: "headset"
              - skipAutoNumber: true
                payload:
                  action: "other"
                label: "Other"
                type: postback
                keyword: "other"
    transitions:
      next: "intent"
      actions:
        other: questionPath

  questionPath:
    component: System.Output
    properties:
      text: "Please enter your question"
      keepTurn: false
    transitions:
      next: intent

  rephraseQuestionPath:
    component: System.Output
    properties:
      text: "I am sorry I didn't answer your question. Can you rephrase it?"
      keepTurn: false
    transitions:
      next: intent

  handleInvalidAttachment:
    component: System.Output
    properties:
      text: "I am sorry I don't understand the context of your attachment. Can you tell me what it is for?"
      keepTurn: false
    transitions:
      next: intent

  launchSurroundSound:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: "contactInfo"
      value: "${profile.contactInfo.value}"
  initiatilizeSurroundSoundSerial:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: "serialNumber"
      value: "<#list contactInfo.value.customFields as p><#if p.name=='Serial Number'><#if p.value!='unavailable'>${p.value}<#else>-</#if></#if></#list>"
  resetLiveSurroundSound:
    component: System.ResetVariables
    properties:
      variableList: "liveHelp,orderHelp,refundHelp,productHelp,laptopHelp,phoneHelp,peripheralHelp,support,prompt,rmaRequestedFromAnswer,selectedOption,requestFromSS"
  setRequestFromSurroundSoundLaunch:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: requestFromSS
      value: "surroundSoundLaunch"
  launchSurroundSoundPrompt:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      autoNumberPostbackActions: "false"
      maxPrompts: 2
      metadata:
        responseItems:
          - type: text
            text: "Please confirm you need help with your 7.1 Surround Sound Activation Code"
            actions:
              - label: "Yes"
                type: postback
                keyword: "a,A,y,Y"
                payload:
                  action: "Yes"
              - label: "No"
                type: postback
                keyword: "b,B,n,N"
                payload:
                  action: "No"
    transitions:
      next: intent
      actions:
        Yes: surroundSoundSerial
        No: resetLiveHelp
        match: hiddenAction
        cancel: errorOutput

  #-------------------------------------------------------------------------------
  # Order FAQ --------------------------------------------------------------------
  #-------------------------------------------------------------------------------
  orderPath:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: "contactInfo"
      value: "${profile.contactInfo.value}"
  initiatilizeSerialOrder:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: serialNumber
      value: "<#list contactInfo.value.customFields as p><#if p.name=='Serial Number'><#if p.value!='unavailable'>${p.value}<#else>-</#if></#if></#list>"
  orderProper:
    component: System.SetVariable
    properties:
      variable: user.journey
      value: true
  setTypeCS:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: user.chatType
      value: "CS"
  setOrderCaseCategory:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: selectedOption
      value: "OrderSupport"
  orderSupport:
    component: System.Output
    properties:
      text: "${rb.orderFAQ}"
      keepTurn: true
    transitions:
      next: quickAnswerCS

  #-------------------------------------------------------------------------------
  # Question Answered ------------------------------------------------------------
  #-------------------------------------------------------------------------------
  quickAnswerCS:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: user.journey
      value: true
  quickAnswerCSSetCaseCreationState:
    component: System.SetVariable
    properties:
      variable: "caseCreationState"
      value: "setCaseFirstName"
  quickAnswerCSTry:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: user.secondTry
      value: true
  quickTypeCS:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: user.chatType
      value: "CS"
  resolveQuickAnswerCS:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      autoNumberPostbackActions: "false"
      maxPrompts: 2
      metadata:
        responseItems:
          - type: text
            text: "Did I answer your question?"
            actions:
              - label: "Yes"
                type: postback
                keyword: "a,A,y,Y"
                payload:
                  action: "Yes"
              - label: "No"
                type: postback
                keyword: "b,B,n,N"
                payload:
                  action: "No"
    transitions:
      next: intent
      actions:
        Yes: queryResolved
        No: checkTryCount
        match: hiddenAction
        cancel: errorOutput

  quickAnswerTS1:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: user.journey
      value: true
  quickAnswerTS1SetCaseCreationState:
    component: System.SetVariable
    properties:
      variable: "caseCreationState"
      value: "setCaseFirstName"
  quickTypeTS1:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: user.chatType
      value: "TS1"
  resolveQuickAnswerTS1:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      autoNumberPostbackActions: "false"
      maxPrompts: 2
      metadata:
        responseItems:
          - type: text
            text: "Did I answer your question?"
            actions:
              - label: "Yes"
                type: postback
                keyword: "a,A,y,Y"
                payload:
                  action: "Yes"
              - label: "No"
                type: postback
                keyword: "b,B,n,N"
                payload:
                  action: "No"
    transitions:
      next: intent
      actions:
        Yes: queryResolved
        No: checkTryCount
        match: hiddenAction
        cancel: errorOutput

  quickAnswerTS2:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: user.journey
      value: true
  quickAnswerTS2SetCaseCreationState:
    component: System.SetVariable
    properties:
      variable: "caseCreationState"
      value: "setCaseFirstName"
  quickTypeTS2:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: user.chatType
      value: "TS2"
  resolveQuickAnswerTS2:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      autoNumberPostbackActions: "false"
      maxPrompts: 2
      metadata:
        responseItems:
          - type: text
            text: "Did I answer your question?"
            actions:
              - label: "Yes"
                type: postback
                keyword: "a,A,y,Y"
                payload:
                  action: "Yes"
              - label: "No"
                type: postback
                keyword: "b,B,n,N"
                payload:
                  action: "No"
    transitions:
      next: intent
      actions:
        Yes: queryResolved
        No: checkTryCount
        match: hiddenAction
        cancel: errorOutput

  quickAnswerLaptop:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: user.journey
      value: true
  quickAnswerLaptopSetCaseCreationState:
    component: System.SetVariable
    properties:
      variable: "caseCreationState"
      value: "setCaseFirstName"
  quickTypeLaptop:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: user.chatType
      value: "TSLaptop"
  resolvequickAnswerLaptop:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      autoNumberPostbackActions: "false"
      maxPrompts: 2
      metadata:
        responseItems:
          - type: text
            text: "Did I answer your question?"
            actions:
              - label: "Yes"
                type: postback
                keyword: "a,A,y,Y"
                payload:
                  action: "Yes"
              - label: "No"
                type: postback
                keyword: "b,B,n,N"
                payload:
                  action: "No"
    transitions:
      next: intent
      actions:
        Yes: queryResolved
        No: checkTryCount
        match: hiddenAction
        cancel: errorOutput

  quickAnswerTSChair:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: user.journey
      value: true
  quickAnswerTSChairSetCaseCreationState:
    component: System.SetVariable
    properties:
      variable: "caseCreationState"
      value: "setCaseFirstName"
  quickTypeTSChair:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: user.chatType
      value: "TSChair"
  resolveQuickAnswerTSChair:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      autoNumberPostbackActions: "false"
      maxPrompts: 2
      metadata:
        responseItems:
          - type: text
            text: "Did I answer your question?"
            actions:
              - label: "Yes"
                type: postback
                keyword: "a,A,y,Y"
                payload:
                  action: "Yes"
              - label: "No"
                type: postback
                keyword: "b,B,n,N"
                payload:
                  action: "No"
    transitions:
      next: intent
      actions:
        Yes: queryResolved
        No: checkTryCount
        match: hiddenAction
        cancel: errorOutput

  quickAnswerTSEdge:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: user.journey
      value: true
  quickAnswerTSEdgeSetCaseCreationState:
    component: System.SetVariable
    properties:
      variable: "caseCreationState"
      value: "setCaseFirstName"
  quickTypeTSEdge:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: user.chatType
      value: "TSEdge"
  resolveQuickAnswerTSEdge:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      autoNumberPostbackActions: "false"
      maxPrompts: 2
      metadata:
        responseItems:
          - type: text
            text: "Did I answer your question?"
            actions:
              - label: "Yes"
                type: postback
                keyword: "a,A,y,Y"
                payload:
                  action: "Yes"
              - label: "No"
                type: postback
                keyword: "b,B,n,N"
                payload:
                  action: "No"
    transitions:
      next: intent
      actions:
        Yes: queryResolved
        No: unresolvedActions
        match: hiddenAction
        cancel: errorOutput

  checkTryCount:
    component: System.ConditionEquals
    properties:
      variable: user.secondTry
      value: true
    transitions:
      actions:
        equal: unresolvedActions #unresolvedQuery
        notequal: setSecondTry
  setSecondTry:
    component: System.SetVariable
    properties:
      variable: user.secondTry
      value: true
    transitions:
      next: rephraseQuestionPath

  queryResolved:
    component: System.CommonResponse
    properties:
      insightsEndConversation: true
      processUserMessage: true
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      autoNumberPostbackActions: "false"
      maxPrompts: 2
      metadata:
        responseItems:
          - type: text
            text: "Great! I am glad you got your answer. You can ask me another question or if all your questions have been answered, you can end our session."
            actions:
              - label: Ask another question
                type: postback
                keyword: "startover,reset,restart"
                payload:
                  action: startOver
              - label: End session
                type: postback
                keyword: "end,quit,exit,bye"
                payload:
                  action: endChat
    transitions:
      next: intent
      actions:
        startOver: resetConversation
        endChat: endPrompt
        match: hiddenAction
        cancel: errorOutput

  unresolvedQuery:
    component: "osvc.VerifyIntent"
    properties:
      nlpResult: "${iResult}"
      control: "RmaSla,BrokenReplacement"
    transitions:
      actions:
        verified: "unResolvedCheckChatQueue"
        unverified: "unresolvedActions"

  unResolvedCheckChatQueue:
    component: "System.AgentTransferCondition"
    properties:
      allowTransferIf: "agentsAreAvailable"
      customProperties:
        - name: "c$web_incident_type"
          value: "My Order from Razer.com"
          type: "STRING"
    transitions:
      next: intent
      actions:
        conditionsMet: unresolvedActionsAgent
        conditionsNotMet: unresolvedActionsTicket
        error: unresolvedActionsTicket

  unresolvedActionsTicket:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      autoNumberPostbackActions: "false"
      maxPrompts: 2
      metadata:
        responseItems:
          - type: text
            text: "I am sorry I wasn't able to answer your question. There are several ways to contact us for support. Please select an option below."
            actions:
              - label: Submit a Support Ticket
                type: postback
                keyword: "a,A,cp,ticket"
                payload:
                  action: ticket
              - label: Visit Razer Insider
                type: url
                keyword: "c,C,insider"
                payload:
                  url: "https://insider.razer.com/index.php?forums/support/&utm_source=chatbot_insider&utm_medium=chat&utm_campaign=rzchatbot&s=oda"
              - label: Ask another question
                type: postback
                keyword: "d,D,startover,reset,restart"
                payload:
                  action: startOver
    transitions:
      next: intent
      actions:
        ticket: initiateCaseCreation
        startOver: resetConversation
        match: hiddenAction
        cancel: errorOutput

  unresolvedActionsAgent:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      autoNumberPostbackActions: "false"
      maxPrompts: 2
      metadata:
        responseItems:
          - type: text
            text: "I am sorry I wasn't able to answer your question. There are several ways to contact us for support. Please select an option below."
            actions:
              - label: Connect to an agent
                type: postback
                keyword: "b,B,agent"
                payload:
                  action: agent
              - label: Visit Razer Insider
                type: url
                keyword: "c,C,insider"
                payload:
                  url: "https://insider.razer.com/index.php?forums/support/&utm_source=chatbot_insider&utm_medium=chat&utm_campaign=rzchatbot&s=oda"
              - label: Ask another question
                type: postback
                keyword: "d,D,startover,reset,restart"
                payload:
                  action: startOver
    transitions:
      next: intent
      actions:
        agent: startChat
        startOver: resetConversation
        match: hiddenAction
        cancel: errorOutput

  unresolvedActions:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      autoNumberPostbackActions: "false"
      maxPrompts: 2
      metadata:
        responseItems:
          - type: text
            text: "I am sorry I wasn't able to answer your question. There are several ways to contact us for support. Please select an option below."
            actions:
              - label: Submit a Support Ticket
                type: postback
                keyword: "a,A,cp,ticket"
                payload:
                  action: ticket
              - label: Connect to an agent
                type: postback
                keyword: "b,B,agent"
                payload:
                  action: agent
              - label: Visit Razer Insider
                type: url
                keyword: "c,C,insider"
                payload:
                  url: "https://insider.razer.com/index.php?forums/support/&utm_source=chatbot_insider&utm_medium=chat&utm_campaign=rzchatbot&s=oda"
              - label: Ask another question
                type: postback
                keyword: "d,D,startover,reset,restart"
                payload:
                  action: startOver
    transitions:
      next: intent
      actions:
        ticket: initiateCaseCreation
        agent: startChat
        startOver: resetConversation
        match: hiddenAction
        cancel: errorOutput

  resolveQuickAnswerPhone:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      autoNumberPostbackActions: "false"
      maxPrompts: 2
      metadata:
        responseItems:
          - type: text
            text: "Did I answer your question?"
            actions:
              - label: "Yes"
                type: postback
                keyword: "a,A,y,Y"
                payload:
                  action: "Yes"
              - label: "No"
                type: postback
                keyword: "b,B,n,N"
                payload:
                  action: "No"
    transitions:
      next: intent
      actions:
        Yes: queryResolved
        No: queryNotResolvedPhone
        match: hiddenAction
        cancel: errorOutput
  queryNotResolvedPhone:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      autoNumberPostbackActions: "false"
      maxPrompts: 2
      metadata:
        responseItems:
          - type: text
            text: "I am sorry I wasn't able to answer your question. Unfortunately, live support for Razer Phone is unavailable. Please refer to our support site for help with your Razer Phone. You may also select from other options below."
            actions:
              - label: Visit Support Site
                type: url
                keyword: "a,A,support"
                payload:
                  url: "https://support.razer.com/mobile/phones"
              - label: Visit Razer Insider
                type: url
                keyword: "b,B,insider"
                payload:
                  url: "https://insider.razer.com/index.php?forums/support/&utm_source=chatbot_insider&utm_medium=chat&utm_campaign=rzchatbot&s=oda"
              - label: Ask another question
                type: postback
                keyword: "c,C,startover,reset,restart"
                payload:
                  action: startOver
    transitions:
      next: intent
      actions:
        startOver: resetConversation
        match: hiddenAction
        cancel: errorOutput

  checkChatHoops: # Forces queue to CS if current queue is unavailable
    component: System.ConditionEquals
    properties:
      insightsInclude: false
      variable: chatHoops
      value: true
    transitions:
      actions:
        equal: checkHoopsChatType
        notequal: startChat

  checkHoopsChatType:
    component: System.Switch
    properties:
      insightsInclude: false
      variable: user.chatType
      values:
        - "TS1"
        - "TS2"
        - "TSChair"
    transitions:
      actions:
        TS1: setHoopsChatQueueTS1
        TS2: setHoopsChatQueueTS2
        TSChair: setHoopsChatQueueTSChair
        NONE: setHoopsChatQueueTS1

  setHoopsChatQueueTSChair:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: chatQueue
      value: "${system.config.incidentTsChairId}"
    transitions:
      next: checkHoopsChatQueue

  setHoopsChatQueueTS2:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: chatQueue
      value: "${system.config.incidentTs2Id}"
    transitions:
      next: checkHoopsChatQueue

  setHoopsChatQueueTS1:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: chatQueue
      value: "${system.config.incidentTs1Id}"
    transitions:
      next: checkHoopsChatQueue

  checkHoopsChatQueue:
    component: "osvc.CheckChatQueue"
    properties:
      webIncidentTypeId: "${chatQueue}"
    transitions:
      actions:
        chatAvailable: startChat
        chatUnavailableMaxQueue: setHoopsChatQueueCS
        chatUnavailableHours: setHoopsChatQueueCS
        fail: setHoopsChatQueueCS

  setHoopsChatQueueCS:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: user.chatType
      value: "CS"
    transitions:
      next: startChat

  #-------------------------------------------------------------------------------
  # Task "Within 14 days" --------------------------------------------------------
  #-------------------------------------------------------------------------------
  resetWithinDays:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      autoNumberPostbackActions: "false"
      maxPrompts: 2
      metadata:
        responseItems:
          - type: text
            text: "It looks like your product is no longer working and may be eligible for an RMA (Return Merchandise Authorization). Did you purchase your Razer product within the last 14 days?"
            actions:
              - label: "Yes"
                type: postback
                keyword: "a,A,y,Y"
                payload:
                  action: Within 14 days
              - label: "No"
                type: postback
                keyword: "b,B,n,N"
                payload:
                  action: Beyond 14 days
    transitions:
      next: intent
      actions:
        Within 14 days: setRmaTypeReplace
        Beyond 14 days: setRmaTypeRepair
        match: hiddenAction
        cancel: errorOutput

  setRmaTypeReplace:
    component: System.SetVariable
    properties:
      variable: user.rmaType
      value: "861"
    transitions:
      next: rmaOrderFrom
  setRmaTypeRepair:
    component: System.SetVariable
    properties:
      variable: user.rmaType
      value: "860"
    transitions:
      next: rmaOrderFrom
  setRmaTypeAdvanced:
    component: System.SetVariable
    properties:
      variable: user.rmaType
      value: "854"
    transitions:
      next: rmaOrderFrom

  rmaOrderFrom:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      autoNumberPostbackActions: "false"
      maxPrompts: 2
      metadata:
        responseItems:
          - type: text
            text: "Did you buy your Razer device from Razer.com?"
            actions:
              - label: "Yes"
                type: postback
                keyword: "a,A,y,Y"
                payload:
                  action: "Yes"
              - label: "No"
                type: postback
                keyword: "b,B,n,N"
                payload:
                  action: "No"
    transitions:
      actions:
        Yes: setOrderFromRazer
        No: setOrderNotFromRazer
        match: hiddenAction
        cancel: errorFallback
  setOrderFromRazer:
    component: System.SetVariable
    properties:
      variable: rmaFromRazer
      value: true
    transitions:
      next: rmaCheckOrderFrom
  setOrderNotFromRazer:
    component: System.SetVariable
    properties:
      variable: rmaFromRazer
      value: false
    transitions:
      next: proofPrompt

  #-------------------------------------------------------------------------------
  # Error Handling ---------------------------------------------------------------
  #-------------------------------------------------------------------------------
  errorOutput:
    component: System.ResetVariables
    properties:
      variableList: prompt
  checkRephraseTryCount:
    component: System.ConditionEquals
    properties:
      variable: user.secondTry
      value: true
    transitions:
      actions:
        equal: resolveError
        notequal: setSecondTryRephrase

  setSecondTryRephrase:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: user.secondTry
      value: true
  displayErrorPrompt:
    component: System.Output
    properties:
      text: "I am sorry, but I don't understand your response or question. Can you rephrase it?"
      keepTurn: false
    transitions:
      next: intent

  resolveError:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      translate: false
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      autoNumberPostbackActions: "false"
      maxPrompts: 2
      metadata:
        responseItems:
          - type: text
            text: "I am sorry, but I don't understand your response or question. For other support, you may select from the options below."
            actions:
              - label: Submit a Support Ticket
                type: postback
                keyword: "a,A,cp,ticket"
                payload:
                  action: ticket
              - label: Connect to an agent
                type: postback
                keyword: "b,B,agent"
                payload:
                  action: agent
              - label: Visit Razer Insider
                type: url
                keyword: "c,C,insider"
                payload:
                  url: "https://insider.razer.com/index.php?forums/support/&utm_source=chatbot_insider&utm_medium=chat&utm_campaign=rzchatbot&s=oda"
              - label: Ask another question
                type: postback
                keyword: "d,D,startover,reset,restart"
                payload:
                  action: startOver
              - label: End session
                type: postback
                keyword: "e,E,end,quit,exit,bye"
                payload:
                  action: endChat
    transitions:
      next: intent
      actions:
        ticket: initiateCaseCreation
        agent: startChat
        startOver: resetConversation
        endChat: endPrompt
        match: hiddenAction
        cancel: errorFallback

  errorFallback:
    component: System.Output
    properties: #todo: create option to create ticket
      text: "I am sorry I'm not able to understand your question or response. If you need further assitance, please submit a ticket from ${rb.customerPortal} or visit our ${rb.razerInsider} forum."
      keepTurn: true
    transitions:
      next: endPrompt

  #-------------------------------------------------------------------------------
  # Hidden Action ----------------------------------------------------------------
  #-------------------------------------------------------------------------------
  hiddenAction:
    component: System.Switch
    properties:
      source: "<#if system.entityToResolve.value.outOfOrderMatches?size == 1><#if system.entityToResolve.value.outOfOrderMatches[0].name == 'help'>help<#else><#if system.entityToResolve.value.outOfOrderMatches[0].name == 'exit'>exit<#else><#if system.entityToResolve.value.outOfOrderMatches[0].name == 'agent'>agent<#else>restart</#if></#if></#if><#else>NONE</#if>"
      values:
        - "help"
        - "exit"
        - "restart"
        - "agent"
    transitions:
      actions:
        help: helpGuide
        exit: endChatPrompt
        restart: resetConversation
        agent: agentPrompt
        NONE: resetConversation

  endChatPrompt:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      autoNumberPostbackActions: "false"
      maxPrompts: 2
      metadata:
        responseItems:
          - type: text
            text: 'Do you want to end your session? Please note that selecting "No" will restart our conversation.'
            actions:
              - label: "Yes"
                type: postback
                keyword: "a,A,y,Y"
                payload:
                  action: "Yes"
              - label: "No"
                type: postback
                keyword: "b,B,n,N,startover,restart,reset"
                payload:
                  action: "No"
    transitions:
      next: intent
      actions:
        Yes: endPrompt
        No: resetConversation
        match: hiddenAction
        cancel: errorOutput

  #-------------------------------------------------------------------------------
  # Task "Contact Support" -------------------------------------------------------
  #-------------------------------------------------------------------------------
  contactSupport:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      translate: false
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      autoNumberPostbackActions: "false"
      maxPrompts: 2
      metadata:
        responseItems:
          - type: text
            text: "${rb.contactSupport}"
            actions:
              - label: Submit a Support Ticket
                type: postback
                keyword: "a,A,cp,ticket"
                payload:
                  action: ticket
              - label: Connect to an agent
                type: postback
                keyword: "b,B,agent"
                payload:
                  action: Connect to an agent
              - label: Ask another question
                type: postback
                keyword: "c,C,startover,reset,restart"
                payload:
                  action: startOver
    transitions:
      next: intent
      actions:
        ticket: initiateCaseCreation
        Connect to an agent: startChat
        startOver: resetConversation
        match: hiddenAction
        cancel: errorOutput

  #-------------------------------------------------------------------------------
  # Task "No proof of purchase" --------------------------------------------------
  #-------------------------------------------------------------------------------
  noProofOutput:
    component: System.Output
    properties:
      text: "I am sorry but in order to determine if your Razer device is eligible for an RMA, we need a proof of purchase."
      keepTurn: true
    transitions:
      next: resolveRejected

  #-------------------------------------------------------------------------------
  # Task "Troubleshoot" ----------------------------------------------------------
  #-------------------------------------------------------------------------------
  resetTroubleshoot:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      autoNumberPostbackActions: "false"
      maxPrompts: 2
      metadata:
        responseItems:
          - type: text
            text: "Have you tried connecting the device to a different system?"
            actions:
              - label: "Yes"
                type: postback
                keyword: "a,A,y,Y"
                payload:
                  action: "Yes"
              - label: "No"
                type: postback
                keyword: "b,B,n,N"
                payload:
                  action: "No"
    transitions:
      next: intent
      actions:
        Yes: resetPrompt
        No: quickTroubleshoot
        match: hiddenAction
        cancel: errorOutput

  quickTroubleshoot:
    component: System.Output
    properties:
      text: "Please try to connect the device on a different system."
      keepTurn: true
    transitions:
      next: resetPrompt

  resetPrompt:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      autoNumberPostbackActions: "false"
      maxPrompts: 2
      metadata:
        responseItems:
          - type: text
            text: "Did this resolve your issue?"
            actions:
              - label: "Yes"
                type: postback
                keyword: "a,A,y,Y"
                payload:
                  action: "Yes"
              - label: "No"
                type: postback
                keyword: "b,B,n,N"
                payload:
                  action: "No"
    transitions:
      next: intent
      actions:
        Yes: queryResolved
        No: checkTryCount
        match: hiddenAction
        cancel: errorOutput

  #-------------------------------------------------------------------------------
  # Task "Shipping Status" -------------------------------------------------------
  #-------------------------------------------------------------------------------
  shippingStatus:
    component: System.Output
    properties:
      text: "${rb.shippingInquiry}"
      keepTurn: true
    transitions:
      next: quickAnswerCS

  shippingGuide:
    component: System.Output
    properties:
      text: "For general shipping guidelines and information, please check out our ${rb.shippingGuide}."
      keepTurn: true
    transitions:
      next: quickAnswerCS

  #-------------------------------------------------------------------------------
  # Task "With proof of purchase" ------------------------------------------------
  #-------------------------------------------------------------------------------
  resolveWithProof:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      autoNumberPostbackActions: "false"
      maxPrompts: 2
      metadata:
        responseItems:
          - type: text
            text: "What problem are you experiencing?"
            actions:
              - label: Defective Product
                type: postback
                keyword: "a,A,defective"
                payload:
                  action: Troubleshoot
              - label: Dead on Arrival
                type: postback
                keyword: "b,B,doa"
                payload:
                  action: Proceed with RMA
              - label: Missing/Broken Parts
                type: postback
                keyword: "c,C,parts"
                payload:
                  action: Proceed with RMA
              - label: Damaged on Shipment
                type: postback
                keyword: "d,D,damaged"
                payload:
                  action: Proceed with RMA
              - label: Wrong Item Sent
                type: postback
                keyword: "e,E,wrong,item"
                payload:
                  action: Proceed with RMA
              - label: Others
                type: postback
                keyword: "f,F,other,others"
                payload:
                  action: Troubleshoot
    transitions:
      next: intent
      actions:
        Troubleshoot: resetTroubleshoot
        Proceed with RMA: rmaAgentPrompt
        match: hiddenAction
        cancel: errorOutput

  rmaAgentPrompt:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      autoNumberPostbackActions: "false"
      maxPrompts: 2
      metadata:
        responseItems:
          - type: text
            text: "It looks like your product is no longer working. You can request for a replacement (pending warranty eligibility) or connect with a live agent for assistance."
            actions:
              - label: "Connect to an agent"
                type: postback
                keyword: "agent"
                payload:
                  action: "agent"
              - label: "Request replacement"
                type: postback
                keyword: "replace"
                payload:
                  action: "replace"
    transitions:
      next: intent
      actions:
        agent: startChat
        replace: setRmaTypeReplace
        match: hiddenAction
        cancel: errorOutput

  #-------------------------------------------------------------------------------
  # Task "Spare Parts Accessories" -----------------------------------------------
  #-------------------------------------------------------------------------------
  resetAccessory:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      autoNumberPostbackActions: "false"
      maxPrompts: 2
      metadata:
        responseItems:
          - type: text
            text: "What do you need?"
            actions:
              - label: Spare Parts
                type: url
                keyword: "a,A,spare,parts"
                payload:
                  url: "https://razercarestore.razer.com/"
              - label: Accessories
                type: postback
                keyword: "b,B,accessory"
                payload:
                  action: accessory
    transitions:
      next: intent
      actions:
        accessory: resolveAccessory
        match: hiddenAction
        cancel: errorOutput

  resolveAccessory:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      autoNumberPostbackActions: "false"
      maxPrompts: 2
      metadata:
        responseItems:
          - type: text
            text: "What type of accessory?"
            actions:
              - label: PC
                type: url
                keyword: "a,A,pc"
                payload:
                  url: "https://www.razer.com/shop/pc/gaming-pc-accessories"
              - label: Peripheral
                type: url
                keyword: "b,B,peri"
                payload:
                  url: "https://www.razer.com/gaming-peripheral-accessories"
              - label: Mobile
                type: url
                keyword: "c,C,mobile"
                payload:
                  url: "https://www.razer.com/shop/mobile/mobile-accessories"
    transitions:
      next: intent
      actions:
        match: hiddenAction
        cancel: errorOutput

  #-------------------------------------------------------------------------------
  # Task "Razer Synapse" ---------------------------------------------------------
  #-------------------------------------------------------------------------------
  resolveSynapse:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      translate: false
      metadata:
        responseItems:
          - type: text
            text: "${rb.synapseSupport}"
            actions:
              - label: Synapse 3
                type: postback
                keyword: "a,A"
                payload:
                  action: Synapse 3
              - label: Synapse 2.0
                type: postback
                keyword: "b,B"
                payload:
                  action: Synapse 2
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      autoNumberPostbackActions: "false"
      maxPrompts: 2
    transitions:
      next: intent
      actions:
        Synapse 2: resolveSynapse2
        Synapse 3: resolveSynapse3
        match: hiddenAction
        cancel: errorOutput

  resolveSynapse2:
    component: System.Output
    properties:
      text: "${rb.synapse2Support}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  resolveSynapse3:
    component: System.Output
    properties:
      text: "${rb.synapse3Support}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  #-------------------------------------------------------------------------------
  # Task "Razer webcam" ----------------------------------------------------------
  #-------------------------------------------------------------------------------
  razerWebcam:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      autoNumberPostbackActions: "false"
      maxPrompts: 2
      metadata:
        responseItems:
          - type: text
            text: "${rb.razerWebcam}"
            actions:
              - label: Razer Kiyo
                type: postback
                keyword: "a,A,kiyo"
                payload:
                  action: "kiyo"
              - label: Razer Kiyo X
                type: postback
                keyword: "b,B,kiyo x,x"
                payload:
                  action: "kiyoX"
              - label: Razer Kiyo Pro
                type: postback
                keyword: "c,C,kiyo pro,pro"
                payload:
                  action: "kiyoPro"
              - label: Razer Stargazer
                type: postback
                keyword: "d,D,stargazer"
                payload:
                  action: "stargazer"
              - label: Razer Blade webcam
                type: postback
                keyword: "e,E,blade webcam,blade"
                payload:
                  action: "bladeWebcam"
    transitions:
      next: intent
      actions:
        kiyo: razerWebcamKiyo
        kiyoX: razerWebcamKiyoX
        kiyoPro: razerWebcamKiyoPro
        stargazer: razerWebcamStargazer
        bladeWebcam: razerWebcamBlade
        match: hiddenAction
        cancel: errorOutput

  razerWebcamKiyo:
    component: System.Output
    properties:
      text: "${rb.razerWebcamKiyo}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  razerWebcamKiyoX:
    component: System.Output
    properties:
      text: "${rb.razerWebcamKiyoX}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  razerWebcamKiyoPro:
    component: System.Output
    properties:
      text: "${rb.razerWebcamKiyoPro}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  razerWebcamStargazer:
    component: System.Output
    properties:
      text: "${rb.razerWebcamStargazer}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  razerWebcamBlade:
    component: System.Output
    properties:
      text: "${rb.razerWebcamBlade}"
      keepTurn: true
    transitions:
      next: quickAnswerLaptop

  razerRipsaw:
    component: System.Output
    properties:
      text: "${rb.razerRipsaw}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  resolveTurret:
    component: System.Output
    properties:
      text: "${rb.turretFAQ}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  #-------------------------------------------------------------------------------
  # Maximus Flows ----------------------------------------------------------------
  #-------------------------------------------------------------------------------
  mousePath:
    component: System.SetVariable
    properties:
      variable: user.journey
      value: true
  mousePath2:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: user.secondTry
      value: true
  setTypeMouse:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: user.chatType
      value: "TS1"
  resolveMousePath:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      autoNumberPostbackActions: "false"
      maxPrompts: 2
      metadata:
        responseItems:
          - type: text
            text: "Please confirm you need help with your mouse"
            actions:
              - label: "Yes"
                type: postback
                keyword: "a,A,y,Y"
                payload:
                  action: "system.textReceived"
                  variables:
                    system.text: "RPSVFDMSE VFD"
              - label: "No"
                type: postback
                keyword: "b,B,n,N"
                payload:
                  action: "No"
    transitions:
      next: intent
      actions:
        No: rephraseQuestionPath
        match: hiddenAction
        cancel: errorOutput

  dongleBasiliskViper:
    component: System.SetVariable
    properties:
      variable: user.journey
      value: true
  dongleBasiliskViper1:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: user.secondTry
      value: true
  dongleBasiliskViper2:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: user.chatType
      value: "TS1"
  dongleBasiliskViper3:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      autoNumberPostbackActions: "false"
      maxPrompts: 2
      metadata:
        responseItems:
          - type: text
            text: "Please confirm you need help with your mouse dongle"
            actions:
              - label: "Yes"
                type: postback
                keyword: "1,a,y"
                payload:
                  action: "system.textReceived"
                  variables:
                    system.text: "BSLSKVPR"
              - label: "No"
                type: postback
                keyword: "2,b,n"
                payload:
                  action: "No"
    transitions:
      next: intent
      actions:
        No: rephraseQuestionPath
        match: hiddenAction
        cancel: errorOutput

  keyboardPath:
    component: System.SetVariable
    properties:
      variable: user.journey
      value: true
  keyboardPath2:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: user.secondTry
      value: true
  setTypeKeyboard:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: user.chatType
      value: "TS1"
  resolveKeyboardPath:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      autoNumberPostbackActions: "false"
      maxPrompts: 2
      metadata:
        responseItems:
          - type: text
            text: "Please confirm you need help with your keyboard"
            actions:
              - label: "Yes"
                type: postback
                keyword: "a,A,y,Y"
                payload:
                  action: "system.textReceived"
                  variables:
                    system.text: "RPSVFDKBRD"
              - label: "No"
                type: postback
                keyword: "b,B,n,N"
                payload:
                  action: "No"
    transitions:
      next: intent
      actions:
        No: rephraseQuestionPath
        match: hiddenAction
        cancel: errorOutput

  headsetPath:
    component: System.SetVariable
    properties:
      variable: user.journey
      value: true
  headsetPath2:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: user.secondTry
      value: true
  setTypeHeadset:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: user.chatType
      value: "TS1"
  resolveHeadsetPath:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      autoNumberPostbackActions: "false"
      maxPrompts: 2
      metadata:
        responseItems:
          - type: text
            text: "Please confirm you need help with your headset"
            actions:
              - label: "Yes"
                type: postback
                keyword: "a,A,y,Y"
                payload:
                  action: "system.textReceived"
                  variables:
                    system.text: "RPSVFDHDST"
              - label: "No"
                type: postback
                keyword: "b,B,n,N"
                payload:
                  action: "No"
    transitions:
      next: intent
      actions:
        No: rephraseQuestionPath
        match: hiddenAction
        cancel: errorOutput

  laptopPath:
    component: System.SetVariable
    properties:
      variable: user.journey
      value: true
  laptopPath2:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: user.secondTry
      value: true
  setTypeLaptop:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: user.chatType
      value: "TSLaptop"
  resolveLaptopPath:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      autoNumberPostbackActions: "false"
      maxPrompts: 2
      metadata:
        responseItems:
          - type: text
            text: "Please confirm you need help with your laptop"
            actions:
              - label: "Yes"
                type: postback
                keyword: "a,A,y,Y"
                payload:
                  action: "system.textReceived"
                  variables:
                    system.text: "RPSVFDLPTP"
              - label: "No"
                type: postback
                keyword: "b,B,n,N"
                payload:
                  action: "No"
    transitions:
      next: intent
      actions:
        No: rephraseQuestionPath
        match: hiddenAction
        cancel: errorOutput

  #-------------------------------------------------------------------------------
  # Task "Proof of purchase" -----------------------------------------------------
  #-------------------------------------------------------------------------------
  resolveProof:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      autoNumberPostbackActions: "false"
      maxPrompts: 2
      metadata:
        responseItems:
          - type: text
            text: "Do you have a Proof of Purchase (POP) or Razer.com Order Number for warranty eligibility?"
            actions:
              - label: "I don't have a Proof of Purchase"
                type: postback
                keyword: "a,A"
                payload:
                  action: No proof of purchase
              - label: "I have a Proof of Purchase"
                type: postback
                keyword: "b,B"
                payload:
                  action: With proof of purchase
              - label: "I have a Razer.com Order #"
                type: postback
                keyword: "c,C"
                payload:
                  action: With proof of purchase
    transitions:
      next: intent
      actions:
        No proof of purchase: noProofOutput
        With proof of purchase: resolveWithProof
        match: hiddenAction
        cancel: errorOutput

  #-------------------------------------------------------------------------------
  # Task "RMA Status" ------------------------------------------------------------
  #-------------------------------------------------------------------------------
  rmaStatus:
    component: System.SetVariable
    properties:
      variable: chatHoops
      value: true
  rmaStatus1:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: "user.supportType"
      value: "rma"
  rmaStatus3:
    component: System.ResetVariables
    properties:
      insightsInclude: false
      variableList: "rmaStatus"
  rmaStatus4:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: "rmaStatus.email"
      value: "${profile.email.value}"
  rmaStatus5:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: "user.rmaTryCount"
      value: 1
  rmaStatus6:
    component: System.Output
    properties:
      text: "${rb.rmaStatusIntro}"
      keepTurn: true
  setRmaQuery:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      variable: rmaStatus
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      maxPrompts: 3
      cancelPolicy: "immediate"
      metadata:
        responseItems:
          - type: "text"
            text: "${system.entityToResolve.value.prompt}"
            actions:
              - label: "${enumValue}"
                type: "postback"
                iteratorVariable: "system.entityToResolve.value.enumValues"
                payload:
                  action: "${enumValue}"
                  variables:
                    rmaStatus: "${enumValue}"
    transitions:
      next: rmaQueryConfirmation
      actions:
        match: hiddenRmaStatusAction
        cancel: cancelRmaStatus

  cancelRmaStatus:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      autoNumberPostbackActions: "false"
      maxPrompts: 2
      metadata:
        responseItems:
          - type: text
            text: "Do you want to cancel your query for RMA Status?"
            actions:
              - label: "Yes"
                type: postback
                keyword: "a,A,y,Y"
                payload:
                  action: "Yes"
              - label: "No"
                type: postback
                keyword: "b,B,n,N"
                payload:
                  action: "No"
    transitions:
      next: intent
      actions:
        Yes: resetConversation
        No: resetRmaStatus
        match: hiddenAction
        cancel: errorOutput

  hiddenRmaStatusAction:
    component: System.Switch
    properties:
      source: "<#if system.entityToResolve.value.outOfOrderMatches?size == 1><#if system.entityToResolve.value.outOfOrderMatches[0].name == 'help'>help<#else><#if system.entityToResolve.value.outOfOrderMatches[0].name == 'exit'>exit<#else><#if system.entityToResolve.value.outOfOrderMatches[0].name == 'agent'>agent<#else>restart</#if></#if></#if><#else>NONE</#if>"
      values:
        - "help"
        - "exit"
        - "restart"
        - "agent"
    transitions:
      actions:
        help: rmaStatusHelpGuide
        exit: endChatPrompt
        restart: resetConversation
        agent: agentPrompt
        NONE: setRmaQuery

  rmaStatusHelpGuide:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      autoNumberPostbackActions: "false"
      maxPrompts: 2
      metadata:
        responseItems:
          - type: text
            text: "${rb.actionKeywords}"
            actions:
              - label: "Ask another question"
                type: postback
                keyword: "a,A,startover,reset,restart"
                payload:
                  action: "startOver"
              - label: "Go back"
                type: postback
                keyword: "b,B,back"
                payload:
                  action: "goBack"
    transitions:
      next: intent
      actions:
        startOver: resetConversation
        goBack: setRmaQuery
        match: hiddenAction
        cancel: errorOutput

  rmaQueryConfirmation:
    component: System.Output
    properties:
      text: "RMA #: ${rmaStatus.value.number}<br />Email address: ${rmaStatus.value.email}"
      keepTurn: true
  rmaQueryPrompt:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      autoNumberPostbackActions: "false"
      maxPrompts: 2
      metadata:
        responseItems:
          - type: text
            text: "Are the details above correct?"
            actions:
              - label: "Yes"
                type: postback
                keyword: "yes,y"
                payload:
                  action: correct
              - label: "No"
                type: postback
                keyword: "no,n"
                payload:
                  action: incorrect
    transitions:
      next: intent
      actions:
        correct: checkRma
        incorrect: resetRmaStatus

  resetRmaStatusNumber:
    component: System.ResetVariables
    properties:
      insightsInclude: true
      variableList: "rmaStatus.number"
    transitions:
      next: "setRmaQuery"

  resetRmaStatusEmail:
    component: System.ResetVariables
    properties:
      insightsInclude: true
      variableList: "rmaStatus.email"
    transitions:
      next: "setRmaQuery"

  resetRmaStatus:
    component: System.ResetVariables
    properties:
      insightsInclude: true
      variableList: "rmaStatus"
    transitions:
      next: "setRmaQuery"

  checkRma:
    component: System.Output
    properties:
      text: "Please wait while we check on your RMA"
      keepTurn: true
    transitions:
      next: "getRmaDetails"

  getRmaDetails:
    component: "osvc.GetRmaDetails"
    properties:
      variable: "rmaDetails"
      rmaNumber: "${rmaStatus.value.number}"
      userEmail: "${rmaStatus.value.email}"
      clientLanguage: "${profile.locale}"
    transitions:
      actions:
        rmaNumberFormatInvalid: "rmaNumberFormatInvalid"
        rmaFound: "rmaFound"
        rmaNotFound: "rmaNotFound"
        fail: "rmaLookupFailed"

  rmaNumberFormatInvalid:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      autoNumberPostbackActions: "false"
      maxPrompts: 2
      metadata:
        responseItems:
          - type: text
            text: "You've entered an invalid RMA number. You can try again, ask another question, connect with an agent, or end our session."
            actions:
              - label: Try again
                type: postback
                keyword: "tryagain,again,rma status"
                payload:
                  action: rmaStatus
              - label: Submit a Support Ticket
                type: postback
                keyword: "ticket"
                payload:
                  action: ticket
              - label: Ask another question
                type: postback
                keyword: "startover,reset,restart"
                payload:
                  action: startOver
              - label: Connect to an agent
                type: postback
                keyword: "agent"
                payload:
                  action: agent
              - label: End session
                type: postback
                keyword: "end,quit,exit,bye"
                payload:
                  action: endChat
    transitions:
      next: intent
      actions:
        rmaStatus: rmaStatus
        ticket: initiateCaseCreation
        startOver: resetConversation
        agent: checkChatHoops
        endChat: endPrompt
        match: hiddenAction
        cancel: errorOutput

  rmaFound:
    component: System.Output
    properties:
      text: "Please review your RMA status below."
      keepTurn: true
    transitions:
      next: "setRmaDetailsOutput"

  setRmaDetailsOutput:
    component: System.SetVariable
    properties:
      variable: "rmaDetailsOutput"
      insightsInclude: false
      value:
        - "<#assign rmatypesrepair = ['860']> <#assign rmatypesreplacement = ['854', '861']>"
        - "${rb('rmaStatusLabelNumber')}: ${rmaDetails.value.rmanumber} <#if rmatypesrepair?seq_contains(rmaDetails.value.rmatypeid)>(${rb('rmaStatusTypeRepair')})<#elseif rmatypesreplacement?seq_contains(rmaDetails.value.rmatypeid)>(${rb('rmaStatusTypeReplacement')})<#else></#if><br />"
        - "${rb('rmaStatusLabelStatus')}: ${rb('rmaStatusLink', rmaDetails.value.statusexternaldisplaytext)}<br />"
        - "${rb('rmaStatusLabelProduct')}: <#if rmaDetails.value.productname != 'null'>${rmaDetails.value.productname}<#else>${rb('rmaStatusMsgUnavail')}</#if><br />"
        - "${rb('rmaStatusLabelCode')}: <#if rmaDetails.value.productcode != 'null'>${rmaDetails.value.productcode}<#else>${rb('rmaStatusMsgUnavail')}</#if><br />"
        - "${rb('rmaStatusLabelSerial')}: <#if rmaDetails.value.serialnumber != 'N/A'>${rmaDetails.value.serialnumber}<#else>${rb('rmaStatusMsgUnavail')}</#if><br />"
        - "<#if rmaDetails.value.outboundtrackingnumber != 'null'>${rb('rmaStatusTracking', rmaDetails.value.outboundtrackingnumber, rmaDetails.value.trackurloutbound)}"
        - "<#elseif rmaDetails.value.inboundtrackingnumber != 'null'>${rb('rmaStatusTracking', rmaDetails.value.inboundtrackingnumber, rmaDetails.value.trackurlinbound)}"
        - "<#else>"
        - "</#if>"
    transitions:
      next: "displayRmaResults"

  displayRmaResults:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      autoNumberPostbackActions: "false"
      maxPrompts: 2
      metadata:
        responseItems:
          - type: "text"
            text: "${rmaDetailsOutput}"
            separateBubbles: false
            iteratorVariable: "rmaDetailsOutput"
            actions:
              - label: Ask another question
                type: postback
                keyword: "startover,reset,restart"
                payload:
                  action: startOver
              - label: End session
                type: postback
                keyword: "end,quit,exit,bye"
                payload:
                  action: endChat
    transitions:
      next: intent
      actions:
        startOver: resetConversation
        endChat: endPrompt
        match: hiddenAction
        cancel: errorOutput

  rmaLookupFailed:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      autoNumberPostbackActions: "false"
      maxPrompts: 2
      metadata:
        responseItems:
          - type: text
            text: "Sorry, the RMA Lookup failed"
            actions:
              - label: Try again
                type: postback
                keyword: "tryagain,again,rma status"
                payload:
                  action: rmaStatus
              - label: Submit a Support Ticket
                type: postback
                keyword: "a,A,cp,ticket"
                payload:
                  action: ticket
              - label: Ask another question
                type: postback
                keyword: "startover,reset,restart"
                payload:
                  action: startOver
              - label: Connect to an agent
                type: postback
                keyword: "agent"
                payload:
                  action: agent
              - label: End session
                type: postback
                keyword: "end,quit,exit,bye"
                payload:
                  action: endChat
    transitions:
      next: intent
      actions:
        rmaStatus: rmaStatus
        ticket: initiateCaseCreation
        startOver: resetConversation
        agent: checkChatHoops
        endChat: endPrompt
        match: hiddenAction
        cancel: errorOutput

  rmaNotFound:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      autoNumberPostbackActions: "false"
      maxPrompts: 2
      metadata:
        responseItems:
          - type: text
            text: "${rb('rmaStatusMsgNotFound')}"
            actions:
              - label: Try again
                type: postback
                keyword: "try again,again,rma status"
                payload:
                  action: checkTryCount
              - label: Ask another question
                type: postback
                keyword: "startover,reset,restart"
                payload:
                  action: startOver
              - label: Connect to an agent
                type: postback
                keyword: "agent"
                payload:
                  action: agent
              - label: End session
                type: postback
                keyword: "end,quit,exit,bye"
                payload:
                  action: endChat
    transitions:
      next: intent
      actions:
        checkTryCount: checkRmaStatusTryCount
        startOver: resetConversation
        agent: checkChatHoops
        endChat: endPrompt
        match: hiddenAction
        cancel: errorOutput

  checkRmaStatusTryCount:
    component: "System.ConditionEquals"
    properties:
      variable: user.rmaTryCount
      value: "3"
    transitions:
      actions:
        equal: rmaStatusMaxAttempt
        notequal: addRmaStatusTryCount

  addRmaStatusTryCount:
    component: "System.SetVariable"
    properties:
      variable: user.rmaTryCount
      value: ${user.rmaTryCount.value?number + 1}
    transitions:
      next: resetRmaStatus

  rmaStatusMaxAttempt:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      autoNumberPostbackActions: "false"
      maxPrompts: 2
      metadata:
        responseItems:
          - type: text
            text: "I am sorry but you have reached the maximum attempts to look for an RMA."
            actions:
              - label: Ask a question
                type: postback
                keyword: "startover,reset,restart"
                payload:
                  action: startOver
              - label: End session #todo: create option for startover?
                type: postback
                keyword: "end,quit,exit,bye"
                payload:
                  action: endChat
    transitions:
      next: intent
      actions:
        startOver: resetConversation
        endChat: endPrompt
        match: hiddenAction
        cancel: errorOutput

  #-------------------------------------------------------------------------------
  # Simple Flows -----------------------------------------------------------------
  #-------------------------------------------------------------------------------
  ccRejectedOutput:
    component: System.Output
    properties:
      text: "${rb.creditRejected}"
      keepTurn: true
  creditAssignQueue:
    component: System.SetVariable
    properties:
      variable: user.chatType
      value: "CS"
  resolveccSupport:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      translate: false
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      autoNumberPostbackActions: "false"
      maxPrompts: 2
      metadata:
        responseItems:
          - type: text
            text: "If you still need help with your order, you can contact us for support through the options below."
            actions:
              - label: Submit a Support Ticket
                type: postback
                keyword: "a,A,cp,ticket"
                payload:
                  action: ticket
              - label: Connect to an agent
                type: postback
                keyword: "b,B,agent"
                payload:
                  action: Connect to an agent
              - label: Ask another question
                type: postback
                keyword: "c,C,startover,reset,restart"
                payload:
                  action: startOver
    transitions:
      next: intent
      actions:
        ticket: initiateCaseCreation
        Connect to an agent: startChat
        startOver: resetConversation
        match: hiddenAction
        cancel: errorOutput

  batteryIssue:
    component: System.Output
    properties:
      text: "${rb.bloatedBattery}"
      keepTurn: true
    transitions:
      next: quickAnswerLaptop

  resolvePurchasedDays:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      autoNumberPostbackActions: "false"
      maxPrompts: 2
      metadata:
        responseItems:
          - type: text
            text: "Did you purchase your Razer product within the last 14 days?"
            actions:
              - label: "Yes"
                type: postback
                keyword: "a,A,y,Y"
                payload:
                  action: Within 14 days
              - label: "No"
                type: postback
                keyword: "b,B,n,N"
                payload:
                  action: Beyond 14 days
    transitions:
      next: intent
      actions:
        Within 14 days: setRmaTypeReplace
        Beyond 14 days: setRmaTypeRepair
        match: hiddenAction
        cancel: errorOutput

  setRmaRequest:
    component: System.SetVariable
    properties:
      variable: rmaRequestedFromAnswer
      value: true
    transitions:
      next: directRmaRequest

  rmaDeclined:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      autoNumberPostbackActions: "false"
      maxPrompts: 2
      metadata:
        responseItems:
          - type: text
            text: "Since you've opted not to proceed with an RMA, please contact us for further assistance. There are several ways to do it. Please select an option below."
            actions:
              - label: Submit a Support Ticket
                type: postback
                keyword: "a,A,cp,ticket"
                payload:
                  action: ticket
              - label: Connect to an agent
                type: postback
                keyword: "b,B,agent"
                payload:
                  action: agent
              - label: Visit Razer Insider
                type: url
                keyword: "c,C,insider"
                payload:
                  url: "https://insider.razer.com/index.php?forums/support/&utm_source=chatbot_insider&utm_medium=chat&utm_campaign=rzchatbot&s=oda"
              - label: Ask another question
                type: postback
                keyword: "d,D,startover,reset,restart"
                payload:
                  action: startOver
    transitions:
      next: intent
      actions:
        ticket: initiateCaseCreation
        agent: startChat
        startOver: resetConversation
        match: hiddenAction
        cancel: errorOutput

  micSupport:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      translate: false
      metadata:
        responseItems:
          - type: text
            text: "${rb.micSupport}"
            actions:
              - label: Blade
                type: postback
                keyword: "a,A,blade"
                payload:
                  action: blade
              - label: Headset
                type: postback
                keyword: "b,B,headset"
                payload:
                  action: headset
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      autoNumberPostbackActions: "false"
      maxPrompts: 2
    transitions:
      next: intent
      actions:
        blade: micBladeSupport
        headset: micHeadsetSupport
        match: hiddenAction
        cancel: errorOutput

  micBladeSupport:
    component: System.Output
    properties:
      text: "${rb.micBladeSupport}"
      keepTurn: true
    transitions:
      next: quickAnswerLaptop

  micHeadsetSupport:
    component: System.Output
    properties:
      text: "${rb.micHeadsetSupport}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  authSupport:
    component: System.Output
    properties:
      text: "${rb.authSupport}"
      keepTurn: true
    transitions:
      next: quickAnswerCS

  unhelpfulAnswer:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      autoNumberPostbackActions: "false"
      maxPrompts: 2
      metadata:
        responseItems:
          - type: text
            text: "I am sorry I wasn't able to answer your question. Do you want to connect with an agent?"
            actions:
              - label: "Yes"
                type: postback
                keyword: "a,A,y,Y"
                payload:
                  action: "Yes"
              - label: "No"
                type: postback
                keyword: "b,B,n,N"
                payload:
                  action: "No"
    transitions:
      next: intent
      actions:
        Yes: startChat
        No: resetConversation
        match: hiddenAction
        cancel: errorOutput

  chatExpired:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      autoNumberPostbackActions: "false"
      maxPrompts: 2
      metadata:
        responseItems:
          - type: text
            text: "${rb.chatExpired}"
            actions:
              - label: "Start again"
                type: postback
                keyword: "start again,start"
                payload:
                  action: "restart"
              - label: Connect to an agent
                type: postback
                keyword: "c,C,agent"
                payload:
                  action: agent
    transitions:
      next: intent
      actions:
        restart: resetConversation
        agent: startChat
        match: hiddenAction
        cancel: errorOutput

  #-------------------------------------------------------------------------------
  # Task "Proceed with RMA" ------------------------------------------------------
  #-------------------------------------------------------------------------------
  rmaForm:
    component: System.Output
    properties:
      text: "In order to process your RMA, I will need to ask a few more questions."
      keepTurn: true
    transitions:
      next: setDate

  setDate:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: "currentDateAndTime"
      value: ${.now?string["EEEE, MMMM dd, yyyy, hh:mm a '('zzz')'"]}
    transitions:
      next: resetRmaBag

  resetRma:
    component: System.Output
    properties:
      text: "Okay, let's get the correct information from you."
      keepTurn: true

  resetRmaBag:
    component: System.ResetVariables
    properties:
      insightsInclude: false
      variableList: "rma"
    transitions:
      next: setRmaFirstName

  setRmaFirstName:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: "rma.firstName"
      value: "${profile.firstName.value}"
  setRmaLastName:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: "rma.lastName"
      value: "${profile.lastName.value}"
  setRmaEmail:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: "rma.email"
      value: "${profile.email.value}"
  setRmaContactInfo:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: "contactInfo"
      value: "${profile.contactInfo.value}"
  #  setRmaDescription:
  #    component: System.SetVariable
  #    properties:
  #      insightsInclude: false
  #      variable: "rma.description"
  #      value: "${contactInfo.value.question}"
  setRmaSerialNum:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: "rma.serialNumber"
      value: "<#list contactInfo.value.customFields as p><#if p.name=='Serial Number'><#if p.value!=''>${p.value}<#else>-</#if></#if></#list>"

  checkSerialNum:
    component: System.ConditionEquals
    properties:
      insightsInclude: false
      source: "${rma.value.serialNumber}"
      value: "-"
    transitions:
      actions:
        equal: resetSerialNum
        notequal: checkRmaFromRazer
  resetSerialNum:
    component: System.ResetVariables
    properties:
      insightsInclude: false
      variableList: "rma.serialNumber"

  checkRmaFromRazer:
    component: System.ConditionEquals
    properties:
      insightsInclude: false
      variable: rmaFromRazer
      value: true
    transitions:
      actions:
        equal: setRmaPlaceOfPurchase
        notequal: setRmaOrderNumber

  setRmaPlaceOfPurchase:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: "rma.placeOfPurchase"
      value: "www.razer.com"
    transitions:
      next: resolveRma

  setRmaOrderNumber:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: "rma.orderNumber"
      value: "NA"
    transitions:
      next: resolveRma

  resolveRma:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      variable: rma
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      maxPrompts: 2
      metadata:
        responseItems:
          - type: "text"
            text: "${system.entityToResolve.value.prompt}"
            actions:
              - label: "${enumValue}"
                type: "postback"
                iteratorVariable: "system.entityToResolve.value.enumValues"
                payload:
                  action: "${enumValue}"
                  variables:
                    rma: "${enumValue}"
    transitions:
      next: showRmaData
      # next: noRmaProof
      actions:
        match: hiddenRmaAction
        cancel: cancelRma

  hiddenRmaAction:
    component: System.Switch
    properties:
      source: "<#if system.entityToResolve.value.outOfOrderMatches?size == 1><#if system.entityToResolve.value.outOfOrderMatches[0].name == 'agent'>agent</#if><#else>NONE</#if>"
      values:
        - "agent"
    transitions:
      actions:
        agent: agentPrompt
        NONE: resolveRma

  rmaHelpGuide:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      autoNumberPostbackActions: "false"
      maxPrompts: 2
      metadata:
        responseItems:
          - type: text
            text: "${rb.actionKeywords}"
            actions:
              - label: "Ask another question"
                type: postback
                keyword: "a,A,startover,reset,restart"
                payload:
                  action: "startOver"
              - label: "Go back"
                type: postback
                keyword: "b,B,back"
                payload:
                  action: "goBack"
    transitions:
      next: intent
      actions:
        startOver: resetConversation
        goBack: resetRma
        match: hiddenAction
        cancel: errorOutput

  cancelRma:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      autoNumberPostbackActions: "false"
      maxPrompts: 2
      metadata:
        responseItems:
          - type: text
            text: "Do you want to cancel your RMA request?"
            actions:
              - label: "Yes"
                type: postback
                keyword: "a,A,y,Y"
                payload:
                  action: "Yes"
              - label: "No"
                type: postback
                keyword: "b,B,n,N"
                payload:
                  action: "No"
    transitions:
      next: intent
      actions:
        Yes: resetConversation
        No: resetRma
        match: hiddenAction
        cancel: errorOutput

  proofPrompt:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      autoNumberPostbackActions: "false"
      maxPrompts: 2
      metadata:
        responseItems:
          - type: text
            text: "Do you have a proof of purchase?"
            actions:
              - label: "Yes"
                type: postback
                keyword: "a,A,y,Y"
                payload:
                  action: "Yes"
              - label: "No"
                type: postback
                keyword: "b,B,n,N"
                payload:
                  action: "No"
    transitions:
      next: intent
      actions:
        Yes: resetRmaProof
        No: rmaCheckOrderFrom
        match: hiddenAction
        cancel: errorOutput

  rmaCheckOrderFrom:
    component: System.ConditionEquals
    properties:
      insightsInclude: false
      variable: rmaFromRazer
      value: true
    transitions:
      actions:
        equal: rmaForm
        notequal: noProofOutput

  resetRmaProof:
    component: System.ResetVariables
    properties:
      insightsInclude: false
      variableList: "rmaProof,rmaProofFile,rmaProofType,rmaProofTitle,hasProof"
    transitions:
      next: uploadRmaProof

  uploadRmaProof:
    component: System.Output
    properties:
      text: "Please upload your proof of purchase now. Use the button at the bottom-right corner."
    transitions:
      next: setRmaProofFile

  setRmaProofFile:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: rmaProofFile
      value: "${system.message.payload.localFName}"
  setRmaProofType:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: rmaProofType
      value: "${system.message.payload.contentType}"
  setRmaProofTitle:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: rmaProofTitle
      value: "${system.message.payload.userFName}"
  setCapturedText:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: capturedText
      value: "${system.message.messagePayload.text}"
    transitions:
      next: checkRmaProofFile

  checkRmaProofFile:
    component: System.ConditionExists
    properties:
      insightsInclude: false
      variable: rmaProofFile
    transitions:
      actions:
        exists: setRmaProof
        notexists: checkCapturedText

  checkCapturedText:
    component: System.ConditionExists
    properties:
      insightsInclude: false
      variable: capturedText
    transitions:
      actions:
        exists: rmaProofAction
        notexists: checkAttempt

  rmaProofAction:
    component: System.Switch
    properties:
      source: "${capturedText.value?lower_case}"
      values:
        - "help"
        - "exit"
        - "quit"
        - "bye"
        - "skip"
        - "back"
        - "cancel"
        - "start over"
        - "reset"
        - "restart"
        - "agent"
    transitions:
      actions:
        help: rmaHelpGuide
        exit: endChatPrompt
        quit: endChatPrompt
        bye: endChatPrompt
        skip: noRmaProof
        back: noRmaProof
        cancel: noRmaProof
        start over: resetConversation
        reset: resetConversation
        restart: resetConversation
        agent: agentPrompt
        NONE: checkAttempt

  checkAttempt:
    component: System.ConditionEquals
    properties:
      insightsInclude: false
      variable: lastAttempt
      value: true
    transitions:
      actions:
        equal: noRmaProof
        notequal: setLastAttempt
  setLastAttempt:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: lastAttempt
      value: true
    transitions:
      next: resetRmaProof

  setRmaProof:
    component: System.SetVariable
    properties:
      variable: hasProof
      value: true
    transitions:
      next: rmaForm

  noRmaProof:
    component: System.SetVariable
    properties:
      variable: hasProof
      value: false
    transitions:
      next: rmaForm

  # showRmaProofData:
  #   component: System.Output
  #   properties:
  #     text: "File: ${rmaProofFile.value}<br />File type: ${rmaProofType.value}<br />File name: ${rmaProofTitle.value}"
  #     keepTurn: true
  #   transitions:
  #     next: showRmaData

  showRmaData:
    component: System.Output
    properties:
      text: "Name: ${rma.value.firstName} ${rma.value.lastName}<br />Email: ${rma.value.email?lower_case}<br />Order number: ${rma.value.orderNumber}<br />Serial number: ${rma.value.serialNumber}<br />Product number: ${rma.value.productNumber}<br />Purchased from: ${rma.value.placeOfPurchase}<#if rmaProofTitle.value??><br />File: ${rmaProofTitle.value}</#if>"
      keepTurn: true
  showRmaData1:
    component: System.Output
    properties:
      text: "Description: ${rma.value.description}"
      keepTurn: true
    transitions:
      next: proceedPrompt

  proceedPrompt:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      autoNumberPostbackActions: "false"
      maxPrompts: 2
      metadata:
        responseItems:
          - type: text
            text: "Are the details above correct?"
            actions:
              - label: "Yes"
                type: postback
                keyword: "a,A,y,Y"
                payload:
                  action: "Yes"
              - label: "No"
                type: postback
                keyword: "b,B,n,N"
                payload:
                  action: "No"
    transitions:
      next: intent
      actions:
        Yes: createRma
        No: resetRma
        match: hiddenAction
        cancel: errorOutput

  createRma:
    component: System.Output
    properties:
      text: "Please wait while we process your RMA request…"
      keepTurn: true
    transitions:
      next: "findContact"

  #
  # OSvC API sequence (custom component fn)
  #
  findContact:
    component: "osvc.FindContact"
    properties:
      userEmail: "${rma.value.email?lower_case}"
      sessionId: "${system.message.channelConversation.sessionId}"
    transitions:
      actions:
        fail: "apiFailed"
        notFound: "createContact"
        found: "createCaseAndRma"

  apiFailed:
    component: System.Output
    properties:
      text: "I had an issue processing your information. Please try again later."
      keepTurn: true
    transitions:
      next: resolveRejected

  createContact:
    component: "osvc.CreateContact"
    properties:
      userEmail: "${rma.value.email?lower_case}"
      userFirstName: "${rma.value.firstName}"
      userLastName: "${rma.value.lastName}"
    transitions:
      actions:
        fail: "apiFailed"
        notCreated: "apiFailed"
        created: "createCaseAndRma"

  createCaseAndRma:
    component: "System.ConditionEquals"
    properties:
      variable: "hasProof"
      value: true
    transitions:
      actions:
        equal: "createCaseWithProof"
        notequal: "createCaseWithoutProof"

  createCaseWithProof:
    component: "osvc.CreateCaseRMA"
    properties:
      contactId: "${contactId}"
      caseSubject: "${system.config.rmaCaseSubject}"
      rmaType: "${user.rmaType.value}"
      orderNumber: "${rma.value.orderNumber}"
      serialNumber: "${rma.value.serialNumber}"
      productNumber: "${rma.value.productNumber}"
      placeOfPurchase: "${rma.value.placeOfPurchase}"
      description: "${rma.value.description}"
      fileLocalFName: "${rmaProofFile.value}"
      fileUserFName: "${rmaProofTitle.value}"
      fileContentType: "${rmaProofType.value}"
      chatSessionId: "${profile.contactInfo.value.sessionId}"
      region: "${system.config.region}"
      type: "${rmaType.value}"
    transitions:
      actions:
        fail: "apiFailed"
        notCreated: "apiFailed"
        created: "setIncidentId"

  createCaseWithoutProof:
    component: "osvc.CreateCaseRMA"
    properties:
      contactId: "${contactId}"
      caseSubject: "${system.config.rmaCaseSubject}"
      rmaType: "${user.rmaType.value}"
      orderNumber: "${rma.value.orderNumber}"
      serialNumber: "${rma.value.serialNumber}"
      productNumber: "${rma.value.productNumber}"
      placeOfPurchase: "${rma.value.placeOfPurchase}"
      description: "${rma.value.description}"
      fileLocalFName: ""
      fileUserFName: ""
      fileContentType: ""
      chatSessionId: "${profile.contactInfo.value.sessionId}"
      region: "${system.config.region}"
      type: "${rmaType.value}"
    transitions:
      actions:
        fail: "apiFailed"
        notCreated: "apiFailed"
        created: "setIncidentId"

  setIncidentId:
    component: "osvc.SetIncidentOnChat"
    properties:
      incidentId: "${caseIncidentId}"
      chatSessionId: "${profile.contactInfo.value.sessionId}"
    transitions:
      actions:
        incidentSetOnChat: "caseAndRmaCreated"
        fail: "apiFailed"

  caseAndRmaCreated:
    component: System.Output
    properties:
      text: "${rb('rmaCreatedMsg', caseReferenceNumber)}"
      keepTurn: true
  setRmaCreated:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: user.rmaCreated
      value: true
  setRmaChatHoops:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: chatHoops
      value: true
  rmaExit:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      autoNumberPostbackActions: "false"
      maxPrompts: 2
      metadata:
        responseItems:
          - type: text
            text: "You can ask another question, connect with an agent, or end our session."
            actions:
              - label: Ask another question
                type: postback
                keyword: "a,A,startover,reset,restart"
                payload:
                  action: startOver
              - label: Connect to an agent
                type: postback
                keyword: "b,B,agent"
                payload:
                  action: agent
              - label: End session
                type: postback
                keyword: "c,C,end,quit,exit,bye"
                payload:
                  action: endChat
    transitions:
      next: intent
      actions:
        startOver: resetConversation
        agent: startChat
        endChat: endPrompt
        match: hiddenAction
        cancel: errorOutput

  #-------------------------------------------------------------------------------
  # Task "Start Chat" ------------------------------------------------------------
  #-------------------------------------------------------------------------------
  agentPrompt:
    component: System.ConditionEquals
    properties:
      variable: user.journey
      value: true
    transitions:
      actions:
        equal: resolveAgentPrompt
        notequal: userJourneyFalse

  userJourneyFalse:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      autoNumberPostbackActions: "false"
      maxPrompts: 2
      metadata:
        responseItems:
          - type: text
            text: "Before connecting to an agent, please select an option below or tell us what you're looking for."
            actions:
              - label: "7.1 Surround Sound Activation"
                type: postback
                keyword: "1,a,A"
                payload:
                  action: "activation"
              - label: "Get RMA status"
                type: postback
                keyword: "2,b,B,rma,status"
                payload:
                  action: "status"
              - label: "Product Support"
                type: postback
                keyword: "3,c,C,product,support"
                payload:
                  action: "question"
              - label: "Razer order inquiry"
                type: postback
                keyword: "4,d,D,order"
                payload:
                  action: "order"
              - label: "Buy spare part/accessory"
                type: postback
                keyword: "5,e,E,parts,accessory"
                payload:
                  action: "accessory"
              - label: "Product registration issue"
                type: postback
                keyword: "6,f,F,register"
                payload:
                  action: "registration"
    transitions:
      next: intent
      actions:
        activation: surroundSoundTs
        status: rmaStatus
        question: technicalSupport
        order: RazerComOrder.start
        accessory: menuGetAccessory
        registration: menuRegistrationFailed
        match: hiddenAction
        cancel: errorOutput

  resolveAgentPrompt:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      autoNumberPostbackActions: "false"
      maxPrompts: 2
      metadata:
        responseItems:
          - type: text
            text: "Do you want to connect with an agent?"
            actions:
              - label: "Yes"
                type: postback
                keyword: "a,A,y,Y"
                payload:
                  action: "Yes"
              - label: "No"
                type: postback
                keyword: "b,B,n,N"
                payload:
                  action: "No"
    transitions:
      next: intent
      actions:
        Yes: startChat
        No: resetConversation
        match: hiddenAction
        cancel: errorOutput

  startChat:
    component: System.Switch
    properties:
      variable: user.chatType
      values:
        - "CS"
        - "TS1"
        - "TS2"
        - "TSLaptop"
        - "TSChair"
        - "TSEdge"
    transitions:
      actions:
        CS: setChatQueueCS
        TS1: setChatQueueTS1
        TS2: setChatQueueTS2
        TSLaptop: setChatQueueLaptop
        TSChair: setChatQueueTSChair
        TSEdge: setChatQueueTSEdge
        NONE: setChatQueueTS1

  setChatQueueCS:
    component: System.SetVariable
    properties:
      variable: chatQueue
      value: "${system.config.incidentCsId}"
  setChatWebIncidentCS:
    component: System.SetVariable
    properties:
      variable: webIncident
      value: "My Order from Razer.com"
  setChatTypeCS:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: chatType
      value: "${system.config.incidentCsId}"
    transitions:
      next: checkChatQueue

  setChatQueueTS1:
    component: System.SetVariable
    properties:
      variable: chatQueue
      value: "${system.config.incidentTs1Id}"
  setChatWebIncidentTS1:
    component: System.SetVariable
    properties:
      variable: webIncident
      value: "My Peripheral (mouse, keyboard, headset)"
  setChatTypeTS1:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: chatType
      value: "${system.config.incidentTs1Id}"
    transitions:
      next: checkChatQueue

  setChatQueueTS2:
    component: System.SetVariable
    properties:
      variable: chatQueue
      value: "${system.config.incidentTs2Id}"
  setChatWebIncidentTS2:
    component: System.SetVariable
    properties:
      variable: webIncident
      value: "My Razer Desktop & Components"
  setChatTypeTS2:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: chatType
      value: "${system.config.incidentTs2Id}"
    transitions:
      next: checkChatQueue

  setChatQueueLaptop:
    component: System.SetVariable
    properties:
      variable: chatQueue
      value: "${system.config.incidentTs2Id}"
  setChatWebIncidentLaptop:
    component: System.SetVariable
    properties:
      variable: webIncident
      value: "My Razer Laptop"
  setChatTypeLaptop:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: chatType
      value: "${system.config.incidentTs2Id}"
    transitions:
      next: checkChatQueue

  setChatQueueTSChair:
    component: System.SetVariable
    properties:
      variable: chatQueue
      value: "${system.config.incidentTsChairId}"
  setChatWebIncidentTSChair:
    component: System.SetVariable
    properties:
      variable: webIncident
      value: "My Razer Gaming Chair"
  setChatTypeTSChair:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: chatType
      value: "${system.config.incidentTsChairId}"
    transitions:
      next: checkChatQueue

  setChatQueueTSEdge:
    component: System.SetVariable
    properties:
      variable: chatQueue
      value: "${system.config.incidentTs2Id}"
  setChatWebIncidentTSEdge:
    component: System.SetVariable
    properties:
      variable: webIncident
      value: "My Razer Edge Handheld"
  setChatTypeTSEdge:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: chatType
      value: "${system.config.incidentTs2Id}"
    transitions:
      next: checkChatQueue

  checkChatQueue:
    component: "osvc.CheckChatQueue"
    properties:
      webIncidentTypeId: "${chatQueue}"
    transitions:
      actions:
        chatAvailable: setContactInfo
        chatUnavailableMaxQueue: chatUnavailableMaxQueue
        chatUnavailableHours: chatUnavailableHours
        fail: timedOutMessage

  chatUnavailableMaxQueue:
    component: System.Output
    properties:
      text: "All agents are currently busy. Please try again later."
      keepTurn: true
    transitions:
      next: handleRejected

  chatUnavailableHours:
    component: System.Output
    properties:
      text: "${rb.chatUnavailable}"
      keepTurn: true
    transitions:
      next: handleRejected

  # isRequestFromSurroundSound:
  #   component: System.ConditionExists
  #   properties:
  #     insightsInclude: false
  #     variable: requestFromSS
  #   transitions:
  #     actions:
  #       exists: connectingOutput
  #       notexists: setContactInfo

  #
  # Custom chat subject and chat queue sequence
  #
  setContactInfo:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: "contactInfo"
      value: "${profile.contactInfo.value}"
    transitions:
      next: setSerialNum

  setSerialNum:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: "serialNumber"
      value: "<#if (profile.contactInfo)??><#list profile.contactInfo.value.customFields as p><#if p.name=='Serial Number'><#if p.value!='Unavailable' && p.value!=''>${p.value}<#else>-</#if></#if></#list><#else>-</#if>"
    transitions:
      next: isChatQuestionEmpty

  isChatQuestionEmpty:
    component: System.ConditionExists
    properties:
      insightsInclude: false
      variable: iResult
    transitions:
      actions:
        exists: setChatQuestionVar
        notexists: resetChatQuestion

  setChatQuestionVar:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: chatQuestion
      value: "${iResult.value.query}"
    transitions:
      next: connectingOutput

  resetChatQuestion:
    component: System.ResetVariables
    properties:
      insightsInclude: false
      variableList: chatQuestion
    transitions:
      next: getChatQuestion

  getChatQuestion:
    component: "System.Text"
    properties:
      prompt: "Can you describe your issue or question before we connect you to an agent?"
      variable: chatQuestion
    transitions:
      next: chatQuestionOutput

  chatQuestionOutput:
    component: System.Output
    properties:
      text: "Your question/issue: ${chatQuestion}"
      keepTurn: true
    transitions:
      next: connectingOutput

  connectingOutput:
    component: System.Output
    properties:
      text: "Please wait while we check if an agent is available. During this time we will not be able to reply to any response."
      keepTurn: true
    transitions:
      next: setChatQuestion

  setChatQuestion:
    component: "osvc.UpdateQuestionOnChat"
    properties:
      newChatQuestion: "${chatQuestion.value}"
      chatSessionId: "${profile.contactInfo.value.sessionId}"
    transitions:
      actions:
        questionUpdatedOnChat: "chatFindContact"
        fail: "apiFailed"

  chatFindContact:
    component: "osvc.FindContact"
    properties:
      userEmail: "${profile.email.value}"
      sessionId: "${system.message.channelConversation.sessionId}"
    transitions:
      actions:
        found: "setChatContact"
        notFound: "chatCreateContact"
        fail: "apiFailed"

  chatCreateContact:
    component: "osvc.CreateContact"
    properties:
      userEmail: "${profile.email.value}"
      userFirstName: "${profile.firstName.value}"
      userLastName: "${profile.lastName.value}"
    transitions:
      actions:
        created: "setChatContact"
        notCreated: "apiFailed"
        fail: "apiFailed"

  setChatContact:
    component: "osvc.SetContactForChat"
    properties:
      contactId: "${contactId}"
      webIncidentTypeId: "${chatType}"
    transitions:
      actions:
        contactSetForChat: "agentTransfer"
        fail: "timedOutMessage"

  agentTransfer:
    component: System.AgentTransfer
    properties:
      allowTransferIf: "agentsAreAvailable"
      waitingMessage: "Waiting for an agent to assist you..."
      rejectedMessage: "Sorry, but no one is available right now. Please try again later."
      errorMessage: "Oops! We're having system issues. I'm sorry but I can't connect you with an agent right now."
      customProperties:
        - name: "c$web_incident_type"
          value: "${webIncident.value}"
          type: "STRING"
    transitions:
      next: handleRejected
      actions:
        accepted: setAgentEscalation
        rejected: handleRejected
        error: handleRejected

  timedOutMessage:
    component: System.Output
    properties:
      text: "Sorry, but no one is available right now. Please try again later."
      keepTurn: true
    transitions:
      next: handleRejected

  setAgentEscalation:
    component: System.SetVariable
    properties:
      insightsEndConversation: true
      variable: user.agentEscalation
      value: true
    transitions:
      return: "done"

  handleRejected: # Handle rejected agent transfer
    component: System.CommonResponse
    properties:
      processUserMessage: true
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      autoNumberPostbackActions: "false"
      maxPrompts: 2
      metadata:
        responseItems:
          - type: text
            text: "Meanwhile, there are several ways to contact us for support. Please select an option below. "
            actions:
              - label: Submit a Support Ticket
                type: postback
                keyword: "a,A,cp,ticket"
                payload:
                  action: ticket
              - label: Visit Razer Insider
                type: url
                keyword: "b,B,insider"
                payload:
                  url: "https://insider.razer.com/index.php?forums/support/&utm_source=chatbot_insider&utm_medium=chat&utm_campaign=rzchatbot&s=oda"
              - label: Ask another question
                type: postback
                keyword: "c,C,startover,reset,restart"
                payload:
                  action: startOver
    transitions:
      next: intent
      actions:
        ticket: initiateCaseCreation
        startOver: resetConversation
        match: hiddenAction
        cancel: errorFallback

  resolveRejected: # Handle rejected api requests or errors
    component: System.CommonResponse
    properties:
      processUserMessage: true
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      autoNumberPostbackActions: "false"
      maxPrompts: 2
      metadata:
        responseItems:
          - type: text
            text: "Meanwhile, there are several ways to contact us for support. Please select an option below. "
            actions:
              - label: Submit a Support Ticket
                type: postback
                keyword: "a,A,cp,ticket"
                payload:
                  action: ticket
              - label: Connect to an agent
                type: postback
                keyword: "b,B,agent"
                payload:
                  action: agent
              - label: Visit Razer Insider
                type: url
                keyword: "c,C,insider"
                payload:
                  url: "https://insider.razer.com/index.php?forums/support/&utm_source=chatbot_insider&utm_medium=chat&utm_campaign=rzchatbot&s=oda"
              - label: Ask another question
                type: postback
                keyword: "d,D,startover,reset,restart"
                payload:
                  action: startOver
    transitions:
      next: intent
      actions:
        ticket: initiateCaseCreation
        agent: startChat
        startOver: resetConversation
        match: hiddenAction
        cancel: errorFallback

  endPrompt:
    component: System.Output
    properties:
      insightsEndConversation: true
      text: "Thanks for chatting with us. ${rb.disconnectChat}"
      keepTurn: false
    transitions:
      return: "done"

  directRmaRequest:
    component: System.ConditionExists
    properties:
      insightsInclude: false
      variable: user.rmaCreated
    transitions:
      actions:
        exists: rmaAlreadyCreated
        notexists: rmaIntro

  rmaAlreadyCreated:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      autoNumberPostbackActions: "false"
      maxPrompts: 2
      metadata:
        responseItems:
          - type: text
            text: "You've already created an RMA. If you still need help, you can contact us for support through the options below."
            actions:
              - label: Submit a Support Ticket
                type: postback
                keyword: "b,B,cp,ticket"
                payload:
                  action: ticket
              - label: Connect to an agent
                type: postback
                keyword: "b,B,agent"
                payload:
                  action: agent
              - label: Visit Razer Insider
                type: url
                keyword: "c,C,insider"
                payload:
                  url: "https://insider.razer.com/index.php?forums/support/&utm_source=chatbot_insider&utm_medium=chat&utm_campaign=rzchatbot&s=oda"
              - label: Ask another question
                type: postback
                keyword: "d,D,startover,reset,restart"
                payload:
                  action: startOver
    transitions:
      next: intent
      actions:
        ticket: initiateCaseCreation
        agent: startChat
        startOver: resetConversation
        match: hiddenAction
        cancel: errorFallback

  rmaIntro:
    component: System.Output
    properties:
      text: "I'm sorry to hear your product is defective. To start the RMA process, we'll need to ask a few questions."
      keepTurn: true
  rmaRequestedFromAnswer:
    component: System.ConditionExists
    properties:
      insightsInclude: false
      variable: rmaRequestedFromAnswer
    transitions:
      actions:
        exists: setRmaTypeReplace
        notexists: rmaDeviceType

  rmaDeviceType:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      nlpResultVariable: iResult
      transitionAfterMatch: true
      autoNumberPostbackActions: false
      maxPrompts: 2
      metadata:
        responseItems:
          - type: text
            text: "${rb.rmaRequestDevice}"
            actions:
              - label: "Yes"
                type: postback
                keyword: "a,A,y,Y"
                payload:
                  action: laptopChair
              - label: "No"
                type: postback
                keyword: "b,B,n,N"
                payload:
                  action: peripheral
    transitions:
      next: intent
      actions:
        laptopChair: rmaTypeSystem
        peripheral: rmaTypePeripheral
        match: hiddenAction
        cancel: errorOutput

  rmaTypeSystem:
    component: System.SetVariable
    properties:
      variable: rmaType
      value: "system"
  rmaTypeClassification:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      autoNumberPostbackActions: "false"
      maxPrompts: 2
      metadata:
        responseItems:
          - type: text
            text: "Did you purchase your Razer product within the last 14 days?"
            actions:
              - label: "Yes"
                type: postback
                keyword: "a,A,y,Y"
                payload:
                  action: Within 14 days
              - label: "No"
                type: postback
                keyword: "b,B,n,N"
                payload:
                  action: Beyond 14 days
    transitions:
      next: intent
      actions:
        Within 14 days: setRmaTypeReplace
        Beyond 14 days: setRmaTypeRepair
        match: hiddenAction
        cancel: errorOutput

  rmaTypePeripheral:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: rmaType
      value: "peripheral"
    transitions:
      next: setRmaTypeReplace

  #-------------------------------------------------------------------------------
  # Intent Answers Start ---------------------------------------------------------
  #-------------------------------------------------------------------------------

  caseStatus:
    component: System.SetVariable
    properties:
      variable: chatHoops
      value: true
  caseStatusOutput:
    component: System.Output
    properties:
      text: "${rb.caseStatus}"
      keepTurn: true
    transitions:
      next: quickAnswerCS

  orderStatus:
    component: System.Output
    properties:
      text: "${rb.orderStatus}"
      keepTurn: true
    transitions:
      next: quickAnswerCS

  refundStatus:
    component: System.Output
    properties:
      text: "${rb.refundStatus}"
      keepTurn: true
    transitions:
      next: quickAnswerCS

  requestRefund:
    component: System.Output
    properties:
      text: "${rb.requestRefund}"
      keepTurn: true
    transitions:
      next: quickAnswerCS

  returnPolicyOutput:
    component: System.Output
    properties:
      text: "${rb.returnRefundPolicy}"
      keepTurn: true
    transitions:
      next: quickAnswerCS

  priceMatch:
    component: System.Output
    properties: #todo: should I add a case ticket?
      text: "It looks like you may have found your Razer item(s) at a better price from somewhere else. In order to qualify for a price match, please provide us your original Razer Order Number, the link/screenshot or advertisement to the retailer/e-tailer offering the better price. Once you have this, please submit a ticket to ${rb.customerPortal}."
      keepTurn: true
    transitions:
      next: quickAnswerCS

  audioFaqs:
    component: System.Output
    properties:
      text: "${rb.audioSupport}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  streamingFaqs:
    component: System.Output
    properties:
      text: "${rb.streamingSupport}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  controllerFaqs:
    component: System.Output
    properties:
      text: "${rb.controllerSupport}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  keyboardFaqs:
    component: System.Output
    properties:
      text: "${rb.keyboardSupport}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  matFaqs:
    component: System.Output
    properties:
      text: "${rb.matSupport}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  accessoryFaqs:
    component: System.Output
    properties:
      text: "Please check ${rb.supportSite} for possible answers to your accessory question."
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  networkFaqs:
    component: System.Output
    properties:
      text: "${rb.networkSupport}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  laptopFaqs:
    component: System.Output
    properties:
      text: "${rb.laptopSupport}"
      keepTurn: true
    transitions:
      next: quickAnswerLaptop

  tomahawkFaqs:
    component: System.Output
    properties:
      text: "${rb.tomahawkSupport}"
      keepTurn: true
    transitions:
      next: quickAnswerTS2

  egpuFaqs:
    component: System.Output
    properties:
      text: "${rb.egpuSupport}"
      keepTurn: true
    transitions:
      next: quickAnswerTS2

  monitorFaqs:
    component: System.Output
    properties:
      text: "${rb.monitorSupport}"
      keepTurn: true
    transitions:
      next: quickAnswerTS2

  phoneFaqs:
    component: System.Output
    properties:
      text: "${rb.phoneSupport}"
      keepTurn: true
    transitions:
      next: resolveQuickAnswerPhone

  promoCodeOutput:
    component: System.Output
    properties:
      text: "${rb.promoCode}"
      keepTurn: true
    transitions:
      next: quickAnswerCS

  errorCodeOutput:
    component: System.Output
    properties:
      text: "${rb.errorCode43}"
      keepTurn: true
    transitions:
      next: quickAnswerLaptop

  privacyPolicyOutput:
    component: System.Output
    properties:
      text: "${rb.privacyPolicy}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  razerAccountOutput:
    component: System.Output
    properties:
      text: "${rb.razerAccount}"
      keepTurn: true
    transitions:
      next: quickAnswerCS

  razerCare:
    component: System.Output
    properties:
      text: "${rb.razerCare}"
      keepTurn: true
    transitions:
      next: quickAnswerCS

  legacyProductOutput:
    component: System.Output
    properties:
      text: "${rb.legacyProduct}"
      keepTurn: true
    transitions:
      next: quickAnswerCS

  wristRestOutput:
    component: System.Output
    properties:
      text: "${rb.wristRest}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  borderFeeOutput:
    component: System.Output
    properties:
      text: "${rb.borderFee}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  deviceNotDetected:
    component: System.Output
    properties:
      text: "${rb.deviceNotDetected}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  krakenKittyOutput:
    component: System.Output
    properties:
      text: "${rb.krakenKitty}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  fanNoiseOutput:
    component: System.Output
    properties:
      text: "${rb.fanNoise}"
      keepTurn: true
    transitions:
      next: quickAnswerLaptop

  serialNumberOutput:
    component: System.Output
    properties:
      text: "${rb.serialNumber}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  chargingDockOutput:
    component: System.Output
    properties:
      text: "${rb.chargingDock}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  receiveDeliveryOutput:
    component: System.Output
    properties:
      text: "${rb.receiveDelivery}"
      keepTurn: true
    transitions:
      next: quickAnswerCS

  browserCookiesOutput:
    component: System.Output
    properties:
      text: "${rb.browserCookies}"
      keepTurn: true
    transitions:
      next: quickAnswerCS

  authorizedSellerOutput:
    component: System.Output
    properties:
      text: "${rb.authorizedSeller}"
      keepTurn: true
    transitions:
      next: quickAnswerCS

  purchaseProofOutput:
    component: System.Output
    properties:
      text: "${rb.purchaseProof}"
      keepTurn: true
    transitions:
      next: quickAnswerCS

  paypalCreditOutput:
    component: System.Output
    properties:
      text: "${rb.paypalCredit}"
      keepTurn: true
    transitions:
      next: quickAnswerCS

  thxSpatialOutput:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      nlpResultVariable: iResult
      transitionAfterMatch: true
      autoNumberPostbackActions: "false"
      maxPrompts: 2
      metadata:
        responseItems:
          - type: text
            text: "Which THX Spatial Audio product are you using?"
            actions:
              - label: "THX Spatial Audio for Headphones"
                type: "postback"
                keyword: "a,A"
                payload:
                  action: "thxHeadphones"
              - label: "THX Spatial Audio for PCs"
                type: "postback"
                keyword: "b,B"
                payload:
                  action: "thxPC"
              - label: "THX Spatial Audio application"
                type: "postback"
                keyword: "c,C"
                payload:
                  action: "thxApplication"
    transitions:
      next: "intent"
      actions:
        thxHeadphones: "thxSpatialAudioForHeadphonesOutput"
        thxPC: "thxSpatialAudioForPCOutput"
        thxApplication: "thxSpatialAudioApplicationOutput"
        match: "hiddenAction"

  thxSpatialAudioForHeadphonesOutput:
    component: System.Output
    properties:
      text: "${rb.thxSpatialAudioForHeadphones}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  thxSpatialAudioForPCOutput:
    component: System.Output
    properties:
      text: "${rb.thxSpatialAudioForPC}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  thxSpatialAudioApplicationOutput:
    component: System.Output
    properties:
      text: "${rb.thxSpatialAudioApplication}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  dongleOutput:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      nlpResultVariable: iResult
      transitionAfterMatch: true
      autoNumberPostbackActions: "false"
      maxPrompts: 2
      metadata:
        responseItems:
          - type: text
            text: "What do you need help with?"
            actions:
              - label: "Help with pairing/connecting a mouse to a system via USB dongle"
                type: "postback"
                keyword: "a,A"
                payload:
                  action: "pairingMouseViaDongle"
              # - label: "Connection issue via dongle with a Basilisk V3 Pro or Viper V2 Pro mouse"
              #   type: "postback"
              #   keyword: "b,B"
              #   payload:
              #     action: "system.textReceived"
              #     variables:
              #       system.text: "BSLSKVPR"
              - label: "Replace or buy a Razer Nari dongle"
                type: "postback"
                keyword: "c,C"
                payload:
                  action: "replaceBuyDongle"
              - label: "Help using the Dongle Recovery Tool for a Razer Nari headset"
                type: "postback"
                keyword: "d,D"
                payload:
                  action: "dongleRecoveryTool"
              - label: "Help with connecting/pairing a Razer Nari headset"
                type: "postback"
                keyword: "e,E"
                payload:
                  action: "pairingNariHeadset"
    transitions:
      next: "intent"
      actions:
        pairingMouseViaDongle: "pairingMouseViaDongleOutput"
        replaceBuyDongle: "replaceBuyDongleOutput"
        dongleRecoveryTool: "dongleRecoveryToolOutput"
        pairingNariHeadset: "pairingNariHeadsetOutput"
        match: "hiddenAction"

  pairingMouseViaDongleOutput:
    component: System.Output
    properties:
      text: "${rb.pairingMouseViaDongle}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  replaceBuyDongleOutput:
    component: System.Output
    properties:
      text: "${rb.replaceBuyDongle}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  dongleRecoveryToolOutput:
    component: System.Output
    properties:
      text: "${rb.dongleRecoveryTool}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  pairingNariHeadsetOutput:
    component: System.Output
    properties:
      text: "${rb.pairingNariHeadset}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  pwmRpm:
    component: System.Output
    properties:
      text: "${rb.pwmRpm}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  echoSoundOutput:
    component: System.Output
    properties:
      text: "${rb.echoSound}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  countryAvailabilityOutput:
    component: System.Output
    properties:
      text: "${rb.countryAvailability}"
      keepTurn: true
    transitions:
      next: quickAnswerCS

  bluetoothDeviceOutput:
    component: System.Output
    properties:
      text: "${rb.bluetoothDevice}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  paymentMethodsOutput:
    component: System.Output
    properties:
      text: "${rb.paymentMethods}"
      keepTurn: true
    transitions:
      next: quickAnswerCS

  warrantyCoverageOutput:
    component: System.Output
    properties:
      text: "${rb.warrantyCoverage}"
      keepTurn: true
    transitions:
      next: quickAnswerCS

  salesTaxOutput:
    component: System.Output
    properties:
      text: "${rb.salesTax}"
      keepTurn: true
    transitions:
      next: quickAnswerCS

  cardChargedOutput:
    component: System.Output
    properties:
      text: "${rb.cardCharged}"
      keepTurn: true
    transitions:
      next: quickAnswerCS

  customsFees:
    component: System.Output
    properties:
      text: "${rb.customsFees}"
      keepTurn: true
    transitions:
      next: quickAnswerCS

  windowsHelloOutput:
    component: System.Output
    properties:
      text: "${rb.windowsHello}"
      keepTurn: true
    transitions:
      next: quickAnswerLaptop

  shippingAddressOutput:
    component: System.Output
    properties:
      text: "${rb.shippingAddress}"
      keepTurn: true
    transitions:
      next: quickAnswerCS

  debitRejectedOutput:
    component: System.Output
    properties:
      text: "${rb.debitRejected}"
      keepTurn: true
    transitions:
      next: quickAnswerCS

  chargingIssueOutput:
    component: System.Output
    properties:
      text: "${rb.chargingIssue}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  laptopOverheatingOutput:
    component: System.Output
    properties:
      text: "${rb.laptopOverheating}"
      keepTurn: true
    transitions:
      next: quickAnswerLaptop

  militaryDiscountOutput:
    component: System.Output
    properties:
      text: "${rb.militaryDiscount}"
      keepTurn: true
    transitions:
      next: quickAnswerCS

  razerGoldOutput:
    component: System.Output
    properties:
      text: "${rb.razerGold}"
      keepTurn: true
    transitions:
      next: quickAnswerCS

  userManualOutput:
    component: System.Output
    properties:
      text: "${rb.userManual}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  hammerheadTWSOutput:
    component: System.Output
    properties:
      text: "${rb.hammerheadTrueWireless}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  changeDeliveryAddress:
    component: System.Output
    properties:
      text: "${rb.changeDeliveryAddress}"
      keepTurn: true
    transitions:
      next: quickAnswerCS

  financingOutput:
    component: System.Output
    properties:
      text: "${rb.financingOptions}"
      keepTurn: true
    transitions:
      next: quickAnswerCS

  availabilityOutput:
    component: System.Output
    properties:
      text: "${rb.itemAvailability}"
      keepTurn: true
    transitions:
      next: quickAnswerCS

  cancelledOutput:
    component: System.Output
    properties:
      text: "${rb.paymentIssue}"
      keepTurn: true
    transitions:
      next: quickAnswerCS

  customsOutput:
    component: System.Output
    properties:
      text: "${rb.orderCustoms}"
      keepTurn: true
    transitions:
      next: quickAnswerCS

  cancelOrder:
    component: System.Output
    properties:
      text: "${rb.cancelOrder}"
      keepTurn: true
    transitions:
      next: quickAnswerCS

  menuGetAccessory:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: selectedOption
      value: "GetAccessory"
  getAccessoryOutput:
    component: System.Output
    properties:
      text: "${rb.getAccessory}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  rmaChangeAddress:
    component: System.Output
    properties:
      text: "${rb.rmaChangeAddress}"
      keepTurn: true
    transitions:
      next: quickAnswerCS

  rmaSla:
    component: System.Output
    properties:
      text: "${rb.rmaSla}"
      keepTurn: true
    transitions:
      next: quickAnswerCS

  orderNotFound:
    component: System.Output
    properties:
      text: "${rb.orderNotFound}"
      keepTurn: true
    transitions:
      next: quickAnswerCS

  orderRefund:
    component: System.Output
    properties:
      text: "${rb.orderRefund}"
      keepTurn: true
    transitions:
      next: quickAnswerCS

  dirtyMouse:
    component: System.Output
    properties:
      text: "${rb.dirtyMouse}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  headsetAudioIssue:
    component: System.Output
    properties:
      text: "${rb.headsetAudioIssue}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  krakenAudioIssue:
    component: System.Output
    properties:
      text: "${rb.krakenAudioIssue}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  menuRegistrationFailed:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: selectedOption
      value: "RegistrationFailed"
  registrationFailed:
    component: System.Output
    properties:
      text: "${rb.registrationFailed}"
      keepTurn: true
  setCaseCategoryRegistrationFailed:
    component: "System.SetVariable"
    properties:
      insightsInclude: false
      variable: caseCategory
      value: "others"
    transitions:
      next: quickAnswerCS

  keypressIssue:
    component: System.Output
    properties:
      text: "${rb.keypressIssue}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  keyboardDifferentColor:
    component: System.Output
    properties:
      text: "${rb.keyboardDifferentColor}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  thumbpadIssue:
    component: System.Output
    properties:
      text: "${rb.thumbpadIssue}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  lowFps:
    component: System.Output
    properties:
      text: "${rb.lowFps}"
      keepTurn: true
    transitions:
      next: quickAnswerLaptop

  powerAdapterIssue:
    component: System.Output
    properties:
      text: "${rb.powerAdapterIssue}"
      keepTurn: true
    transitions:
      next: quickAnswerLaptop

  synapseCrashed:
    component: System.Output
    properties:
      text: "${rb.synapseCrashed}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  keyboardSpamming:
    component: System.Output
    properties:
      text: "${rb.keyboardSpamming}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  micSetDefault:
    component: System.Output
    properties:
      text: "${rb.micSetDefault}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  headsetCracklingNoise:
    component: System.Output
    properties:
      text: "${rb.headsetCracklingNoise}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  synapseDialKey:
    component: System.Output
    properties:
      text: "${rb.synapseDialKey}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  keyboardNotDetected:
    component: System.Output
    properties:
      text: "${rb.keyboardNotDetected}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  bladeDead:
    component: System.Output
    properties:
      text: "${rb.bladeDead}"
      keepTurn: true
    transitions:
      next: quickAnswerLaptop

  bladeDeadPixel:
    component: System.Output
    properties:
      text: "${rb.bladeDeadPixel}"
      keepTurn: true
    transitions:
      next: quickAnswerLaptop

  bladeWifiIssue:
    component: System.Output
    properties:
      text: "${rb.bladeWifiIssue}"
      keepTurn: true
    transitions:
      next: quickAnswerLaptop

  mouseNotCharging:
    component: System.Output
    properties:
      text: "${rb.mouseNotCharging}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  errorBsod:
    component: System.Output
    properties:
      text: "${rb.errorBsod}"
      keepTurn: true
    transitions:
      next: quickAnswerLaptop

  anzuFAQ:
    component: System.Output
    properties:
      text: "${rb.anzuFAQ}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  anzuPairing:
    component: System.Output
    properties:
      text: "${rb.anzuPairing}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  anzuAudio:
    component: System.Output
    properties:
      text: "${rb.anzuAudio}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  synapseLightSettings:
    component: System.Output
    properties:
      text: "${rb.synapseLightSettings}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  bladeScreenTurnsBlack:
    component: System.Output
    properties:
      text: "${rb.bladeScreenTurnsBlack}"
      keepTurn: true
    transitions:
      next: quickAnswerLaptop

  bladeScreenFlickering:
    component: System.Output
    properties:
      text: "${rb.bladeScreenFlickering}"
      keepTurn: true
    transitions:
      next: quickAnswerLaptop

  mouseSpamming:
    component: System.Output
    properties:
      text: "${rb.mouseSpamming}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  nariFAQ:
    component: System.Output
    properties:
      text: "${rb.nariFAQ}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  brokenDevice:
    component: System.Output
    properties:
      text: "${rb.brokenDevice}"
      keepTurn: true
    transitions:
      next: quickAnswerCS

  opusPairing:
    component: System.Output
    properties:
      text: "${rb.opusPairing}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  bladeRefreshRate:
    component: System.Output
    properties:
      text: "${rb.bladeRefreshRate}"
      keepTurn: true
    transitions:
      next: quickAnswerLaptop

  bladeLowStorage:
    component: System.Output
    properties:
      text: "${rb.bladeLowStorage}"
      keepTurn: true
    transitions:
      next: quickAnswerLaptop

  sensitiveMic:
    component: System.Output
    properties:
      text: "${rb.sensitiveMic}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  mouseProfile:
    component: System.Output
    properties:
      text: "${rb.mouseProfile}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  tomahawkFirmware:
    component: System.Output
    properties:
      text: "${rb.tomahawkFirmware}"
      keepTurn: true
    transitions:
      next: quickAnswerTS2

  nariPairing:
    component: System.Output
    properties:
      text: "${rb.nariPairing}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  brokenReplacement:
    component: System.Output
    properties:
      text: "${rb.brokenReplacement}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  downloadFirmware:
    component: System.Output
    properties:
      text: "${rb.downloadFirmware}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  chairRMA:
    component: System.SetVariable
    properties:
      variable: user.chatType
      value: "TSChair"
  chairRMAOutput:
    component: System.Output
    properties:
      text: "${rb.chairRMA}"
      keepTurn: true
  resolveChairRMAIssue:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      autoNumberPostbackActions: "false"
      maxPrompts: 2
      metadata:
        responseItems:
          - type: text
            text: "Did I answer your question?"
            actions:
              - label: "Yes"
                type: postback
                keyword: "a,A,y,Y"
                payload:
                  action: "Yes"
              - label: "No"
                type: postback
                keyword: "b,B,n,N"
                payload:
                  action: "No"
              - label: "No - Connect to an agent"
                type: postback
                keyword: "c,C,agent"
                payload:
                  action: "agent"
    transitions:
      next: intent
      actions:
        Yes: queryResolved
        No: checkTryCount
        agent: startChat
        match: hiddenAction
        cancel: errorOutput

  anzuBTIssue:
    component: System.Output
    properties:
      text: "${rb.anzuBTIssue}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  seirenSupport:
    component: System.Output
    properties:
      text: "${rb.seirenSupport}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  kiyoProFirmware:
    component: System.SetVariable
    properties:
      variable: user.chatType
      value: "TS1"
  kiyoProFirmwareOutput:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      autoNumberPostbackActions: "false"
      maxPrompts: 2
      metadata:
        responseItems:
          - type: text
            text: "${rb.kiyoProFirmware}"
            actions:
              - label: Submit a Support Ticket
                type: postback
                keyword: "a,A,cp,ticket"
                payload:
                  action: ticket
              - label: Connect to agent
                type: postback
                keyword: "b,B,agent"
                payload:
                  action: agent
              - label: Ask another question
                type: postback
                keyword: "c,C,startover,reset,restart"
                payload:
                  action: question
    transitions:
      next: intent
      actions:
        ticket: initiateCaseCreation
        agent: startChat
        question: checkTryCount
        match: hiddenAction
        cancel: errorOutput

  cleanDevice:
    component: System.Output
    properties:
      text: "${rb.cleanDevice}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  createMacro:
    component: System.Output
    properties:
      text: "${rb.createMacro}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  bladeLighting:
    component: System.Output
    properties:
      text: "${rb.bladeLighting}"
      keepTurn: true
    transitions:
      next: quickAnswerLaptop

  leviathanSupport:
    component: System.Output
    properties:
      text: "${rb.leviathanSupport}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  kairaSupport:
    component: System.Output
    properties:
      text: "${rb.kairaSupport}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  displayMenu:
    component: System.Output
    properties:
      text: "${rb.displayMenu}"
      keepTurn: true
    transitions:
      next: quickAnswerTS2

  blade14Activation:
    component: System.Output
    properties:
      text: "${rb.blade14Activation}"
      keepTurn: true
    transitions:
      next: quickAnswerLaptop

  unregisterDevice:
    component: System.Output
    properties:
      text: "${rb.unregisterDevice}"
      keepTurn: true
    transitions:
      next: quickAnswerCS

  keycapFit:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      autoNumberPostbackActions: "false"
      maxPrompts: 2
      metadata:
        responseItems:
          - type: text
            text: "${rb.keycapFit}"
            actions:
              - label: "Razer PBT Keycap"
                type: postback
                keyword: "a,A,pbt,PBT,Pbt,Razer PBT Keycap,Razer PBT,PBT Keycap"
                payload:
                  action: "pbt"
              - label: "Razer Phantom Keycap"
                type: postback
                keyword: "b,B,phantom,Phantom,Razer Phantom Keycap,Razer Phantom,Phantom Keycap"
                payload:
                  action: "phantom"
    transitions:
      next: intent
      actions:
        pbt: keyCapFitPBT
        phantom: keyCapFitPhantom
        match: hiddenAction
        cancel: errorOutput

  keyCapFitPBT:
    component: System.Output
    properties:
      text: "${rb.keycapFitPBT}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  keyCapFitPhantom:
    component: System.Output
    properties:
      text: "${rb.keycapFitPhantom}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  coreSetup:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      autoNumberPostbackActions: "false"
      maxPrompts: 2
      metadata:
        responseItems:
          - type: text
            text: "${rb.coreSelection}"
            actions:
              - label: "Razer Core"
                type: postback
                keyword: "a,A,razer core,core"
                payload:
                  action: "core"
              - label: "Razer Core V2"
                type: postback
                keyword: "a,A,razer core v2,core v2"
                payload:
                  action: "coreV2"
              - label: "Razer Core X"
                type: postback
                keyword: "a,A,razer core x,core x"
                payload:
                  action: "coreX"
              - label: "Razer Core X Chroma"
                type: postback
                keyword: "b,B,razer core x chroma,core x chroma"
                payload:
                  action: "coreXChroma"
    transitions:
      next: intent
      actions:
        core: coreSetupOriginal
        coreV2: coreV2Setup
        coreX: coreXSetup
        coreXChroma: coreXChromaSetup
        match: hiddenAction
        cancel: errorOutput

  coreSetupOriginal:
    component: System.Output
    properties:
      text: "${rb.coreSetup}"
      keepTurn: true
    transitions:
      next: quickAnswerTS2

  coreV2Setup:
    component: System.Output
    properties:
      text: "${rb.coreV2Setup}"
      keepTurn: true
    transitions:
      next: quickAnswerTS2

  coreXSetup:
    component: System.Output
    properties:
      text: "${rb.coreXSetup}"
      keepTurn: true
    transitions:
      next: quickAnswerTS2

  coreXChromaSetup:
    component: System.Output
    properties:
      text: "${rb.coreXChromaSetup}"
      keepTurn: true
    transitions:
      next: quickAnswerTS2

  vesaInstallation:
    component: System.Output
    properties:
      text: "${rb.vesaInstallation}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  disassembleIskur:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      autoNumberPostbackActions: "false"
      maxPrompts: 2
      metadata:
        responseItems:
          - type: text
            text: "${rb.disassembleIskur}"
            actions:
              - label: "Razer Iskur"
                type: postback
                keyword: "a,A,razer iskur,iskur"
                payload:
                  action: "iskur"
              - label: "Razer Iskur X"
                type: postback
                keyword: "b,B,razer iskur x,iskur x"
                payload:
                  action: "iskurX"
    transitions:
      next: intent
      actions:
        iskur: disassembleRazerIskur
        iskurX: disassembleRazerIskurX
        match: hiddenAction
        cancel: errorOutput

  disassembleRazerIskur:
    component: System.Output
    properties:
      text: "${rb.disassembleRazerIskur}"
      keepTurn: true
    transitions:
      next: quickAnswerTSChair

  disassembleRazerIskurX:
    component: System.Output
    properties:
      text: "${rb.disassembleRazerIskurX}"
      keepTurn: true
    transitions:
      next: quickAnswerTSChair

  upgradeMemory:
    component: System.Output
    properties:
      text: "${rb.upgradeMemory}"
      keepTurn: true
    transitions:
      next: quickAnswerLaptop

  upgradeStorage:
    component: System.Output
    properties:
      text: "${rb.upgradeStorage}"
      keepTurn: true
    transitions:
      next: quickAnswerLaptop

  hypershiftMouse:
    component: System.Output
    properties:
      text: "${rb.hypershiftMouse}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  windows11Install:
    component: System.Output
    properties:
      text: "${rb.windows11Install}"
      keepTurn: true
    transitions:
      next: quickAnswerLaptop

  windows11Difference:
    component: System.Output
    properties:
      text: "${rb.windows11Difference}"
      keepTurn: true
    transitions:
      next: quickAnswerLaptop

  windows11Accessories:
    component: System.Output
    properties:
      text: "${rb.windows11Accessories}"
      keepTurn: true
    transitions:
      next: quickAnswerLaptop

  windows11Upgrade:
    component: System.Output
    properties:
      text: "${rb.windows11Upgrade}"
      keepTurn: true
    transitions:
      next: quickAnswerLaptop

  windows11Requirements:
    component: System.Output
    properties:
      text: "${rb.windows11Requirements}"
      keepTurn: true
    transitions:
      next: quickAnswerLaptop

  synapseMac:
    component: System.Output
    properties:
      text: "${rb.synapseMac}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  synapseInstall:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      translate: false
      metadata:
        responseItems:
          - type: text
            text: "${rb.synapseInstall}"
            actions:
              - label: Synapse 3
                type: postback
                keyword: "a,A"
                payload:
                  action: Synapse3
              - label: Synapse 2.0
                type: postback
                keyword: "b,B"
                payload:
                  action: Synapse2
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      autoNumberPostbackActions: "false"
      maxPrompts: 2
    transitions:
      next: intent
      actions:
        Synapse2: synapse2Install
        Synapse3: synapse3Install
        match: hiddenAction
        cancel: errorOutput

  synapse2Install:
    component: System.Output
    properties:
      text: "${rb.synapse2Install}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  synapse3Install:
    component: System.Output
    properties:
      text: "${rb.synapse3Install}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  assignMacro:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      translate: false
      metadata:
        responseItems:
          - type: text
            text: "${rb.assignMacro}"
            actions:
              - label: Mouse
                type: postback
                keyword: "a,A,mouse"
                payload:
                  action: mouse
              - label: Keyboard
                type: postback
                keyword: "b,B,keyboard"
                payload:
                  action: keyboard
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      autoNumberPostbackActions: "false"
      maxPrompts: 2
    transitions:
      next: intent
      actions:
        mouse: assignMacroMouse
        keyboard: assignMacroKeyboard
        match: hiddenAction
        cancel: errorOutput

  assignMacroMouse:
    component: System.Output
    properties:
      text: "${rb.assignMacroMouse}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  assignMacroKeyboard:
    component: System.Output
    properties:
      text: "${rb.assignMacroKeyboard}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  synapseReinstall:
    component: System.Output
    properties:
      text: "${rb.synapseReinstall}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  customizeChroma:
    component: System.Output
    properties:
      text: "${rb.customizeChroma}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  replaceKeycap:
    component: System.Output
    properties:
      text: "${rb.replaceKeycap}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  bladeNotWakingUp:
    component: System.Output
    properties:
      text: "${rb.bladeNotWakingUp}"
      keepTurn: true
    transitions:
      next: quickAnswerLaptop

  keyBinding:
    component: System.Output
    properties:
      text: "${rb.keyBinding}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  thunderboltDockSupport:
    component: System.Output
    properties:
      text: "${rb.thunderboltDockSupport}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  asciiSymbols:
    component: System.Output
    properties:
      text: "${rb.asciiSymbols}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  bladeTrackpad:
    component: System.Output
    properties:
      text: "${rb.bladeTrackpad}"
      keepTurn: true
    transitions:
      next: quickAnswerLaptop

  chromaLightStrip:
    component: System.Output
    properties:
      text: "${rb.chromaLightStrip}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  ripsawSetup:
    component: System.Output
    properties:
      text: "${rb.ripsawSetup}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  gamingMode:
    component: System.Output
    properties:
      text: "${rb.gamingMode}"
      keepTurn: true
    transitions:
      next: quickAnswerLaptop

  keyboardDemoMode:
    component: System.Output
    properties:
      text: "${rb.keyboardDemoMode}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  iskurAdjustLever:
    component: System.Output
    properties:
      text: "${rb.iskurAdjustLever}"
      keepTurn: true
    transitions:
      next: quickAnswerTSChair

  bladeSystemRecovery:
    component: System.Output
    properties:
      text: "${rb.bladeSystemRecovery}"
      keepTurn: true
    transitions:
      next: quickAnswerLaptop

  bladeMaxStorageMemory:
    component: System.Output
    properties:
      text: "${rb.bladeMaxStorageMemory}"
      keepTurn: true
    transitions:
      next: quickAnswerLaptop

  pwmOverheating:
    component: System.Output
    properties:
      text: "${rb.pwmOverheating}"
      keepTurn: true
    transitions:
      next: quickAnswerTS2

  pwmNotSpinning:
    component: System.Output
    properties:
      text: "${rb.pwmNotSpinning}"
      keepTurn: true
    transitions:
      next: quickAnswerTS2

  chairSupport:
    component: System.Output
    properties:
      text: "${rb.chairSupport}"
      keepTurn: true
    transitions:
      next: quickAnswerTSChair

  pwmSetup:
    component: System.Output
    properties:
      text: "${rb.pwmSetup}"
      keepTurn: true
    transitions:
      next: quickAnswerTS2

  kunaiSetup:
    component: System.Output
    properties:
      text: "${rb.kunaiSetup}"
      keepTurn: true
    transitions:
      next: quickAnswerTS2

  createSynapseAccount:
    component: System.Output
    properties:
      text: "${rb.createSynapseAccount}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  productRegistration:
    component: System.Output
    properties:
      text: "${rb.productRegistration}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  headsetEarCushions:
    component: System.Output
    properties:
      text: "${rb.headsetEarCushions}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  tomahawkStorage:
    component: System.Output
    properties:
      text: "${rb.tomahawkStorage}"
      keepTurn: true
    transitions:
      next: quickAnswerTS2

  chromaLighting:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      translate: false
      metadata:
        responseItems:
          - type: text
            text: "${rb.chromaLighting}"
            actions:
              - label: "Add Chroma Lighting"
                type: postback
                keyword: "a,A,add"
                payload:
                  action: add
              - label: "Remove Chroma Lighting"
                type: postback
                keyword: "b,B,remove"
                payload:
                  action: remove
              - label: "Customize Chroma Lighting"
                type: postback
                keyword: "b,B,remove"
                payload:
                  action: customize
              - label: "Other"
                type: postback
                keyword: "b,B,remove"
                payload:
                  action: other
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      autoNumberPostbackActions: "false"
      maxPrompts: 2
    transitions:
      next: intent
      actions:
        add: chromaLightingAdd
        remove: chromaLightingRemove
        customize: chromaLightingCustomize
        other: chromaLightingOther
        match: hiddenAction
        cancel: errorOutput

  chromaLightingAdd:
    component: System.Output
    properties:
      text: "${rb.chromaLightingAdd}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  chromaLightingRemove:
    component: System.Output
    properties:
      text: "${rb.chromaLightingRemove}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  chromaLightingCustomize:
    component: System.Output
    properties:
      text: "${rb.chromaLightingCustomize}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  chromaLightingOther:
    component: System.Output
    properties:
      text: "${rb.chromaLightingOther}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  obsMixAudio:
    component: System.Output
    properties:
      text: "${rb.obsMixAudio}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  chargingStandXbox:
    component: System.Output
    properties:
      text: "${rb.chargingStandXbox}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  chairCasterStuds:
    component: System.Output
    properties:
      text: "${rb.chairCasterStuds}"
      keepTurn: true
    transitions:
      next: quickAnswerTSChair

  batteryLife:
    component: System.Output
    properties:
      text: "${rb.batteryLife}"
      keepTurn: true
    transitions:
      next: quickAnswerLaptop

  bladeCrashing:
    component: System.Output
    properties:
      text: "${rb.bladeCrashing}"
      keepTurn: true
    transitions:
      next: quickAnswerLaptop

  bladeSkinInstall:
    component: System.Output
    properties:
      text: "${rb.bladeSkinInstall}"
      keepTurn: true
    transitions:
      next: quickAnswerLaptop

  bladeSkinRemoval:
    component: System.Output
    properties:
      text: "${rb.bladeSkinRemoval}"
      keepTurn: true
    transitions:
      next: quickAnswerLaptop

  phoneCoolerSetup:
    component: System.Output
    properties:
      text: "${rb.phoneCoolerSetup}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  phoneCoolerPairing:
    component: System.Output
    properties:
      text: "${rb.phoneCoolerPairing}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  phoneCoolerSettings:
    component: System.Output
    properties:
      text: "${rb.phoneCoolerSettings}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  lightBleed:
    component: System.Output
    properties:
      text: "${rb.lightBleed}"
      keepTurn: true
    transitions:
      next: quickAnswerLaptop

  screenBrightness:
    component: System.Output
    properties:
      text: "${rb.screenBrightness}"
      keepTurn: true
    transitions:
      next: quickAnswerLaptop

  dedicatedGpu:
    component: System.Output
    properties:
      text: "${rb.dedicatedGpu}"
      keepTurn: true
    transitions:
      next: quickAnswerLaptop

  nvidiaAdvancedOptimus:
    component: System.Output
    properties:
      text: "${rb.nvidiaAdvancedOptimus}"
      keepTurn: true
    transitions:
      next: quickAnswerLaptop

  dgpuBlankScreen:
    component: System.Output
    properties:
      text: "${rb.dgpuBlankScreen}"
      keepTurn: true
    transitions:
      next: quickAnswerLaptop

  maximizeGpu:
    component: System.Output
    properties:
      text: "${rb.maximizeGpu}"
      keepTurn: true
    transitions:
      next: quickAnswerLaptop

  monitorUsbSpecs:
    component: System.Output
    properties:
      text: "${rb.monitorUsbSpecs}"
      keepTurn: true
    transitions:
      next: quickAnswerTS2

  usbPort:
    component: System.Output
    properties:
      text: "${rb.usbPort}"
      keepTurn: true
    transitions:
      next: quickAnswerLaptop

  bladeThirdPartyCharge:
    component: System.Output
    properties:
      text: "${rb.bladeThirdPartyCharge}"
      keepTurn: true
    transitions:
      next: quickAnswerLaptop

  ethernetCable:
    component: System.Output
    properties:
      text: "${rb.ethernetCable}"
      keepTurn: true
    transitions:
      next: quickAnswerLaptop

  accessBios:
    component: System.Output
    properties:
      text: "${rb.accessBios}"
      keepTurn: true
    transitions:
      next: quickAnswerLaptop

  biosBoot:
    component: System.Output
    properties:
      text: "${rb.biosBoot}"
      keepTurn: true
    transitions:
      next: quickAnswerLaptop

  wobblingBlade:
    component: System.Output
    properties:
      text: "${rb.wobblingBlade}"
      keepTurn: true
    transitions:
      next: quickAnswerLaptop

  thxActivationCode:
    component: System.Output
    properties:
      text: "${rb.thxActivationCode}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  headsetNotDetected:
    component: System.Output
    properties:
      text: "${rb.headsetNotDetected}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  wolverineDeadzone:
    component: System.Output
    properties:
      text: "${rb.wolverineDeadzone}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  bladeMonitor:
    component: System.Output
    properties:
      text: "${rb.bladeMonitor}"
      keepTurn: true
    transitions:
      next: quickAnswerLaptop

  bladeHdmi:
    component: System.Output
    properties:
      text: "${rb.bladeHdmi}"
      keepTurn: true
    transitions:
      next: quickAnswerLaptop

  watchWristbandSupport:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      translate: false
      metadata:
        responseItems:
          - type: text
            text: "${rb.watchWristbandSupport}"
            actions:
              - label: Razer x Fossil Smartwatch
                type: postback
                keyword: "a,A,razer x fossil smartwatch,fossil"
                payload:
                  action: fossil
              - label: Razer Nabu Watch
                type: postback
                keyword: "b,B,razer nabu watch,nabu watch"
                payload:
                  action: nabuWatch
              - label: Razer Nabu 2015
                type: postback
                keyword: "b,B,razer nabu 2015,nabu 2015"
                payload:
                  action: nabu2015
              - label: Razer Nabu X
                type: postback
                keyword: "b,B,razer nabu x,nabu x"
                payload:
                  action: nabuX
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      autoNumberPostbackActions: "false"
      maxPrompts: 2
    transitions:
      next: intent
      actions:
        fossil: fossilSupport
        nabuWatch: nabuWatchSupport
        nabu2015: nabu2015Support
        nabuX: nabuXSupport
        match: hiddenAction
        cancel: errorOutput

  fossilSupport:
    component: System.Output
    properties:
      text: "${rb.fossilSupport}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  nabuWatchSupport:
    component: System.Output
    properties:
      text: "${rb.nabuWatchSupport}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  nabu2015Support:
    component: System.Output
    properties:
      text: "${rb.nabu2015Support}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  nabuXSupport:
    component: System.Output
    properties:
      text: "${rb.nabuXSupport}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  pairingUtility:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      translate: false
      metadata:
        responseItems:
          - type: text
            text: "${rb.pairingUtility}"
            actions:
              - label: Headset
                type: postback
                keyword: "a,A,headset"
                payload:
                  action: headset
              - label: Mouse
                type: postback
                keyword: "b,B,mouse"
                payload:
                  action: mouse
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      autoNumberPostbackActions: "false"
      maxPrompts: 2
    transitions:
      next: intent
      actions:
        headset: pairingUtilityHeadset
        mouse: pairingUtilityMouse
        match: hiddenAction
        cancel: errorOutput

  pairingUtilityHeadset:
    component: System.Output
    properties:
      text: "${rb.pairingUtilityHeadset}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  pairingUtilityMouse:
    component: System.Output
    properties:
      text: "${rb.pairingUtilityMouse}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  enkiProFunctions:
    component: System.Output
    properties:
      text: "${rb.enkiProFunctions}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  barracudaUsbCPair:
    component: System.Output
    properties:
      text: "${rb.barracudaUsbCPair}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  installHanbo:
    component: System.Output
    properties:
      text: "${rb.installHanbo}"
      keepTurn: true
    transitions:
      next: quickAnswerTS2

  rgbHanbo:
    component: System.Output
    properties:
      text: "${rb.rgbHanbo}"
      keepTurn: true
    transitions:
      next: quickAnswerTS2

  overheatingHanbo:
    component: System.Output
    properties:
      text: "${rb.overheatingHanbo}"
      keepTurn: true
    transitions:
      next: quickAnswerTS2

  intermittentHanbo:
    component: System.Output
    properties:
      text: "${rb.intermittentHanbo}"
      keepTurn: true
    transitions:
      next: quickAnswerTS2

  leakingHanbo:
    component: System.Output
    properties:
      text: "${rb.leakingHanbo}"
      keepTurn: true
    transitions:
      next: quickAnswerTS2

  noisyHanbo:
    component: System.Output
    properties:
      text: "${rb.noisyHanbo}"
      keepTurn: true
    transitions:
      next: quickAnswerTS2

  looseHanbo:
    component: System.Output
    properties:
      text: "${rb.looseHanbo}"
      keepTurn: true
    transitions:
      next: quickAnswerTS2

  readingsHanbo:
    component: System.Output
    properties:
      text: "${rb.readingsHanbo}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  headCushionChromaPairing:
    component: System.Output
    properties:
      text: "${rb.headCushionChromaPairing}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  headCushionChromaLighting:
    component: System.Output
    properties:
      text: "${rb.headCushionChromaLighting}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  recycleDevice:
    component: System.Output
    properties:
      text: "${rb.recycleDevice}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  bladeGsync:
    component: System.Output
    properties:
      text: "${rb.bladeGsync}"
      keepTurn: true
    transitions:
      next: quickAnswerLaptop

  audioMixerSetup:
    component: System.Output
    properties:
      text: "${rb.audioMixerSetup}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  audioMixerUse:
    component: System.Output
    properties:
      text: "${rb.audioMixerUse}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  audioMixerSettings:
    component: System.Output
    properties:
      text: "${rb.audioMixerSettings}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  keyLightSetup:
    component: System.Output
    properties:
      text: "${rb.keyLightSetup}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  keyLightCustomization:
    component: System.Output
    properties:
      text: "${rb.keyLightCustomization}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  bladeOvercharge:
    component: System.Output
    properties:
      text: "${rb.bladeOvercharge}"
      keepTurn: true
    transitions:
      next: quickAnswerLaptop

  ssdScrewSize:
    component: System.Output
    properties:
      text: "${rb.ssdScrewSize}"
      keepTurn: true
    transitions:
      next: quickAnswerLaptop

  lowerWattageBlade:
    component: System.Output
    properties:
      text: "${rb.lowerWattageBlade}"
      keepTurn: true
    transitions:
      next: quickAnswerLaptop

  modernStandby:
    component: System.Output
    properties:
      text: "${rb.modernStandby}"
      keepTurn: true
    transitions:
      next: quickAnswerLaptop

  deviceEncryption:
    component: System.Output
    properties:
      text: "${rb.deviceEncryption}"
      keepTurn: true
    transitions:
      next: quickAnswerLaptop

  streamControllerSupport:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      autoNumberPostbackActions: "false"
      maxPrompts: 2
      metadata:
        responseItems:
          - type: text
            text: "${rb.streamControllerSupport}"
            actions:
              - label: "Setup Razer Stream Controller"
                type: postback
                keyword: "a,A,setup razer stream controller,setup"
                payload:
                  action: "setup"
              - label: "Change the color of the round buttons"
                type: url
                keyword: "b,B,change the color of the round buttons,change the color,round buttons"
                payload:
                  url: "https://mysupport.razer.com/app/answers/detail/a_id/6164/?utm_source=chatbot_support&utm_medium=chat&utm_campaign=rzchatbot"
              - label: "Razer Stream Controller is not responding"
                type: url
                keyword: "c,C,razer stream controller is not responding,not responding,responding"
                payload:
                  url: "https://mysupport.razer.com/app/answers/detail/a_id/6159?utm_source=chatbot_support&utm_medium=chat&utm_campaign=rzchatbot"
              - label: "Razer Stream Controller is completely blank"
                type: url
                keyword: "d,D,razer stream controller is completely blank,blank"
                payload:
                  url: "https://mysupport.razer.com/app/answers/detail/a_id/6158?utm_source=chatbot_support&utm_medium=chat&utm_campaign=rzchatbot"
    transitions:
      next: intent
      actions:
        setup: streamControllerSetup
        match: hiddenAction
        cancel: errorOutput

  streamControllerSetup:
    component: System.Output
    properties:
      text: "${rb.streamControllerSetup}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  setupKatana:
    component: System.Output
    properties:
      text: "${rb.setupKatana}"
      keepTurn: true
    transitions:
      next: quickAnswerTS2

  powerSurgeWarning:
    component: System.Output
    properties:
      text: "${rb.powerSurgeWarning}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  activationCode:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      nlpResultVariable: iResult
      transitionAfterMatch: true
      autoNumberPostbackActions: "false"
      maxPrompts: 2
      metadata:
        responseItems:
          - type: text
            text: "What help do you need with an activation code?"
            actions:
              - label: "Need a 7.1 Surround Sound activation code"
                type: "postback"
                keyword: "a,A"
                payload:
                  action: "ssActivationCode"
              - label: "Help activate 7.1 Surround Sound with an existing code"
                type: "postback"
                keyword: "b,B"
                payload:
                  action: "ssExistingCode"
              - label: "Need an activation code for my Virtual Ring Light App"
                type: "postback"
                keyword: "c,C"
                payload:
                  action: "vrlaActivationCode"
    transitions:
      next: "intent"
      actions:
        ssActivationCode: "surroundSoundGetCode"
        ssExistingCode: "surroundSoundHelpActivate"
        vrlaActivationCode: "virtualRingLightAppGetCode"
        match: "hiddenAction"

  virtualRingLightAppGetCode:
    component: System.Output
    properties:
      text: "${rb.virtualRingLightAppGetCode}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  surroundSoundGetCode:
    component: System.Output
    properties:
      text: "${rb.surroundSoundGetCode}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  surroundSoundHelpActivate:
    component: System.Output
    properties:
      text: "${rb.surroundSoundHelpActivate}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  bladeBootLoop:
    component: System.Output
    properties:
      text: "${rb.bladeBootLoop}"
      keepTurn: true
    transitions:
      next: quickAnswerLaptop

  bladeSetUpRAID:
    component: System.Output
    properties:
      text: "${rb.bladeSetUpRAID}"
      keepTurn: true
    transitions:
      next: quickAnswerLaptop

  bladeOverclocking:
    component: System.Output
    properties:
      text: "${rb.bladeOverclocking}"
      keepTurn: true
    transitions:
      next: quickAnswerLaptop

  bladeSecureBoot:
    component: System.Output
    properties:
      text: "${rb.bladeSecureBoot}"
      keepTurn: true
    transitions:
      next: quickAnswerLaptop

  nexusVirtualController:
    component: System.Output
    properties:
      text: "${rb.nexusVirtualController}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  headStrapSetup:
    component: System.Output
    properties:
      text: "${rb.headStrapSetup}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  headStrapAdjustment:
    component: System.Output
    properties:
      text: "${rb.headStrapAdjustment}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1
  
  facialInterfaceSetup:
    component: System.Output
    properties:
      text: "${rb.facialInterfaceSetup}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  nommoV2PowerSaving:
    component: System.Output
    properties:
      text: "${rb.nommoV2PowerSaving}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  nommoV2Switching:
    component: System.Output
    properties:
      text: "${rb.nommoV2Switching}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  hammerheadProDryOff:
    component: System.Output
    properties:
      text: "${rb.hammerheadProDryOff}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  retroSuperFuture:
    component: System.Output
    properties:
      text: "${rb.retroSuperFuture}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  autoCancelledOrder:
    component: System.Output
    properties:
      text: "${rb.autoCancelledOrder}"
      keepTurn: true
    transitions:
      next: quickAnswerCS

  keyboardMechSwitchReplacement:
    component: System.Output
    properties:
      text: "${rb.keyboardMechSwitchReplacement}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  kishiV2ProVirtualController:
    component: System.Output
    properties:
      text: "${rb.kishiV2ProVirtualController}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  kishiV2ProAudioHaptic:
    component: System.Output
    properties:
      text: "${rb.kishiV2ProAudioHaptic}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  bladeScrewSizes:
    component: System.Output
    properties:
      text: "${rb.bladeScrewSizes}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  wirelessControlPod:
    component: System.Output
    properties:
      text: "${rb.wirelessControlPod}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  wirelessControlPodSupportedDevices:
    component: System.Output
    properties:
      text: "${rb.wirelessControlPodSupportedDevices}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  #-------------------------------------------------------------------------------
  # Intent Answers End -----------------------------------------------------------
  #-------------------------------------------------------------------------------

  queryAnsweredSurroundSound1:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      autoNumberPostbackActions: "false"
      maxPrompts: 2
      metadata:
        responseItems:
          - type: text
            text: "Did I answer your question?"
            actions:
              - label: "Yes"
                type: postback
                keyword: "a,A,y,Y"
                payload:
                  action: "Yes"
              - label: "No"
                type: postback
                keyword: "b,B,n,N"
                payload:
                  action: "No"
    transitions:
      next: intent
      actions:
        Yes: queryResolved
        No: surroundSoundTs1
        match: hiddenAction
        cancel: errorOutput

  # setRequestFromSurroundSound:
  #   component: System.SetVariable
  #   properties:
  #     insightsInclude: false
  #     variable: requestFromSS
  #     value: "surroundSound"
  surroundSoundTs:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      autoNumberPostbackActions: "false"
      maxPrompts: 2
      metadata:
        responseItems:
          - type: text
            text: "How can we help you with 7.1 Surround Sound activation?"
            actions:
              - label: "Help activate a code for the first time"
                type: postback
                keyword: "a,A,help activate a code for the first time"
                payload:
                  action: SsTs1
              - label: "Error activating the code for the first time"
                type: postback
                keyword: "b,B,error activating the code for the first time"
                payload:
                  action: SsTs2
              - label: "Request a new activation code (Razer ID required)"
                type: url
                keyword: "c,C,need a new activation code"
                payload:
                  url: "https://mysupport.razer.com/app/answers/detail/a_id/6301?utm_source=chatbot_mysupport&utm_medium=chat&utm_campaign=rzchatbot&s=oda"
    transitions:
      next: intent
      actions:
        SsTs1: surroundSoundHelpActivate
        SsTs2: surroundSoundTs2
        # SsTs3: surroundSoundTs3
        match: hiddenAction
        cancel: errorOutput

  surroundSoundTs1:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: requestFromSS
      value: "ssTs1"
  surroundSoundTs1CategoryId:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: caseCategoryId
      value: "NULL"
  surroundSoundTs1CategoryLabel:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: caseSSCategoryName
      value: "No code received"
    transitions:
      next: surroundSoundSerial

  surroundSoundTs2:
  #   component: System.SetVariable
  #   properties:
  #     insightsInclude: false
  #     variable: requestFromSS
  #     value: "surroundSound"
  # surroundSoundTs2Prompt:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      autoNumberPostbackActions: "false"
      maxPrompts: 2
      metadata:
        responseItems:
          - type: text
            text: "What type of error was encounterd?"
            actions:
              - label: "Error shows code has already been used"
                type: postback
                keyword: "a,A,error shows code has already been used,already used"
                payload:
                  action: SsTs2Used
              - label: "Error shows it's an invalid code"
                type: postback
                keyword: "b,B,error shows it's an invalid code,invalid code"
                payload:
                  action: SsTs2Invalid
    transitions:
      next: intent
      actions:
        SsTs2Used: surroundSoundTS2Used
        SsTs2Invalid: surroundSoundTS2Invalid
        match: hiddenAction
        cancel: errorOutput

  surroundSoundTS2Used:
    component: System.Output
    properties:
      text: "The code has already been activated with a Razer ID email address. Try logging into the software with your Razer ID email address."
      keepTurn: true
  surroundSoundTs2UsedCategoryId:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: caseCategoryId
      value: "1339"
  surroundSoundTS2UsedSetRequest:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: requestActivationCode
      value: true
  surroundSoundTs2UsedCategoryLabel:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: caseSSCategoryName
      value: "Code not working"
    transitions:
      next: quickAnswerTS1

  surroundSoundTS2Invalid:
    component: System.Output
    properties:
      text: "Make sure you've entered the code properly with the correct characters. For example, \"0\" can either be the number zero or the uppercase letter \"o\", and \"I\" can either be the uppercase letter \"i\" or the lowercase letter \"L\"."
      keepTurn: true
  surroundSoundTS2InvalidCategoryId:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: caseCategoryId
      value: "1339"
  surroundSoundTS2InvalidSetRequest:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: requestActivationCode
      value: true
  surroundSoundTS2InvalidLabel:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: caseSSCategoryName
      value: "Code not working"
    transitions:
      next: quickAnswerTS1

  surroundSoundTs3:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: requestFromSS
      value: "surroundSound"
  surroundSoundTs3Prompt:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      autoNumberPostbackActions: "false"
      maxPrompts: 2
      metadata:
        responseItems:
          - type: text
            text: "Can you tell me the reason you need a new activation code?"
            actions:
              - label: "I lost my activation code"
                type: postback
                keyword: "a,A,i lost my activation code,lost"
                payload:
                  action: SsTs3Lost
              - label: "I over-scratched my activation code card"
                type: postback
                keyword: "b,B,i over-scratched my activation code card,scratched"
                payload:
                  action: SsTs3Scratched
              - label: "My Razer headset did not come with a code"
                type: postback
                keyword: "c,C,my razer headset did not come with a code,no code"
                payload:
                  action: SsTs3Code
              - label: "I didn't receive an activation code after registration"
                type: postback
                keyword: "d,D,i didn't receive an activation code after registration,didn't receive an activation code,didn't receive"
                payload:
                  action: SsTs3Receive
    transitions:
      next: intent
      actions:
        SsTs3Lost: surroundSoundTS3Lost
        SsTs3Scratched: surroundSoundTS3Scratched
        SsTs3Code: surroundSoundTS3Code
        SsTs3Receive: surroundSoundCTS3CodeRegistration
        match: hiddenAction
        cancel: errorOutput

  surroundSoundTS3Lost:
    component: System.Output
    properties:
      text: "If you’ve activated the code previously, you do not need to reactivate. You can log in with your Razer ID email that was used to activate the card."
      keepTurn: true
  surroundSoundTS3LostId:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: caseCategoryId
      value: "NULL"
  surroundSoundTS3LostCategory:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: caseSSCategoryName
      value: "No code received"
    transitions:
      next: quickAnswerTS1

  surroundSoundTS3Scratched:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: caseCategoryId
      value: "2900"
  surroundSoundTS3ScratchedCategory:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: caseSSCategoryName
      value: "Card over scratched"
  surroundSoundTS3ScratchedSetRequest:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: requestActivationCode
      value: true
    transitions:
      next: surroundSoundSerial

  surroundSoundTS3Code:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      autoNumberPostbackActions: "false"
      maxPrompts: 2
      metadata:
        responseItems:
          - type: text
            text: "${rb.surroundSoundTS3Code}" #todo create an RB
            actions:
              - label: "Register my headset"
                type: url
                keyword: "a,A,register my headset,register"
                payload:
                  url: "https://www.razer.com/product-registration"
              - label: "My headset is not listed above"
                type: postback
                keyword: "b,B,my headset is not listed above,not listed above"
                payload:
                  action: SsTs3Code1
              - label: "Activation code not received after registration"
                type: postback
                keyword: "c,C,my razer headset did not come with a code,no code"
                payload:
                  action: SsTs3Code3
    transitions:
      next: intent
      actions:
        SsTs3Code1: surroundSoundTS3CodeList
        SsTs3Code3: surroundSoundCTS3CodeRegistration
        match: hiddenAction
        cancel: errorOutput

  surroundSoundTS3CodeList:
    component: System.Output
    properties:
      text: "${rb.surroundSoundTS3CodeList}"
      keepTurn: true
  surroundSoundTS3CodeListId:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: caseCategoryId
      value: "2901"
  surroundSoundTS3CodeListCategory:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: caseSSCategoryName
      value: "Headset model not supported"
    transitions:
      next: quickAnswerTS1

  surroundSoundCTS3CodeScratch:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: caseCategoryId
      value: "1338"
  surroundSoundTS3CodeScratchCategory:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: caseSSCategoryName
      value: "No code received"
    transitions:
      next: surroundSoundSerial

  surroundSoundCTS3CodeRegistration:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: caseCategoryId
      value: "1338"
  surroundSoundCTS3CodeRegistrationCategory:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: caseSSCategoryName
      value: "No code received"
  surroundSoundTS3CoderegistrationSetRequest:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: requestActivationCode
      value: true
    transitions:
      next: surroundSoundSerial

  surroundSoundSerial:
    component: System.ConditionExists
    properties:
      insightsInclude: false
      variable: serialNumber
    transitions:
      actions:
        exists: surroundSoundSerialHyphen
        notexists: surroundSoundSerialReset

  surroundSoundSerialHyphen:
    component: System.ConditionEquals
    properties:
      insightsInclude: false
      source: "${serialNumber}"
      value: "-"
    transitions:
      actions:
        equal: surroundSoundSerialReset
        notequal: isRequestFromSSLaunchValidation

  surroundSoundSerialReset:
    component: System.ResetVariables
    properties:
      insightsInclude: false
      variableList: "serialNumber"
  surroundSoundSerialPrompt:
    component: System.Text
    properties:
      prompt: "Please enter the serial number of your headset"
      variable: serialNumber
  isRequestFromSSLaunchValidation:
    component: System.ConditionEquals
    properties:
      insightsInclude: false
      variable: requestFromSS
      value: "surroundSoundLaunch"
    transitions:
      actions:
        equal: surroundSoundLaunchValidation
        notequal: surroundSoundValidation

  surroundSoundLaunchValidation:
    component: "osvc.ValidateSerial"
    properties:
      serial: "${serialNumber}"
      product: 856
    transitions:
      actions:
        invalid: ssLaunchInvalidSerialCopy
        valid: ssLaunchHelp

  surroundSoundValidation:
    component: "osvc.ValidateSerial"
    properties:
      serial: "${serialNumber}"
      product: 856
    transitions:
      actions:
        invalid: surroundSoundInvalidSerialCopy
        valid: isRequestFromSSTs1

  surroundSoundInvalidSerialCopy:
    component: System.CopyVariables
    properties:
      from: serialNumber
      to: serialNumberTemp
  surroundSoundInvalidSerialReset:
    component: System.ResetVariables
    properties:
      insightsInclude: false
      variableList: "serialNumber"
  surroundSoundInvalidSerial:
    component: System.Text
    properties:
      prompt: "I'm sorry but I couldn't find a device with a serial number <b>${serialNumberTemp}</b>. Please enter a valid serial number."
      variable: serialNumber
    transitions:
      next: surroundSoundValidation

  ssLaunchInvalidSerialCopy:
    component: System.CopyVariables
    properties:
      from: serialNumber
      to: serialNumberTemp
  ssLaunchInvalidSerialReset:
    component: System.ResetVariables
    properties:
      insightsInclude: false
      variableList: "serialNumber"
  ssLaunchInvalidSerial:
    component: System.Text
    properties:
      prompt: "In order to help you get an activation code, please enter a valid serial number. We were not able to validate <b>${serialNumberTemp}</b>."
      variable: serialNumber
    transitions:
      next: surroundSoundLaunchValidation

  isRequestFromSSTs1:
    component: System.ConditionEquals
    properties:
      insightsInclude: false
      variable: requestFromSS
      value: "ssTs1"
    transitions:
      actions:
        equal: ssCheckChatHoops
        notequal: surroundSoundHelp

  ssCheckChatHoops:
    component: "osvc.CheckChatQueue"
    properties:
      webIncidentTypeId: "${system.config.incidentTs1Id}"
    transitions:
      actions:
        chatAvailable: ssCheckChatQueue
        chatUnavailableMaxQueue: handleMaxSSTs1
        chatUnavailableHours: handleHoopsSSTs1
        fail: apiFailed

  ssCheckChatQueue:
    component: "System.AgentTransferCondition"
    properties:
      allowTransferIf: "agentsAreAvailable"
      customProperties:
        - name: "c$web_incident_type"
          value: "My Peripheral (mouse, keyboard, headset)"
          type: "STRING"
    transitions:
      next: intent
      actions:
        conditionsMet: surroundSoundChatQuestion
        conditionsNotMet: handleMaxSSTs1
        error: apiFailed

  handleHoopsSSTs1: #do a QA on this
    component: System.CommonResponse
    properties:
      processUserMessage: true
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      autoNumberPostbackActions: "false"
      maxPrompts: 2
      metadata:
        responseItems:
          - type: text
            text: "We're sorry but live support is only available between 6AM - 10PM PT. Meanwhile, you may submit a support ticket or ask another question."
            actions:
              - label: Submit a Support Ticket
                type: postback
                keyword: "a,A,cp,ticket"
                payload:
                  action: ticket
              - label: Get Activation Code Online (Razer ID required)
                type: url
                keyword: "b,B,get activation code online,activation code online,online"
                payload:
                  url: "https://mysupport.razer.com/app/self-help/surround-sound/search?utm_source=ssactivation_oda&utm_medium=oda&utm_campaign=surroundsound_activation_from_oda&utm_id=oda.ss.06212022"
              - label: Ask another question
                type: postback
                keyword: "c,C,startover,reset,restart"
                payload:
                  action: startOver
    transitions:
      next: intent
      actions:
        ticket: initiateCaseCreation
        startOver: resetConversation
        match: hiddenAction
        cancel: errorFallback

  handleMaxSSTs1: #do a QA on this
    component: System.CommonResponse
    properties:
      processUserMessage: true
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      autoNumberPostbackActions: "false"
      maxPrompts: 2
      metadata:
        responseItems:
          - type: text
            text: "We're sorry but our queue has reached its maximum limit. Meanwhile, you may submit a support ticket or ask another question."
            actions:
              - label: Submit a Support Ticket
                type: postback
                keyword: "a,A,cp,ticket"
                payload:
                  action: ticket
              - label: Ask another question
                type: postback
                keyword: "b,B,startover,reset,restart"
                payload:
                  action: startOver
    transitions:
      next: intent
      actions:
        ticket: initiateCaseCreation
        startOver: resetConversation
        match: hiddenAction
        cancel: errorFallback

  surroundSoundHelp:
    component: System.ConditionEquals
    properties:
      insightsInclude: false
      variable: requestActivationCode
      value: true
    transitions:
      actions:
        equal: surroundSoundHelpActivation
        notequal: surroundSoundHelpTicket

  surroundSoundHelpTicket:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      autoNumberPostbackActions: "false"
      maxPrompts: 2
      metadata:
        responseItems:
          - type: text
            text: "To contact us for support, please select an option below."
            actions:
              - label: Submit a Support Ticket
                type: postback
                keyword: "a,A,cp,ticket"
                payload:
                  action: ticket
              - label: Get Activation Code Online (Razer ID required)
                type: url
                keyword: "b,B,get activation code online,activation code online,online"
                payload:
                  url: "https://mysupport.razer.com/app/self-help/surround-sound/search?utm_source=ssactivation_oda&utm_medium=oda&utm_campaign=surroundsound_activation_from_oda&utm_id=oda.ss.06212022"
              - label: Connect to an agent
                type: postback
                keyword: "c,C,agent"
                payload:
                  action: agent
    transitions:
      next: intent
      actions:
        ticket: initiateCaseCreation
        agent: surroundSoundChatQuestion
        match: hiddenAction
        cancel: errorOutput

  surroundSoundHelpActivation:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      autoNumberPostbackActions: "false"
      maxPrompts: 2
      metadata:
        responseItems:
          - type: text
            text: "To contact us for support, please select an option below."
            actions:
              - label: Receive Activation Code by Email
                type: postback
                keyword: "a,A,cp,ticket"
                payload:
                  action: ticket
              - label: Get Activation Code Online (Razer ID required)
                type: url
                keyword: "b,B,get activation code online,activation code online,online"
                payload:
                  url: "https://mysupport.razer.com/app/self-help/surround-sound/search?utm_source=ssactivation_oda&utm_medium=oda&utm_campaign=surroundsound_activation_from_oda&utm_id=oda.ss.06212022"
              - label: Connect to an agent
                type: postback
                keyword: "c,C,agent"
                payload:
                  action: agent
    transitions:
      next: intent
      actions:
        ticket: initiateCaseCreation
        agent: surroundSoundChatQuestion
        match: hiddenAction
        cancel: errorOutput

  ssLaunchHelp:
  #   component: System.SetVariable
  #   properties:
  #     insightsInclude: false
  #     variable: requestFromSS
  #     value: "surroundSoundLaunch"
  # ssLaunchHelpPrompt:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      autoNumberPostbackActions: "false"
      maxPrompts: 2
      metadata:
        responseItems:
          - type: text
            text: "Please select an option below on how you'd like to get your activation code."
            actions:
              - label: Receive Activation Code by Email
                type: postback
                keyword: "a,A,cp,ticket"
                payload:
                  action: ticket
              - label: Get Activation Code Online (Razer ID required)
                type: url
                keyword: "b,B,get activation code online,activation code online,online"
                payload:
                  url: "https://mysupport.razer.com/app/self-help/surround-sound/search?utm_source=ssactivation_oda&utm_medium=oda&utm_campaign=surroundsound_activation_from_oda&utm_id=oda.ss.06212022"
              - label: Connect to an agent
                type: postback
                keyword: "c,C,agent"
                payload:
                  action: agent
    transitions:
      next: intent
      actions:
        ticket: surroundSoundPresetSerial
        agent: surroundSoundChatQuestion
        match: hiddenAction
        cancel: errorOutput

  surroundSoundPresetSerial:
    component: System.CopyVariables
    properties:
      from: serialNumber
      to: case.serialNumber
    transitions:
      next: surroundSoundCategory

  queryAnsweredSurroundSound2:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      autoNumberPostbackActions: "false"
      maxPrompts: 2
      metadata:
        responseItems:
          - type: text
            text: "Did I answer your question?"
            actions:
              - label: "Yes"
                type: postback
                keyword: "a,A,y,Y"
                payload:
                  action: "Yes"
              - label: "No"
                type: postback
                keyword: "b,B,n,N"
                payload:
                  action: "No"
    transitions:
      next: intent
      actions:
        Yes: queryResolved
        No: surroundSoundSerial
        match: hiddenAction
        cancel: errorOutput

  surroundSoundChatQuestion:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: "chatQuestion"
      value: "7.1 Surround Sound Activation Help"
    transitions:
      next: setChatQueueTS1

  surroundSoundCategory:
    component: System.ConditionExists
    properties:
      insightsInclude: false
      variable: caseCategoryId
    transitions:
      actions:
        exists: initiateCaseCreation
        notexists: surroundSoundCategoryPrompt

  surroundSoundCategoryPrompt:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      autoNumberPostbackActions: "false"
      maxPrompts: 2
      metadata:
        responseItems:
          - type: text
            text: "Please confirm the reason you need an activation"
            actions:
              - label: Card over scratched
                type: postback
                keyword: "a,A,card over scratched,over scratched,scratch"
                payload:
                  action: scratch
              - label: Code not working
                type: postback
                keyword: "b,B,code not working,not working"
                payload:
                  action: notWorking
              - label: No code received
                type: postback
                keyword: "c,C,no code received,no code"
                payload:
                  action: noCode
    transitions:
      next: intent
      actions:
        scratch: surroundSoundCategoryScratch
        notWorking: surroundSoundCategoryNotWorking
        noCode: surroundSoundCategoryNoCode
        match: hiddenAction
        cancel: errorOutput

  surroundSoundCategoryScratch:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: caseCategoryId
      value: "2900"
  surroundSoundCategoryScratchLabel:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: caseSSCategoryName
      value: "Card over scratched"
    transitions:
      next: isSSCategoryRequestReset

  surroundSoundCategoryNotWorking:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: caseCategoryId
      value: "1339"
  surroundSoundCategoryNotWorkingLabel:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: caseSSCategoryName
      value: "Code not working"
    transitions:
      next: isSSCategoryRequestReset

  surroundSoundCategoryNoCode:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: caseCategoryId
      value: "1338"
  surroundSoundCategoryNoCodeLabel:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: caseSSCategoryName
      value: "No code received"
    transitions:
      next: isSSCategoryRequestReset

  isSSCategoryRequestReset:
    component: System.ConditionExists
    properties:
      insightsInclude: false
      variable: caseSSCategoryResetAll
    transitions:
      actions:
        exists: caseResetSerialSSL
        notexists: initiateCaseCreation

  #-------------------------------------------------------------------------------
  # Case Creation ----------------------------------------------------------------
  #-------------------------------------------------------------------------------

  initiateCaseCreation:
    component: System.ConditionExists
    properties:
      insightsInclude: false
      variable: user.caseCreated
    transitions:
      next: setCaseFirstName
      actions:
        exists: caseAlreadyCreated
        notexists: "<#if caseCreationState?? && caseCreationState.value!=''>${caseCreationState.value}<#else>setCaseFirstName</#if>"

  caseAlreadyCreated:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      autoNumberPostbackActions: "false"
      maxPrompts: 2
      metadata:
        responseItems:
          - type: text
            text: "You’ve already created a case. If you still need help, you can view/update your case or connect with us through the other options below."
            actions:
              - label: View/update case
                type: url
                keyword: "a,A,view,update"
                payload:
                  url: "https://razerid.razer.com/"
              - label: Connect to an agent
                type: postback
                keyword: "b,B,agent"
                payload:
                  action: agent
              - label: Visit Razer Insider
                type: url
                keyword: "c,C,insider"
                payload:
                  url: "https://insider.razer.com/index.php?forums/support/&utm_source=chatbot_insider&utm_medium=chat&utm_campaign=rzchatbot&s=oda"
              - label: Ask another question
                type: postback
                keyword: "d,D,startover,reset,restart"
                payload:
                  action: startOver
    transitions:
      next: intent
      actions:
        agent: startChat
        startOver: resetConversation
        match: hiddenAction
        cancel: errorFallback

  setCaseFirstName:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: "case.firstName"
      value: "${profile.firstName.value}"
  setCaseLastName:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: "case.lastName"
      value: "${profile.lastName.value}"
  setCaseEmail:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: "case.email"
      value: "${profile.email.value}"
  setCaseContactInfo:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: "contactInfo"
      value: "${profile.contactInfo.value}"
  setCaseSerial:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: "case.serialNumber"
      value: "<#if serialNumber=='' || serialNumber=='-' || serialNumber=='unavailable'>Unavailable<#else>${serialNumber}</#if>"
  setCaseIssue:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: "case.issue"
      value: "${iResult.value.query}"
  isTicketRequestFromSurroundSound:
    component: System.ConditionExists
    properties:
      insightsInclude: false
      variable: requestFromSS
    transitions:
      actions:
        exists: setCaseProductSurroundSound
        notexists: setCaseType

  setCaseProductSurroundSound:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: "caseProductId"
      value: "1323"
  setCaseSurroundSound:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: "case.category"
      value: "1323"
  setCaseIssueSurroundSound:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: "case.issue"
      value: "7.1 Surround Sound Activation Help"
  setCaseProductNumberSurroundSound:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: "case.productNumber"
      value: "NA"
  setCaseCategorySurroundSound:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: "caseCategory"
      value: "product"
    transitions:
      next: resetCase

  setCaseType:
    component: "osvc.MapCaseType"
    properties:
      selectedOption: "${selectedOption}"
      nlpResult: "${iResult}"
    transitions:
      actions:
        categorized: "setCaseCategory"
        multiple: "resolveCaseCategory"
        specific: "caseSelectOptions"
        uncategorized: "resetCase"

  setCaseCategory:
    component: "System.SetVariable"
    properties:
      insightsInclude: false
      variable: caseProductId
      value: "${caseProductId}"
  setCaseCategorySS:
    component: "System.SetVariable"
    properties:
      insightsInclude: false
      variable: case.category
      value: "${caseProductId}"
  resetCase:
    component: System.ResetVariables
    properties:
      insightsInclude: false
      variableList: "capturedText,caseFile,caseFileType,caseFileTitle,hasCaseFile"
  checkCaseCategory:
    component: System.ConditionExists
    properties:
      variable: caseProductId
    transitions:
      actions:
        exists: resolveCase #todo: reorganize population of other vars
        notexists: casePrompt

  resolveCaseCategory:
    component: System.Switch
    properties:
      source: "${caseParentCategory}"
      values:
        - "MultipleCategoryA"
        - "MultipleCategoryB"
        - "MultipleCategoryC"
    transitions:
      actions:
        MultipleCategoryA: caseMultipleA
        MultipleCategoryB: caseMultipleB
        MultipleCategoryC: caseMultipleC
        NONE: casePrompt

  caseMultipleA:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      autoNumberPostbackActions: "false"
      maxPrompts: 2
      metadata:
        responseItems:
          - type: text
            text: "What do you need help with?"
            actions:
              - label: "System, Monitor, Razer Core"
                type: postback
                keyword: "1,a,A,system,monitor,core"
                payload:
                  action: "system"
              - label: "Peripherals"
                type: postback
                keyword: "2,b,B,peripherals"
                payload:
                  action: "peripherals"
              - label: "Networking, Chair, Wearables"
                type: postback
                keyword: "3,c,C,networking,chair,wearables"
                payload:
                  action: "networking"
    transitions:
      next: intent
      actions:
        system: caseSystem
        peripherals: casePeripheral
        networking: caseNetworking

  caseMultipleB:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      autoNumberPostbackActions: "false"
      maxPrompts: 2
      metadata:
        responseItems:
          - type: text
            text: "What do you need help with?"
            actions:
              - label: "RMA or Repair"
                type: postback
                keyword: "1,a,A,rma,repair"
                payload:
                  action: "rma"
              - label: "System, Monitor, Razer Core"
                type: postback
                keyword: "2,b,B,system,monitor,core"
                payload:
                  action: "system"
              - label: "Peripherals"
                type: postback
                keyword: "3,c,C,peripherals"
                payload:
                  action: "peripherals"
              - label: "Networking, Chair, Wearables"
                type: postback
                keyword: "4,d,D,networking,chair,wearables"
                payload:
                  action: "networking"
    transitions:
      next: intent
      actions:
        rma: caseRMA
        system: caseSystem
        peripherals: casePeripheral
        networking: caseNetworking

  caseMultipleC:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      autoNumberPostbackActions: "false"
      maxPrompts: 2
      metadata:
        responseItems:
          - type: text
            text: "What do you need help with?"
            actions:
              - label: "Synapse"
                type: postback
                keyword: "1,a,A,synapse"
                payload:
                  action: "synapse"
              - label: "System, Monitor, Razer Core"
                type: postback
                keyword: "2,b,B,system,monitor,core"
                payload:
                  action: "system"
              - label: "Peripherals"
                type: postback
                keyword: "3,c,C,peripherals"
                payload:
                  action: "peripherals"
              - label: "Networking, Chair, Wearables"
                type: postback
                keyword: "4,d,D,networking,chair,wearables"
                payload:
                  action: "networking"
    transitions:
      next: intent
      actions:
        synapse: caseSynapse
        system: caseSystem
        peripherals: casePeripheral
        networking: caseNetworking

  caseSynapse:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      autoNumberPostbackActions: "false"
      maxPrompts: 2
      metadata:
        responseItems:
          - type: text
            text: "What version of Synapse do you need help with?"
            actions:
              - label: "Razer Synapse 3"
                type: postback
                keyword: "1,a,A,razer synapse 3,synapse 3,"
                payload:
                  action: "synapse3"
              - label: "Razer Synapse 2.0"
                type: postback
                keyword: "2,b,B,razer synapse 2.0,synapse 2.0"
                payload:
                  action: "synapse2"
    transitions:
      next: intent
      actions:
        synapse3: caseSoftwareSynapse3
        synapse2: caseSoftwareSynapse2

  caseSelectOptions:
    component: "System.List"
    properties:
      options: "${caseSubCategory}"
      prompt: "What do you need help with?"
    transitions:
      next: intent
      actions:
        "RMA or Repair Status": rmaStatus
        "Repair Issue": caseRmaRepair
        "Replacement Issue": caseRmaReplacement
        "Order Issue/Delay": caseOrderIssue
        "Refund": caseOrderRefund
        "Order Cancellation": caseOrderCancellation
        "Laptop": caseSystemLaptop
        "Desktop": caseSystemDesktop
        "Raptor Monitor": caseSystemRaptor
        "Razer Core": caseSystemCore
        "Headset": casePeripheralHeadset
        "Keyboard": casePeripheralKeyboard
        "Mouse": casePeripheralMouse
        "Broadcaster": casePeripheralBroadcaster
        "Controller": casePeripheralController
        "Mats": casePeripheralMats
        "Other Peripherals": casePeripheralOther
        "Networking": caseNetworkingSila
        "Chair": caseNetworkingChair
        "Smart Glasses": caseSmartGlasses
        "Wearables": caseNetworkingWearables
        "Razer Kiyo": casePeripheralBroadcaster
        "Razer Seiren": casePeripheralBroadcaster
        "Synapse 2": caseSoftwareSynapse2
        "Synapse 3": caseSoftwareSynapse3

  casePrompt:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      autoNumberPostbackActions: "false"
      maxPrompts: 2
      metadata:
        responseItems:
          - type: text
            text: "What do you need help with?"
            actions:
              - label: "RMA or Repair"
                type: postback
                keyword: "1,a,A,rma,repair"
                payload:
                  action: "rma"
              - label: "Razer Orders"
                type: postback
                keyword: "2,b,B,razer.com order,razer.com,order"
                payload:
                  action: "order"
              - label: "System, Monitor, Razer Core"
                type: postback
                keyword: "3,c,C,system,monitor,core"
                payload:
                  action: "system"
              - label: "Peripherals"
                type: postback
                keyword: "4,d,D,peripherals"
                payload:
                  action: "peripherals"
              - label: "Software & Services"
                type: postback
                keyword: "5,e,E,software,services,software & services"
                payload:
                  action: "software"
              - label: "Networking, Chair, Wearables"
                type: postback
                keyword: "6,f,F,networking,chair,wearables"
                payload:
                  action: "networking"
              - label: "Mobile"
                type: postback
                keyword: "7,g,G,mobile"
                payload:
                  action: "mobile"
              # - label: "Phone"
              #   type: postback
              #   keyword: "7,g,G,phone"
              #   payload:
              #     action: "phone"
    transitions:
      next: intent
      actions:
        rma: caseRMA
        order: caseOrder
        system: caseSystem
        peripherals: casePeripheral
        software: caseSoftware
        networking: caseNetworking
        mobile: caseMobile
        # phone: casePhone

  caseRMA:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      autoNumberPostbackActions: "false"
      maxPrompts: 2
      metadata:
        responseItems:
          - type: text
            text: "What type of RMA issue do you need help with?"
            actions:
              - label: "RMA or Repair Status"
                type: postback
                keyword: "1,a,A,rma,repair status"
                payload:
                  action: "rma"
              - label: "Repair RMA Issue"
                type: postback
                keyword: "2,b,B,repair rma issue,repair rma"
                payload:
                  action: "repair"
              - label: "Replacement RMA Issue"
                type: postback
                keyword: "3,c,C,replacement rma issue,replacement rma"
                payload:
                  action: "replacement"
    transitions:
      next: intent
      actions:
        rma: rmaStatus
        repair: caseRmaRepair
        replacement: caseRmaReplacement

  caseRmaRepair:
    component: "System.AgentTransferCondition"
    properties:
      allowTransferIf: "agentsAreAvailable"
      customProperties:
        - name: "c$web_incident_type"
          value: "My Order from Razer.com"
          type: "STRING"
    transitions:
      next: intent
      actions:
        conditionsMet: caseRmaRepairAgent
        conditionsNotMet: caseRmaRepairTicket
        error: caseRmaRepairTicket
  caseRmaRepairAgent:
    component: System.Output
    properties:
      text: "To address your repair issue, we'll be connecting you to a live agent."
      keepTurn: true
    transitions:
      next: setChatQueueCS
  caseRmaRepairTicket:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: case.category
      value: "88"
    transitions:
      next: caseSetCategoryRma

  caseRmaReplacement:
    component: "System.AgentTransferCondition"
    properties:
      allowTransferIf: "agentsAreAvailable"
      customProperties:
        - name: "c$web_incident_type"
          value: "My Order from Razer.com"
          type: "STRING"
    transitions:
      next: intent
      actions:
        conditionsMet: caseRmaReplacementAgent
        conditionsNotMet: caseRmaReplacementTicket
        error: caseRmaReplacementTicket
  caseRmaReplacementAgent:
    component: System.Output
    properties:
      text: "To address your repair issue, we'll be connecting you to a live agent."
      keepTurn: true
    transitions:
      next: setChatQueueCS
  caseRmaReplacementTicket:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: case.category
      value: "101"
    transitions:
      next: caseSetCategoryRma

  caseSetCategoryRma:
    component: "System.SetVariable"
    properties:
      insightsInclude: false
      variable: caseCategory
      value: "rma"
    transitions:
      next: resolveCase

  caseOrder:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      autoNumberPostbackActions: "false"
      maxPrompts: 2
      metadata:
        responseItems:
          - type: text
            text: "What type of order issue do you need help with?"
            actions:
              - label: "Order Issue/Delay"
                type: postback
                keyword: "1,a,A,order issue,order delay,order,issue,delay"
                payload:
                  action: "issue"
              - label: "Refund"
                type: postback
                keyword: "2,b,B,refund"
                payload:
                  action: "refund"
              - label: "Order Cancellation"
                type: postback
                keyword: "3,c,C,order cancellation,cancellation"
                payload:
                  action: "cancellation"
    transitions:
      next: intent
      actions:
        issue: caseOrderIssue
        refund: caseOrderRefund
        cancellation: caseOrderCancellation

  caseOrderIssue:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: case.category
      value: "9"
    transitions:
      next: caseSetCategoryOrder

  caseOrderRefund:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: case.category
      value: "35"
    transitions:
      next: caseSetCategoryOrder

  caseOrderCancellation:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: case.category
      value: "73"
    transitions:
      next: caseSetCategoryOrder

  caseSetCategoryOrder:
    component: "System.SetVariable"
    properties:
      insightsInclude: false
      variable: caseCategory
      value: "order"
    transitions:
      next: resolveCase

  caseSystem:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      autoNumberPostbackActions: "false"
      maxPrompts: 2
      metadata:
        responseItems:
          - type: text
            text: "What type of device do you need help with?"
            actions:
              - label: "Laptop"
                type: postback
                keyword: "1,a,A,laptop"
                payload:
                  action: "laptop"
              - label: "Desktop"
                type: postback
                keyword: "2,b,B,desktop"
                payload:
                  action: "desktop"
              - label: "Raptor Monitor"
                type: postback
                keyword: "3,c,C,raptor monitor,raptor,monitor"
                payload:
                  action: "raptor"
              - label: "Razer Core"
                type: postback
                keyword: "4,d,D,razer core,core"
                payload:
                  action: "core"
    transitions:
      next: intent
      actions:
        laptop: caseSystemLaptop
        desktop: caseSystemDesktop
        raptor: caseSystemRaptor
        core: caseSystemCore

  caseSystemLaptop:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: case.category
      value: "281"
    transitions:
      next: caseSetCategoryProduct

  caseSystemDesktop:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: case.category
      value: "1827"
    transitions:
      next: caseSetCategoryProduct

  caseSystemRaptor:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: case.category
      value: "1220"
    transitions:
      next: caseSetCategoryProduct

  caseSystemCore:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: case.category
      value: "277"
    transitions:
      next: caseSetCategoryProduct

  casePeripheral:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      autoNumberPostbackActions: "false"
      maxPrompts: 2
      metadata:
        responseItems:
          - type: text
            text: "What type of peripheral do you need help with?"
            actions:
              - label: "Headset"
                type: postback
                keyword: "1,a,A,headset"
                payload:
                  action: "system.textReceived"
                  variables:
                    system.text: "RPSVFDHDST"
              - label: "Keyboard"
                type: postback
                keyword: "2,b,B,keyboard"
                payload:
                  action: "system.textReceived"
                  variables:
                    system.text: "RPSVFDKBRD"
              - label: "Mouse"
                type: postback
                keyword: "3,c,C,mouse"
                payload:
                  action: "system.textReceived"
                  variables:
                    system.text: "RPSVFDMSE VFD"
              - label: "Broadcaster"
                type: postback
                keyword: "4,d,D,broadcaster"
                payload:
                  action: "broadcaster"
              - label: "Controller"
                type: postback
                keyword: "5,e,E,controller"
                payload:
                  action: "controller"
              - label: "Mats"
                type: postback
                keyword: "6,f,F,mats"
                payload:
                  action: "mats"
              - label: "Other"
                type: postback
                keyword: "7,g,G,other"
                payload:
                  action: "other"
    transitions:
      next: intent
      actions:
        headset: casePeripheralHeadset
        keyboard: casePeripheralKeyboard
        mouse: casePeripheralMouse
        broadcaster: casePeripheralBroadcaster
        controller: casePeripheralController
        mats: casePeripheralMats
        other: casePeripheralOther

  casePeripheralHeadset:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: case.category
      value: "856"
    transitions:
      next: caseSetCategoryProduct

  casePeripheralKeyboard:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: case.category
      value: "891"
    transitions:
      next: caseSetCategoryProduct

  casePeripheralMouse:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: case.category
      value: "932"
    transitions:
      next: caseSetCategoryProduct

  casePeripheralBroadcaster:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: case.category
      value: "691"
    transitions:
      next: caseSetCategoryProduct

  casePeripheralController:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: case.category
      value: "725"
    transitions:
      next: caseSetCategoryProduct

  casePeripheralMats:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: case.category
      value: "916"
    transitions:
      next: caseSetCategoryProduct

  casePeripheralOther:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: case.category
      value: "1073"
    transitions:
      next: caseSetCategoryProduct

  caseSoftware:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      autoNumberPostbackActions: "false"
      maxPrompts: 2
      metadata:
        responseItems:
          - type: text
            text: "What type of software do you need help with?"
            actions:
              - label: "Razer Synapse 3"
                type: postback
                keyword: "1,a,A,razer synapse 3,synapse 3,"
                payload:
                  action: "synapse3"
              - label: "Razer Synapse 2.0"
                type: postback
                keyword: "2,b,B,razer synapse 2.0,synapse 2.0"
                payload:
                  action: "synapse2"
              - label: "Razer ID"
                type: postback
                keyword: "3,c,C,razer id,id"
                payload:
                  action: "id"
              - label: "7.1 Surround Sound"
                type: postback
                keyword: "4,d,D,7.1 surround sound,7.1"
                payload:
                  action: "surround7.1"
              - label: "THX Spatial Audio"
                type: postback
                keyword: "5,e,E,thx spatial audio,thx"
                payload:
                  action: "thx"
              - label: "Surround Sound"
                type: postback
                keyword: "6,f,F,surround sound"
                payload:
                  action: "surround"
              - label: "Other"
                type: postback
                keyword: "7,g,G,other"
                payload:
                  action: "other"
    transitions:
      next: intent
      actions:
        synapse3: caseSoftwareSynapse3
        synapse2: caseSoftwareSynapse2
        id: caseSoftwareId
        surround7.1: caseSoftwareSurround7.1
        thx: caseSoftwareThx
        surround: caseSoftwareSurround
        other: caseSoftwareOther

  caseSoftwareSynapse3:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: case.category
      value: "1284"
    transitions:
      next: caseSetCategoryOthers

  caseSoftwareSynapse2:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: case.category
      value: "567"
    transitions:
      next: caseSetCategoryOthers

  caseSoftwareId:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: case.category
      value: "671"
    transitions:
      next: caseSetCategoryOthers

  caseSoftwareSurround7.1:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: case.category
      value: "1323"
    transitions:
      next: caseSetCategoryOthers

  caseSoftwareThx:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: case.category
      value: "1585"
    transitions:
      next: caseSetCategoryOthers

  caseSoftwareSurround:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: case.category
      value: "663"
    transitions:
      next: caseSetCategoryOthers

  caseSoftwareOther:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: case.category
      value: "1268"
    transitions:
      next: caseSetCategoryOthers

  caseNetworking:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      autoNumberPostbackActions: "false"
      maxPrompts: 2
      metadata:
        responseItems:
          - type: text
            text: "What type of device do you need help with?"
            actions:
              - label: "Networking"
                type: postback
                keyword: "1,a,A,networking"
                payload:
                  action: "networking"
              - label: "Chair"
                type: postback
                keyword: "2,b,B,chair"
                payload:
                  action: "chair"
              - label: "Wearables"
                type: postback
                keyword: "3,c,C,wearables"
                payload:
                  action: "wearables"
    transitions:
      next: intent
      actions:
        networking: caseNetworkingSila
        chair: caseNetworkingChair
        wearables: caseNetworkingWearables

  caseNetworkingSila:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: case.category
      value: "129"
    transitions:
      next: caseSetCategoryOthers

  caseNetworkingChair:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: case.category
      value: "1609"
    transitions:
      next: caseSetCategoryOthers

  caseNetworkingWearables:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: case.category
      value: "1035"
    transitions:
      next: caseSetCategoryOthers

  caseMobile:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      autoNumberPostbackActions: "false"
      maxPrompts: 2
      metadata:
        responseItems:
          - type: text
            text: "What type of device do you need help with?"
            actions:
              - label: "Smart Glasses"
                type: postback
                keyword: "1,a,A,smartglasses,glasses"
                payload:
                  action: "glasses"
              - label: "Handhelds"
                type: postback
                keyword: "2,b,B,handhelds"
                payload:
                  action: "handhelds"
              - label: "Razer Apps"
                type: postback
                keyword: "3,c,C,apps"
                payload:
                  action: "apps"
    transitions:
      next: intent
      actions:
        glasses: caseSmartGlasses
        handhelds: caseHandhelds
        apps: caseApps

  caseSmartGlasses:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: case.category
      value: "2003"
    transitions:
      next: caseSetCategoryOthers

  caseHandhelds:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: case.category
      value: "3046"
    transitions:
      next: caseSetCategoryOthers

  caseApps:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: case.category
      value: "1268" #placeholder id for other software
    transitions:
      next: caseSetCategoryOthers

  caseSetCategoryOthers:
    component: "System.SetVariable"
    properties:
      insightsInclude: false
      variable: caseCategory
      value: "others"
    transitions:
      next: resolveCase

  caseSetCategoryProduct:
    component: "System.SetVariable"
    properties:
      insightsInclude: false
      variable: caseCategory
      value: "product"
    transitions:
      next: resolveCase

  casePhone:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: case.category
      value: "284"
  caseSetCategoryPhone:
    component: "System.SetVariable"
    properties:
      insightsInclude: false
      variable: caseCategory
      value: "phone"
    transitions:
      next: resolveCase

  resolveCase:
    component: System.Switch
    properties:
      source: "${caseCategory}"
      values:
        - "rma"
        - "order"
        - "phone"
        - "product"
        - "others"
    transitions:
      actions:
        rma: caseSetResetOptionsRma
        order: caseSetResetOptionsOrder
        phone: caseSetResetOptionsPhone
        product: caseSetResetOptionsProduct
        others: caseSetResetOptionsOthers
        NONE: resetCase

  caseSetResetOptionsRma:
    component: "System.SetVariable"
    properties:
      insightsInclude: false
      variable: caseResetOptions
      value: "Email, Category, RMA Number, Description, Reset All Fields"
    transitions:
      next: caseRmaSetOrder

  caseSetResetOptionsOrder:
    component: "System.SetVariable"
    properties:
      insightsInclude: false
      variable: caseResetOptions
      value: "Email, Category, Order Number, Description, Reset All Fields"
    transitions:
      next: caseOrderSetRma

  caseSetResetOptionsPhone:
    component: "System.SetVariable"
    properties:
      insightsInclude: false
      variable: caseResetOptions
      value: "Email, Category, Serial Number, Description, Reset All Fields"
    transitions:
      next: casePhoneSetProduct

  caseSetResetOptionsProduct:
    component: "System.SetVariable"
    properties:
      insightsInclude: false
      variable: caseResetOptions
      value: "Email, Category, Product Number, Serial Number, Description, Reset All Fields"
    transitions:
      next: caseProductSetRma

  caseSetResetOptionsOthers:
    component: "System.SetVariable"
    properties:
      insightsInclude: false
      variable: caseResetOptions
      value: "Email, Category, Description, Reset All Fields"
    transitions:
      next: caseOthers

  caseOthers:
    component: "System.SetVariable"
    properties:
      insightsInclude: false
      variable: case.rmaNumber
      value: "null"
  caseRmaSetOrder:
    component: "System.SetVariable"
    properties:
      insightsInclude: false
      variable: case.orderNumber
      value: "null"
  caseRmaSetProduct:
    component: "System.SetVariable"
    properties:
      insightsInclude: false
      variable: case.productNumber
      value: "null"
  caseRmaSetSerial:
    component: "System.SetVariable"
    properties:
      insightsInclude: false
      variable: case.serialNumber
      value: "null"
    transitions:
      next: caseForm

  caseOrderSetRma:
    component: "System.SetVariable"
    properties:
      insightsInclude: false
      variable: case.rmaNumber
      value: "null"
  caseOrderSetProduct:
    component: "System.SetVariable"
    properties:
      insightsInclude: false
      variable: case.productNumber
      value: "null"
  caseOrderSetSerial:
    component: "System.SetVariable"
    properties:
      insightsInclude: false
      variable: case.serialNumber
      value: "null"
    transitions:
      next: caseForm

  casePhoneSetProduct:
    component: "System.SetVariable"
    properties:
      insightsInclude: false
      variable: case.productNumber
      value: "null"
  caseProductSetRma:
    component: "System.SetVariable"
    properties:
      insightsInclude: false
      variable: case.rmaNumber
      value: "null"
  caseProductSetOrder:
    component: "System.SetVariable"
    properties:
      insightsInclude: false
      variable: case.orderNumber
      value: "null"
  caseProductSetSerial:
    component: System.ConditionEquals
    properties:
      insightsInclude: false
      source: "${case.value.serialNumber}"
      value: "unavailable"
    transitions:
      actions:
        equal: resetCaseSerialNum
        notequal: prevalidateSerial

  prevalidateSerial:
    component: "osvc.ValidateSerial"
    properties:
      serial: "${case.value.serialNumber}"
      product: "${case.value.category}"
    transitions:
      actions:
        valid: caseForm
        invalid: resetCaseSerialNum

  resetCaseSerialNum:
    component: System.ResetVariables
    properties:
      insightsInclude: false
      variableList: case.serialNumber

  caseForm:
    component: "System.ResolveEntities"
    properties:
      variable: case
      nlpResultVariable: iResult
      transitionAfterMatch: true
      useFullEntityMatches: false
    transitions:
      next: isCaseFileNeeded
      actions:
        match: caseHiddenAction

  caseHiddenAction:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: "caseEntity"
      value: "${system.entityToResolve.value.name}"
  confirmCaseEntity:
    component: System.ConditionEquals
    properties:
      insightsInclude: false
      variable: "caseEntity"
      value: "serialNumber"
    transitions:
      actions:
        equal: validateSerial
        notequal: caseForm

  validateSerial:
    component: "osvc.ValidateSerial"
    properties:
      serial: "${system.entityToResolve.value.userInput}"
      product: "${case.value.category}"
    transitions:
      actions:
        valid: caseForm
        invalid: invalidSerial

  invalidSerial:
    component: System.ResetVariables
    properties:
      variableList: "case.serialNumber"
  invalidSerialPrompt:
    component: System.Output
    properties:
      text: "We were unable to locate your serial number in the system. Please check that you have entered the correct serial number."
      keepTurn: true
    transitions:
      next: caseForm

  isCaseFileNeeded:
    component: System.ConditionEquals
    properties:
      insightsInclude: false
      variable: caseReset
      value: true
    transitions:
      actions:
        equal: showCaseData
        notequal: isFileRequestFromSS

  isFileRequestFromSS:
    component: System.ConditionExists
    properties:
      insightsInclude: false
      variable: requestFromSS
    transitions:
      actions:
        exists: showCaseDataSSL
        notexists: caseFile

  caseFile:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      nlpResultVariable: iResult
      # transitionAfterMatch: "true"
      autoNumberPostbackActions: "false"
      maxPrompts: 2
      metadata:
        responseItems:
          - type: text
            text: "Do you want to attach a file"
            actions:
              - label: "Yes"
                type: postback
                keyword: "a,A,y,Y"
                payload:
                  action: "Yes"
              - label: "No"
                type: postback
                keyword: "b,B,n,N"
                payload:
                  action: "No"
    transitions:
      next: intent
      actions:
        Yes: resetCaseFile
        No: showCaseData
        match: hiddenAction
        cancel: errorOutput

  resetCaseFile:
    component: System.ResetVariables
    properties:
      insightsInclude: false
      variableList: "capturedText,caseFile,caseFileType,caseFileTitle,hasCaseFile"
  uploadCaseFile:
    component: System.Output
    properties:
      text: "Please upload your attachment now. Use the button at the bottom-right corner."
  setCaseFile:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: caseFile
      value: "${system.message.payload.localFName}"
  setCaseFileType:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: caseFileType
      value: "${system.message.payload.contentType}"
  setCaseFileTitle:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: caseFileTitle
      value: "${system.message.payload.userFName}"
  setCaseCapturedText:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: capturedText
      value: "${system.message.messagePayload.text}"
  checkCaseFile:
    component: System.ConditionExists
    properties:
      insightsInclude: false
      variable: caseFile
    transitions:
      actions:
        exists: setCaseHasFile
        notexists: checkCaseCapturedText

  checkCaseCapturedText:
    component: System.ConditionExists
    properties:
      insightsInclude: false
      variable: capturedText
    transitions:
      actions:
        exists: caseFileAction
        #notexists: checkAttempt
        notexists: showCaseData

  caseFileAction:
    component: System.Switch
    properties:
      source: "${capturedText.value?lower_case}"
      values:
        - "help"
        - "exit"
        - "quit"
        - "bye"
        - "skip"
        - "back"
        - "cancel"
        - "start over"
        - "reset"
        - "restart"
        - "agent"
    transitions:
      actions:
        help: caseHelpGuide
        exit: endChatPrompt
        quit: endChatPrompt
        bye: endChatPrompt
        skip: noCaseFile
        back: noCaseFile
        cancel: noCaseFile
        start over: resetConversation
        reset: resetConversation
        restart: resetConversation
        agent: agentPrompt
        NONE: checkCaseAttempt

  checkCaseAttempt:
    component: System.ConditionEquals
    properties:
      insightsInclude: false
      variable: caseLastAttempt
      value: true
    transitions:
      actions:
        equal: noCaseFile
        notequal: setCaseLastAttempt

  setCaseLastAttempt:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: caseLastAttempt
      value: true
    transitions:
      next: resetCaseFile

  setCaseHasFile:
    component: System.SetVariable
    properties:
      variable: hasCaseFile
      value: true
    transitions:
      next: showCaseData

  noCaseFile:
    component: System.SetVariable
    properties:
      variable: hasCaseFile
      value: false
    transitions:
      next: showCaseData

  showCaseData:
    component: "osvc.GetCaseCategory"
    properties:
      id: "${case.value.category}"
  showCaseDataAll:
    component: System.Output
    properties:
      text: "Name: ${case.value.firstName} ${case.value.lastName}<br />
      Email: ${case.value.email?lower_case}<br />
      Category: ${caseProductCategory.value}<br />
      <#if case.value.rmaNumber != 'null'>RMA Number: ${case.value.rmaNumber}<br /></#if>
      <#if case.value.orderNumber != 'null'>Order Number: ${case.value.orderNumber}<br /></#if>
      <#if case.value.productNumber != 'null'>Product Number: ${case.value.productNumber}<br /></#if>
      <#if case.value.serialNumber != 'null'>Serial Number: ${case.value.serialNumber}<br /></#if>
      <#if caseFileTitle.value??>File: ${caseFileTitle.value}<br /></#if>
      Description: ${case.value.issue}"
      keepTurn: true
    transitions:
      next: proceedCasePrompt

  showCaseDataSSL:
    component: System.Output
    properties:
      text: "Name: ${case.value.firstName} ${case.value.lastName}<br />Email: ${case.value.email?lower_case}<br />Category: ${caseSSCategoryName.value}<br />Serial Number: ${case.value.serialNumber}<br />"
      keepTurn: true
  caseSetResetOptionsSSL:
    component: "System.SetVariable"
    properties:
      insightsInclude: false
      variable: caseResetOptions
      value: "Email, Category, Serial Number, Reset All Fields"
    transitions:
      next: proceedCasePrompt

  caseHelpGuide:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      autoNumberPostbackActions: "false"
      maxPrompts: 2
      metadata:
        responseItems:
          - type: text
            text: "${rb.actionKeywords}"
            actions:
              - label: "Ask another question"
                type: postback
                keyword: "a,A,startover,reset,restart"
                payload:
                  action: "startOver"
              - label: "Go back"
                type: postback
                keyword: "b,B,back"
                payload:
                  action: "goBack"
    transitions:
      next: intent
      actions:
        startOver: resetConversation
        goBack: resetCase #todo: resetCase
        match: hiddenAction
        cancel: errorOutput

  proceedCasePrompt:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      autoNumberPostbackActions: "false"
      maxPrompts: 2
      metadata:
        responseItems:
          - type: text
            text: "Are the details above correct?"
            actions:
              - label: "Yes"
                type: postback
                keyword: "a,A,y,Y"
                payload:
                  action: "Yes"
              - label: "No"
                type: postback
                keyword: "b,B,n,N"
                payload:
                  action: "No"
    transitions:
      next: intent
      actions:
        Yes: createCasePrompt
        No: caseResetTemp
        match: hiddenAction
        cancel: errorOutput

  caseResetTemp:
    component: System.ResetVariables
    properties:
      insightsInclude: false
      variableList: "caseTemp,caseSSCategoryResetAll,requestActivationCode"
  caseSelectReset:
    component: "System.List"
    properties:
      options: "${caseResetOptions}"
      prompt: "Which do you want to correct"
    transitions:
      next: intent
      actions:
        "Email": caseResetEmail
        "Category": isCaseResetCategorySSL
        "RMA Number": caseResetRma
        "Order Number": caseResetOrder
        "Product Number": caseResetProduct
        "Serial Number": isCaseResetSerialSSL
        "Description": caseResetDescription
        "Reset All Fields": isCaseResetAllFromSSL

  caseResetEmail:
    component: "System.Text"
    properties:
      prompt: "Please enter your email address"
      variable: "caseTemp"
  caseResetEmailValue:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: "case.email"
      value: "${caseTemp.value}"
  isCaseResetEmailSSL:
    component: System.ConditionExists
    properties:
      insightsInclude: false
      variable: requestFromSS
    transitions:
      actions:
        exists: showCaseDataSSL
        notexists: showCaseData

  isCaseResetCategorySSL:
    component: System.Switch
    properties:
      insightsInclude: false
      variable: requestFromSS
      values:
        - "surroundSound"
        - "surroundSoundLaunch"
        - "ssTs1"
    transitions:
      actions:
        surroundSound: surroundSoundCategoryPrompt
        surroundSoundLaunch: surroundSoundCategoryPrompt
        ssTs1: surroundSoundCategoryPrompt
        NONE: caseResetCategory

  caseResetCategory:
    component: System.ResetVariables
    properties:
      variableList: "case.category,case.orderNumber,case.productNumber,case.rmaNumber,case.serialNumber,caseProductId,caseCategory"
    transitions:
      next: "casePrompt"

  caseResetRma:
    component: "System.Text"
    properties:
      prompt: "Please enter your RMA number"
      variable: "caseTemp"
  caseResetRmaValue:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: "case.rmaNumber"
      value: "${caseTemp.value}"
    transitions:
      next: "showCaseData"

  caseResetOrder:
    component: "System.Text"
    properties:
      prompt: "Please enter your order number"
      variable: "caseTemp"
  caseResetOrderValue:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: "case.orderNumber"
      value: "${caseTemp.value}"
    transitions:
      next: "showCaseData"

  caseResetProduct:
    component: "System.Text"
    properties:
      prompt: "Please enter your product number"
      variable: "caseTemp"
  caseResetProductValue:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: "case.productNumber"
      value: "${caseTemp.value}"
    transitions:
      next: "showCaseData"

  isCaseResetSerialSSL:
    component: System.ConditionExists
    properties:
      insightsInclude: false
      variable: requestFromSS
    transitions:
      actions:
        exists: caseResetSerialSSL
        notexists: caseResetSerial

  caseResetSerial:
    component: System.ResetVariables
    properties:
      variableList: "case.serialNumber"
  caseResetSerialNoFile:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: caseReset
      value: true
    transitions:
      next: "caseForm"

  caseResetSerialSSL:
    component: System.Text
    properties:
      prompt: "Please enter the serial number of your headset"
      variable: caseTemp
  caseResetSerialSSLValidation:
    component: "osvc.ValidateSerial"
    properties:
      serial: "${caseTemp.value}"
      product: 856
    transitions:
      actions:
        invalid: caseResetSerialSSLCopy
        valid: caseResetSerialSSLSetVar
  caseResetSerialSSLCopy:
    component: System.CopyVariables
    properties:
      from: caseTemp
      to: serialNumberTemp
  caseResetSerialSSLReset:
    component: System.ResetVariables
    properties:
      variableList: "caseTemp"
  caseResetSerialSSLValidationReprompt:
    component: System.Text
    properties:
      prompt: "In order to help you get an activation code, please enter a valid serial number. We were not able to validate <b>${serialNumberTemp}</b>."
      variable: caseTemp
    transitions:
      next: caseResetSerialSSLValidation

  caseResetSerialSSLSetVar:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: case.serialNumber
      value: "${caseTemp.value}"
    transitions:
      next: showCaseDataSSL

  caseResetDescription:
    component: "System.Text"
    properties:
      prompt: "Please describe your issue (max 500 characters)"
      variable: "caseTemp"
  caseResetIssueValue:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: "case.issue"
      value: "${caseTemp.value}"
    transitions:
      next: "showCaseData"

  isCaseResetAllFromSSL:
    component: System.ConditionExists
    properties:
      insightsInclude: false
      variable: requestFromSS
    transitions:
      actions:
        exists: caseResetAllSSL
        notexists: caseResetAll
  caseResetAll:
    component: System.ResetVariables
    properties:
      insightsInclude: false
      variableList: "case.email,case.category,case.orderNumber,case.productNumber,case.rmaNumber,case.serialNumber,case.issue,caseProductId,caseCategory"
    transitions:
      next: resetCase
  caseResetAllSSL:
    component: "System.Text"
    properties:
      prompt: "Please enter your email address"
      variable: caseTemp
  caseResetAllEmail:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: "case.email"
      value: "${caseTemp.value}"
  caseResetAllSetConditionVar:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: "caseSSCategoryResetAll"
      value: "surroundSound"
  caseResetAllTemp:
    component: System.ResetVariables
    properties:
      insightsInclude: false
      variableList: "caseTemp"
  caseResetAllSetSerial:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: serialNumber
      value: "-"
  isCaseResetAllFromSSL2:
    component: System.ConditionEquals
    properties:
      variable: requestFromSS
      value: "surroundSoundLaunch"
    transitions:
      actions:
        equal: surroundSoundCategoryPrompt
        notequal: surroundSoundCategoryPrompt

  createCasePrompt:
    component: System.Output
    properties:
      text: "Please wait while we create your case…"
      keepTurn: true
    transitions:
      next: "caseFindContact"

  caseFindContact:
    component: "osvc.FindContact"
    properties:
      userEmail: "${case.value.email?lower_case}"
      sessionId: "${system.message.channelConversation.sessionId}"
    transitions:
      actions:
        fail: "apiFailed"
        notFound: "caseCreateContact"
        found: "createCase"

  caseCreateContact:
    component: "osvc.CreateContact"
    properties:
      userEmail: "${case.value.email?lower_case}"
      userFirstName: "${case.value.firstName}"
      userLastName: "${case.value.lastName}"
    transitions:
      actions:
        fail: "apiFailed"
        notCreated: "apiFailed"
        created: "createCase"

  createCase:
    component: "System.ConditionEquals"
    properties:
      variable: "hasCaseFile"
      value: true
    transitions:
      actions:
        equal: "createCaseWithFile"
        notequal: "createCaseWithoutFile"

  createCaseWithFile:
    component: "osvc.CreateCase"
    properties:
      contactId: "${contactId}"
      caseSubject: "${system.config.caseSubject}"
      problemId: "${case.value.category}"
      categoryId: "${caseCategoryId}"
      rmaNumber: "${case.value.rmaNumber}"
      orderNumber: "${case.value.orderNumber}"
      serialNumber: "${case.value.serialNumber}"
      productNumber: "${case.value.productNumber}"
      issue: "${case.value.issue}"
      region: "${system.config.region}"
      chatSessionId: "${profile.contactInfo.value.sessionId}"
      fileLocalFName: "${caseFile.value}"
      fileUserFName: "${caseFileTitle.value}"
      fileContentType: "${caseFileType.value}"
      privateNotes: "${(casePrivateNotes.value)!''}"
    transitions:
      actions:
        fail: "apiFailed"
        notCreated: "apiFailed"
        created: "setCaseIncidentId"

  createCaseWithoutFile:
    component: "osvc.CreateCase"
    properties:
      contactId: "${contactId}"
      caseSubject: "${system.config.caseSubject}"
      problemId: "${case.value.category}"
      categoryId: "${caseCategoryId}"
      rmaNumber: "${case.value.rmaNumber}"
      orderNumber: "${case.value.orderNumber}"
      serialNumber: "${case.value.serialNumber}"
      productNumber: "${case.value.productNumber}"
      issue: "${case.value.issue}"
      region: "${system.config.region}"
      chatSessionId: "${profile.contactInfo.value.sessionId}"
      fileLocalFName: ""
      fileUserFName: ""
      fileContentType: ""
      privateNotes: "${(casePrivateNotes.value)!''}"
    transitions:
      actions:
        fail: "apiFailed"
        notCreated: "apiFailed"
        created: "setCaseIncidentId"

  setCaseIncidentId:
    component: "osvc.SetIncidentOnChat"
    properties:
      incidentId: "${caseIncidentId}"
      chatSessionId: "${profile.contactInfo.value.sessionId}"
    transitions:
      actions:
        incidentSetOnChat: "caseCreated"
        fail: "apiFailed"

  caseCreated:
    component: System.Output
    properties:
      text: "A case was successfully created. Your case number is ${caseReferenceNumber}. You should receive an email with the case details. You can get your RMA and case status 24/7 from ${rb.accountPortal}. If you need to contact us in the future, please reference your case number ${caseReferenceNumber} for faster service."
      keepTurn: true
  setCaseCreated:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: user.caseCreated
      value: true
  caseExit:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      autoNumberPostbackActions: "false"
      maxPrompts: 2
      metadata:
        responseItems:
          - type: text
            text: "You can ask another question or end our session."
            actions:
              - label: Ask another question
                type: postback
                keyword: "startover,reset,restart"
                payload:
                  action: startOver
              - label: End session
                type: postback
                keyword: "end,quit,exit,bye"
                payload:
                  action: endChat
    transitions:
      next: intent
      actions:
        startOver: resetConversation
        endChat: endPrompt
        match: hiddenAction
        cancel: errorOutput

  #############################################
  ############# RAZER KISHI START #############

  kishiGrips:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      translate: false
      metadata:
        responseItems:
          - type: text
            text: "${rb('questionAbout','Razer Kishi')}"
            actions:
              - label: "How to update the firmware on a Razer Kishi"
                type: postback
                keyword: "a,A,fw,firmware"
                payload:
                  action: firmware
              - label: "List of compatible devices for Razer Kishi and Kishi V2"
                type: postback
                keyword: "b,B,devices supported,devices"
                payload:
                  action: devices
              - label: "Help attach grips on a Razer Kishi for Android and Razer phones"
                type: postback
                keyword: "c,C,android,razer"
                payload:
                  action: android
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      autoNumberPostbackActions: "false"
      maxPrompts: 2
    transitions:
      next: intent
      actions:
        firmware: kishiFirmware
        devices: kishiGripsSupport
        android: kishiGripsRP2Android
        match: hiddenAction
        cancel: errorOutput

  kishiFirmware:
    component: System.Output
    properties:
      text: "${rb.kishiFirmware}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  kishiGripsSupport:
    component: System.Output
    properties:
      text: "${rb.kishiGripsSupport}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  kishiGripsRP2Android:
    component: System.Output
    properties:
      text: "${rb.kishiGripsRP2Android}"
      keepTurn: true
  quickAnswerKishi:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: user.journey
      value: true
  quickTypeKishi:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: user.chatType
      value: "TS1"
  resolvekishiGripsRP2Android:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      autoNumberPostbackActions: "false"
      maxPrompts: 2
      metadata:
        responseItems:
          - type: text
            text: "Did I answer your question?"
            actions:
              - label: "Yes"
                type: postback
                keyword: "a,A,y,Y"
                payload:
                  action: "Yes"
              - label: "No"
                type: postback
                keyword: "b,B,n,N"
                payload:
                  action: "No"
              - label: "No - Connect to an agent"
                type: postback
                keyword: "c,C,agent"
                payload:
                  action: "agent"
    transitions:
      next: intent
      actions:
        Yes: queryResolved
        No: checkTryCount
        agent: startChat
        match: hiddenAction
        cancel: errorOutput

  ############## RAZER KISHI END ##############
  #############################################

  #############################################
  ########## RAZER CORTEX FLOW START ##########

  RazerCortex.quickAnswerTS1:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: user.journey
      value: true
  RazerCortex.quickAnswerTS1SetCaseCreationState:
    component: System.SetVariable
    properties:
      variable: "caseCreationState"
      value: "setCaseFirstName"
  RazerCortex.quickTypeTS1:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: user.chatType
      value: "TS1"

  RazerCortex.askVersion:
    component: "System.CommonResponse"
    properties:
      processUserMessage: true
      keepTurn: false
      transitionAfterMatch: true
      maxPrompts: 2
      autoNumberPostbackActions: false
      metadata:
        responseItems:
          - text: What version of Cortex are you using?
            type: text
            actions:
              - label: Cortex 9
                type: postback
                payload:
                  action: cortex9
                keyword: "1,cortex9"
              - label: Cortex 10
                type: postback
                payload:
                  action: cortex10
                keyword: "2,cortex10"
    transitions:
      next: "intent"
      actions:
        cortex9: "RazerCortex.outputCortex9TopFaq"
        cortex10: "RazerCortex.outputCortex10TopFaq"
        match: "hiddenAction"

  RazerCortex.outputCortex9TopFaq:
    component: "System.Output"
    properties:
      keepTurn: true
      text: "${rb.cortex9TopFaq}"
    transitions:
      next: "RazerCortex.askIsCortex9QuestionAnswered1"

  RazerCortex.askIsCortex9QuestionAnswered1:
    component: "System.CommonResponse"
    properties:
      processUserMessage: true
      keepTurn: false
      transitionAfterMatch: true
      maxPrompts: 2
      autoNumberPostbackActions: false
      metadata:
        responseItems:
          - text: "Did I answer your question?"
            type: text
            actions:
              - payload:
                  action: "yes"
                label: "Yes"
                type: postback
                keyword: "1"
              - payload:
                  action: "no"
                label: "No"
                type: postback
                keyword: "2"
    transitions:
      next: "intent"
      actions:
        yes: "queryResolved"
        no: "RazerCortex.outputQueryNotResolved"

  RazerCortex.outputCortex10TopFaq:
    component: "System.Output"
    properties:
      text: "${rb.cortex10TopFaq}"
      keepTurn: true
    transitions:
      next: "RazerCortex.askIsCortex10QuestionAnswered1"

  RazerCortex.askIsCortex10QuestionAnswered1:
    component: "System.CommonResponse"
    properties:
      processUserMessage: true
      keepTurn: false
      transitionAfterMatch: true
      maxPrompts: 2
      autoNumberPostbackActions: false
      metadata:
        responseItems:
          - text: "Did I answer your question?"
            type: text
            actions:
              - label: "Yes"
                type: postback
                payload:
                  action: "yes"
                keyword: "1"
              - label: "No"
                type: postback
                payload:
                  action: "no"
                keyword: "2"
    transitions:
      next: "intent"
      actions:
        yes: "queryResolved"
        no: "RazerCortex.askCortex10Issue"

  RazerCortex.askCortex10Issue:
    component: "System.CommonResponse"
    properties:
      processUserMessage: true
      keepTurn: false
      transitionAfterMatch: true
      maxPrompts: 2
      autoNumberPostbackActions: false
      metadata:
        responseItems:
          - text: What is the possible issue?
            type: text
            actions:
              - payload:
                  action: ctrlShiftDown
                label: Unable to use Ctrl + Shift + Down on Excel with Cortex
                type: postback
                keyword: "1"
              - payload:
                  action: fpsOverlay
                label: How to turn on/off FPS overlay
                type: postback
                keyword: "2"
              - payload:
                  action: unableToLaunch
                label: Unable to launch
                type: postback
                keyword: "3"
              - payload:
                  action: overlayLag
                label: Cortex FPS overlay making my games lag
                type: postback
                keyword: "4"
              - payload:
                  action: notListed
                label: My issue/question is not listed
                type: postback
                keyword: "5"

    transitions:
      next: "intent"
      actions:
        ctrlShiftDown: "RazerCortex.outputCortex10Issue1"
        fpsOverlay: "RazerCortex.outputCortex10Issue2"
        unableToLaunch: "RazerCortex.outputCortex10Issue3"
        overlayLag: "RazerCortex.outputCortex10Issue4"
        notListed: "RazerCortex.outputCortex10Issue5"

  RazerCortex.outputCortex10Issue1:
    component: "System.Output"
    properties:
      keepTurn: true
      text: "Go to Cortex > Settings > Hotkeys. Reassign or unassign \"Start new timer\" hotkey"
    transitions:
      next: "RazerCortex.askCortex10IsQuestionAnswered2"

  RazerCortex.outputCortex10Issue2:
    component: "System.Output"
    properties:
      keepTurn: true
      text: "Go to Game Booster > In Game tab, toggle the Custom Display option."
    transitions:
      next: "RazerCortex.askCortex10IsQuestionAnswered2"

  RazerCortex.outputCortex10Issue3:
    component: "System.Output"
    properties:
      keepTurn: true
      text: "Ensure that you are logged into Razer Cortex with a Razer ID or guest account. Or you can repair Razer Cortex by following this <a href=\"https://mysupport.razer.com/app/answers/detail/a_id/6106?utm_source=chatbot_mysupport&utm_medium=chat&utm_campaign=rzchatbot&s=oda\" target=\"_blank\">guide</a>."
    transitions:
      next: "RazerCortex.askCortex10IsQuestionAnswered2"

  RazerCortex.outputCortex10Issue4:
    component: "System.Output"
    properties:
      keepTurn: true
      text: "Try turning off the Cortex FPS overlay. Go to Game Booster > In Game tab, toggle the Custom Display option"
    transitions:
      next: "RazerCortex.askCortex10IsQuestionAnswered2"

  RazerCortex.outputCortex10Issue5:
    component: "System.Text"
    properties:
      prompt: "Please describe your issue/question"
      variable: "cortexIssue"
    transitions:
      next: "RazerCortex.outputQueryNotResolved"

  RazerCortex.askCortex10IsQuestionAnswered2:
    component: "System.CommonResponse"
    properties:
      processUserMessage: true
      keepTurn: false
      transitionAfterMatch: true
      maxPrompts: 2
      autoNumberPostbackActions: false
      metadata:
        responseItems:
          - text: "Did I answer your question?"
            type: text
            actions:
              - payload:
                  action: "yes"
                label: "Yes"
                type: postback
                keyword: "1"
              - payload:
                  action: "no"
                label: "No"
                type: postback
                keyword: "2"
    transitions:
      next: "intent"
      actions:
        yes: "queryResolved"
        no: "RazerCortex.outputQueryNotResolved"

  RazerCortex.outputQueryNotResolved:
    component: "System.CommonResponse"
    properties:
      processUserMessage: true
      keepTurn: false
      transitionAfterMatch: true
      maxPrompts: 2
      autoNumberPostbackActions: false
      metadata:
        responseItems:
          - text: "I am sorry I wasn't able to answer your question. There are several ways to contact us for support. Please select an option below."
            type: text
            actions:
              - skipAutoNumber: true
                payload:
                  action: ticket
                label: Submit a support ticket
                type: postback
                keyword: "1"
              - skipAutoNumber: true
                payload:
                  action: agent
                label: Connect to an agent
                type: postback
                keyword: "2"
              - skipAutoNumber: true
                payload:
                  action: askQuestion
                label: Ask another question
                type: postback
                keyword: "3"
    transitions:
      next: "intent"
      actions:
        ticket: "initiateCaseCreation"
        agent: "startChat"
        askQuestion: "questionPath"

  ########### RAZER CORTEX FLOW END ###########
  #############################################

  #############################################
  ########### RAZER AXON FLOW START ###########

  RazerAxon.quickAnswerTS1:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: user.journey
      value: true
  RazerAxon.quickAnswerTS1SetCaseCreationState:
    component: System.SetVariable
    properties:
      variable: "caseCreationState"
      value: "setCaseFirstName"

  RazerAxon.quickTypeTS1:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: user.chatType
      value: "TS1"
  RazerAxon.askIssue:
    component: "System.CommonResponse"
    properties:
      processUserMessage: true
      keepTurn: false
      transitionAfterMatch: true
      maxPrompts: 2
      autoNumberPostbackActions: false
      metadata:
        responseItems:
          - text: "${rb('questionAbout','Razer Axon')}"
            type: text
            actions:
              - payload:
                  action: "redeemWallpaper"
                label: "How do I redeem a wallpaper?"
                type: postback
                keyword: "1"
              - payload:
                  action: "badPerformance"
                label: "Razer Axon causing bad performance, playback, stuttering, or serious lag"
                type: postback
                keyword: "2"
              - payload:
                  action: "setWallpapers"
                label: "Can I set wallpapers for multiple monitors?"
                type: postback
                keyword: "3"
              - payload:
                  action: "oneWallpaper"
                label: "Can I have 1 wallpaper set across multiple monitors?"
                type: postback
                keyword: "4"
              - payload:
                  action: "unableToRedeem"
                label: "Why am I unable to redeem wallpapers?"
                type: postback
                keyword: "5"
    transitions:
      next: "intent"
      actions:
        redeemWallpaper: "RazerAxon.outputAxonRedeemWallpaper"
        badPerformance: "RazerAxon.outputAxonBadPerformance"
        setWallpapers: "RazerAxon.outputAxonMultipleWallpapers"
        oneWallpaper: "RazerAxon.outputAxonOneWallpaper"
        unableToRedeem: "RazerAxon.outputAxonUnableToRedeemWallpaper"

  RazerAxon.outputAxonRedeemWallpaper:
    component: "System.Output"
    properties:
      keepTurn: true
      text: "Within Razer Axon, click on the image thumbnails, choose your preferred resolution and click on \"Download\" to get the wallpaper."
    transitions:
      next: "RazerAxon.askIsQuestionAnswered"

  RazerAxon.outputAxonBadPerformance:
    component: "System.Output"
    properties:
      keepTurn: true
      text: "Try setting auto-pause modes in the settings or reduce the number of playbacks on your screens. It is advisable that all your monitors are plugged into the dedicated graphics card."
    transitions:
      next: "RazerAxon.askIsQuestionAnswered"

  RazerAxon.outputAxonMultipleWallpapers:
    component: "System.Output"
    properties:
      keepTurn: true
      text: "Yes. Razer Axon supports multiple monitors. You can set different wallpapers or clone the wallpaper on multiple monitors."
    transitions:
      next: "RazerAxon.askIsQuestionAnswered"

  RazerAxon.outputAxonOneWallpaper:
    component: "System.Output"
    properties:
      keepTurn: true
      text: "Razer Axon does not support single wallpaper sharing across multiple monitors currently. However, you can still set different wallpapers across multiple monitors or choose to have the same wallpaper duplicated across multiple monitors."
    transitions:
      next: "RazerAxon.askIsQuestionAnswered"

  RazerAxon.outputAxonUnableToRedeemWallpaper:
    component: "System.Output"
    properties:
      keepTurn: true
      text: "Ensure that you logged into your Razer ID account and have a sufficient Razer Silver balance in your Razer wallet."
    transitions:
      next: "RazerAxon.askIsQuestionAnswered"

  RazerAxon.askIsQuestionAnswered:
    component: "System.CommonResponse"
    properties:
      processUserMessage: true
      keepTurn: false
      transitionAfterMatch: true
      maxPrompts: 2
      autoNumberPostbackActions: false
      metadata:
        responseItems:
          - text: "Did I answer your question?"
            type: text
            actions:
              - payload:
                  action: "yes"
                label: "Yes"
                type: postback
                keyword: "1"
              - payload:
                  action: "no"
                label: "No"
                type: postback
                keyword: "2"
    transitions:
      next: "intent"
      actions:
        yes: "queryResolved"
        no: "RazerAxon.outputQueryNotResolved"

  RazerAxon.outputQueryNotResolved:
    component: "System.CommonResponse"
    properties:
      processUserMessage: true
      keepTurn: false
      transitionAfterMatch: true
      maxPrompts: 2
      autoNumberPostbackActions: false
      metadata:
        responseItems:
          - text: "I am sorry I wasn't able to answer your question. There are several ways to contact us for support. Please select an option below."
            type: text
            actions:
              - skipAutoNumber: true
                payload:
                  action: ticket
                label: Submit a support ticket
                type: postback
                keyword: "1"
              - skipAutoNumber: true
                payload:
                  action: agent
                label: Connect to an agent
                type: postback
                keyword: "2"
              - skipAutoNumber: true
                payload:
                  action: askQuestion
                label: Ask another question
                type: postback
                keyword: "3"

    transitions:
      next: "intent"
      actions:
        ticket: "initiateCaseCreation"
        agent: "startChat"
        askQuestion: "questionPath"

  ############ RAZER AXON FLOW END ############
  #############################################

  #############################################
  ########## RAZER BLUE SCREEN START ##########

  blueScreen:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      translate: false
      metadata:
        responseItems:
          - type: text
            text: "${rb('questionAbout','Razer Blue Screen')}"
            actions:
              - label: "How to set up the Razer Blue Screen"
                type: postback
                keyword: "1,a"
                payload:
                  action: setup
              - label: "How to keep the Razer Blue Screen"
                type: postback
                keyword: "2,b"
                payload:
                  action: keep
              - label: "How to take care of the Razer Blue Screen"
                type: postback
                keyword: "3,c"
                payload:
                  action: care
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      autoNumberPostbackActions: "false"
      maxPrompts: 2
    transitions:
      next: intent
      actions:
        setup: blueScreenSetup
        keep: blueScreenKeep
        care: blueScreenCare
        match: hiddenAction
        cancel: errorOutput

  blueScreenSetup:
    component: System.Output
    properties:
      text: "${rb.blueScreenSetup}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  blueScreenKeep:
    component: System.Output
    properties:
      text: "${rb.blueScreenKeep}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  blueScreenCare:
    component: System.Output
    properties:
      text: "${rb.blueScreenCare}"
      keepTurn: true
    transitions:
      next: quickAnswerTS1

  ########### RAZER BLUE SCREEN END ###########
  #############################################

  #############################################
  ########### RAZER ORDER COM START ###########

  RazerComOrder.start:
    component: "System.CommonResponse"
    properties:
      processUserMessage: true
      keepTurn: false
      transitionAfterMatch: true
      maxPrompts: 2
      autoNumberPostbackActions: false
      metadata:
        responseItems:
          - text: "How can we help you with your razer.com order?"
            type: "text"
            actions:
              - skipAutoNumber: true
                payload:
                  action: "orderStatus"
                label: "Order Status"
                type: postback
                keyword: "1"
              - skipAutoNumber: true
                payload:
                  action: "refund"
                label: "Return for refund"
                type: postback
                keyword: "2"
              - skipAutoNumber: true
                payload:
                  action: "cancelOrder"
                label: "Cancel or change my order"
                type: postback
                keyword: "3"
              - skipAutoNumber: true
                payload:
                  action: "technicalSupport"
                label: "Technical support for my product"
                type: postback
                keyword: "4"

    transitions:
      next: "intent"
      actions:
        orderStatus: "RazerComOrder.outputOrderStatus"
        refund: "RazerComOrder.askIsOrderFromRazer"
        cancelOrder: "RazerComOrder.outputCancelOrder"
        technicalSupport: "technicalSupport"

  RazerComOrder.outputOrderStatus:
    component: "System.Output"
    properties:
      keepTurn: true
      text: "You can get your order status from the link below <br /> <ul><li><a href='https://www.razer.com/my-account/orders' target='_blank'>Get razer.com order status</a></li></ul>"
    transitions:
      next: "RazerComOrder.askIsQuestionAnsweredForRefund"

  RazerComOrder.outputCancelOrder:
    component: "System.Output"
    properties:
      keepTurn: true
      text: "${rb.cancelOrder}"
    transitions:
      next: "RazerComOrder.askIsQuestionAnsweredForCancel"

  RazerComOrder.askIsQuestionAnsweredForRefund:
    component: "System.CommonResponse"
    properties:
      processUserMessage: true
      keepTurn: false
      transitionAfterMatch: true
      maxPrompts: 2
      autoNumberPostbackActions: false
      metadata:
        responseItems:
          - text: "Did I answer your question?"
            type: text
            actions:
              - payload:
                  action: "yes"
                label: "Yes"
                type: postback
                keyword: "1"
              - payload:
                  action: "no"
                label: "No"
                type: postback
                keyword: "2"
    transitions:
      next: "intent"
      actions:
        yes: "queryResolved"
        no: "RazerComOrder.outputQueryNotResolved"

  RazerComOrder.askIsQuestionAnsweredForCancel:
    component: "System.CommonResponse"
    properties:
      processUserMessage: true
      keepTurn: false
      transitionAfterMatch: true
      maxPrompts: 2
      autoNumberPostbackActions: false
      metadata:
        responseItems:
          - text: "Did I answer your question?"
            type: text
            actions:
              - payload:
                  action: "yes"
                label: "Yes"
                type: postback
                keyword: "1"
              - payload:
                  action: "no"
                label: "No"
                type: postback
                keyword: "2"
    transitions:
      next: "intent"
      actions:
        yes: "queryResolved"
        no: "RazerComOrder.outputCancelNotice"

  RazerComOrder.outputCancelNotice:
    component: "System.Output"
    properties:
      keepTurn: true
      text: "Before we connect you to an agent or create a support case, we'll need the order number and postal code used in the order."
    transitions:
      next: "RazerComOrder.askOrderNumberForCancel"

  RazerComOrder.askOrderNumberForCancel:
    component: "System.Text"
    properties:
      prompt: "Please enter your order number"
      variable: "razerComOrder_orderNumber"
    transitions:
      next: "RazerComOrder.askPostalCodeForCancel"

  RazerComOrder.askPostalCodeForCancel:
    component: "System.Text"
    properties:
      prompt: "Please enter the postal code from the order"
      variable: "razerComOrder_postalCode"
    transitions:
      next: "RazerComOrder.askCancelOrChange"

  # RazerComOrder.askCancelOrChange:
  #   component: "System.Text"
  #   properties:
  #     prompt: "Please indicate if you'd like to cancel or change your order"
  #     variable: "razerComOrder_reason"
  #   transitions:
  #     next: "RazerComOrder.clearCasePrivateNotesForCancel"

  RazerComOrder.askCancelOrChange:
    component: "System.CommonResponse"
    properties:
      maxPrompts: 2
      processUserMessage: true
      keepTurn: false
      metadata:
        responseItems:
          - type: "text"
            text: "Please indicate if you'd like to cancel or change your order"
            actions:
              - label: "Cancel"
                type: "postback"
                keyword: "a,A"
                payload:
                  action: ""
                  variables:
                    razerComOrder_reason: "cancel"
              - label: "Change"
                type: "postback"
                keyword: "b,B"
                payload:
                  action: ""
                  variables:
                    razerComOrder_reason: "change"
    transitions:
      next: "RazerComOrder.clearCasePrivateNotesForCancel"

  RazerComOrder.clearCasePrivateNotesForCancel:
    component: "System.SetVariable"
    properties:
      insightsInclude: false
      variable: casePrivateNotes
      value: ""

  RazerComOrder.prefillCasePrivateNotesForCancel:
    component: "System.SetVariable"
    properties:
      insightsInclude: false
      variable: casePrivateNotes
      value: "${casePrivateNotes} + User has read refund/return policy: Yes \n + User purchased from razer.com in: NA \n + Order Number: ${razerComOrder_orderNumber.value} \n + Postal Code: ${razerComOrder_postalCode.value} \n + Cancel or change your order: ${razerComOrder_reason.value}"

  RazerComOrder.prefillIssueForCancel:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: "case.issue"
      value: "Cancel or change order"
    transitions:
      next: "RazerComOrder.outputContactOptions"

  RazerComOrder.outputQueryNotResolved:
    component: "System.CommonResponse"
    properties:
      processUserMessage: true
      keepTurn: false
      transitionAfterMatch: true
      maxPrompts: 2
      autoNumberPostbackActions: false
      metadata:
        responseItems:
          - text: "I am sorry I wasn't able to answer your question. There are several ways to contact us for support. Please select an option below."
            type: text
            actions:
              - skipAutoNumber: true
                payload:
                  action: ticket
                label: Submit a support ticket
                type: postback
                keyword: "1"
              - skipAutoNumber: true
                payload:
                  action: agent
                label: Connect to an agent
                type: postback
                keyword: "2"
              - skipAutoNumber: true
                payload:
                  action: askQuestion
                label: Ask another question
                type: postback
                keyword: "3"

    transitions:
      next: "intent"
      actions:
        ticket: "initiateCaseCreation"
        agent: "RazerComOrder.quickAnswerCS"
        askQuestion: "questionPath"

  RazerComOrder.askIsOrderFromRazer:
    component: "System.CommonResponse"
    properties:
      processUserMessage: true
      keepTurn: false
      transitionAfterMatch: true
      maxPrompts: 2
      autoNumberPostbackActions: false
      metadata:
        responseItems:
          - text: "Is your order from razer.com?"
            type: text
            actions:
              - skipAutoNumber: true
                payload:
                  action: "yes"
                label: "Yes"
                type: postback
                keyword: "1"
              - skipAutoNumber: true
                payload:
                  action: "no"
                label: "No"
                type: postback
                keyword: "2"
    transitions:
      next: "intent"
      actions:
        yes: "RazerComOrder.askFromUS"
        no: "RazerComOrder.outputOrderNotFromRazer"

  RazerComOrder.outputOrderNotFromRazer:
    component: "System.CommonResponse"
    properties:
      processUserMessage: true
      keepTurn: false
      transitionAfterMatch: true
      maxPrompts: 2
      autoNumberPostbackActions: false
      metadata:
        responseItems:
          - text: "Our return and refund policies are different based on where you purchased your Razer product. Please see our <a href='https://www.razer.com/legal/returns-refunds' target='_blank'>return policy</a> for details. If you believe your product is defective, please contact us for assistance."
            type: text
            actions:
              - skipAutoNumber: true
                payload:
                  url: "https://www.razer.com/legal/returns-refunds"
                label: "View return policy"
                type: "url"
                keyword: "1"
              - skipAutoNumber: true
                payload:
                  action: "agent"
                label: "Connect to an agent"
                type: postback
                keyword: "2"
              - skipAutoNumber: true
                payload:
                  action: "ticket"
                label: "Submit a Support Ticket"
                type: postback
                keyword: "3"
    transitions:
      next: "intent"
      actions:
        return: "RazerComOrder.askFromUS"
        agent: "RazerComOrder.quickAnswerCS"
        ticket: "initiateCaseCreation"

  RazerComOrder.askFromUS:
    component: "System.CommonResponse"
    properties:
      processUserMessage: true
      keepTurn: false
      transitionAfterMatch: true
      maxPrompts: 2
      autoNumberPostbackActions: false
      metadata:
        responseItems:
          - text: "Did you order from US or Canada?"
            type: text
            actions:
              - skipAutoNumber: true
                payload:
                  action: "yes"
                label: "Yes"
                type: postback
                keyword: "1"
              - skipAutoNumber: true
                payload:
                  action: "no"
                label: "No"
                type: postback
                keyword: "2"
    transitions:
      next: "intent"
      actions:
        yes: "RazerComOrder.askDaysAgo"
        no: "RazerComOrder.askDaysAgo"

  RazerComOrder.askDaysAgo:
    component: "System.CommonResponse"
    properties:
      processUserMessage: true
      keepTurn: false
      transitionAfterMatch: true
      maxPrompts: 2
      autoNumberPostbackActions: false
      metadata:
        responseItems:
          - text: "Did you receive the product more than 14 days ago?"
            type: text
            actions:
              - skipAutoNumber: true
                payload:
                  action: "yes"
                label: "Yes"
                type: postback
                keyword: "1"
              - skipAutoNumber: true
                payload:
                  action: "no"
                label: "No"
                type: postback
                keyword: "2"
    transitions:
      next: "intent"
      actions:
        yes: "RazerComOrder.outputMore14days"
        no: "RazerComOrder.outputLess14days"

  RazerComOrder.outputLess14days:
    component: "System.Output"
    properties:
      keepTurn: true
      text: "You can initiate your return from the link below. <br /> <ul><li><a href='https://returns.narvar.com/razer/returns' target='_blank'>Start Return for Refund</a></li></ul>"
    transitions:
      next: "RazerComOrder.askIsQuestionAnsweredForRefund"

  RazerComOrder.outputMore14days:
    component: "System.Output"
    properties:
      keepTurn: true
      text: "To expedite your return/refund, we will need the order number and postal code for the order. In addition, please review  <a href='https://www.razer.com/warranty' target='_blank'>Razer's refund/return policy.<a/>"
    transitions:
      next: "RazerComOrder.askOrderNumber"

  RazerComOrder.askOrderNumber:
    component: "System.Text"
    properties:
      prompt: "Please enter your order number"
      variable: "razerComOrder_orderNumber"
    transitions:
      next: "RazerComOrder.askPostalCode"

  RazerComOrder.askPostalCode:
    component: "System.Text"
    properties:
      prompt: "Please enter the postal code from the order"
      variable: "razerComOrder_postalCode"
    transitions:
      next: "RazerComOrder.askReason"

  RazerComOrder.askReason:
    component: "System.Text"
    properties:
      prompt: "Please enter a reason for your return/refund"
      variable: "razerComOrder_reason"
    transitions:
      next: "RazerComOrder.clearCasePrivateNotesForRefund"

  RazerComOrder.clearCasePrivateNotesForRefund:
    component: "System.SetVariable"
    properties:
      insightsInclude: false
      variable: casePrivateNotes
      value: ""

  RazerComOrder.prefillCasePrivateNotesForRefund:
    component: "System.SetVariable"
    properties:
      insightsInclude: false
      variable: casePrivateNotes
      value: "${casePrivateNotes.value} + User has read refund/return policy: Yes \n + User purchased from razer.com in: NA \n + Order Number: ${razerComOrder_orderNumber.value} \n + Postal Code: ${razerComOrder_postalCode.value} \n + Reason: ${razerComOrder_reason.value}"

  RazerComOrder.prefillIssueForRefund:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: "case.issue"
      value: "Return for refund"
    transitions:
      next: "RazerComOrder.outputContactOptions"

  RazerComOrder.outputContactOptions:
    component: "System.CommonResponse"
    properties:
      processUserMessage: true
      keepTurn: false
      transitionAfterMatch: true
      maxPrompts: 2
      autoNumberPostbackActions: false
      metadata:
        responseItems:
          - text: "Please select the contact options below"
            type: text
            actions:
              - skipAutoNumber: true
                payload:
                  action: ticket
                label: Submit a support ticket
                type: postback
                keyword: "1"
              - skipAutoNumber: true
                payload:
                  action: agent
                label: Connect to an agent
                type: postback
                keyword: "2"
    transitions:
      next: "intent"
      actions:
        ticket: "RazerComOrder.checkCaseExists"
        agent: "RazerComOrder.quickAnswerCS"

  RazerComOrder.checkCaseExists:
    component: System.ConditionExists
    properties:
      insightsInclude: false
      variable: user.caseCreated
    transitions:
      actions:
        exists: caseAlreadyCreated
        notexists: "RazerComOrder.quickAnswerCSTry"

  RazerComOrder.quickAnswerCSTry:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: user.secondTry
      value: true
    transitions:
      next: "RazerComOrder.prefillSerialNumber"

  RazerComOrder.quickAnswerCS:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: user.journey
      value: true
  RazerComOrder.quickAnswerCSSetCaseCreationState:
    component: System.SetVariable
    properties:
      variable: "caseCreationState"
      value: "setCaseFirstName"

  RazerComOrder.quickTypeCS:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: user.chatType
      value: "CS"
    transitions:
      next: "checkChatHoops"

  RazerComOrder.prefillSerialNumber:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: "case.serialNumber"
      value: "na"
  RazerComOrder.prefillProductNumber:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: "case.productNumber"
      value: "na"
  RazerComOrder.prefillRMANumber:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: "case.rmaNumber"
      value: "na"
  RazerComOrder.prefillOrderNumber:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: "case.orderNumber"
      value: "${razerComOrder_orderNumber}"
  RazerComOrder.prefillSelectedOption:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: "selectedOption"
      value: "OrderSupport"
  RazerComOrder.prefillFirstName:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: "case.firstName"
      value: "${profile.firstName.value}"
  RazerComOrder.prefillLastName:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: "case.lastName"
      value: "${profile.lastName.value}"
  RazerComOrder.prefillEmail:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: "case.email"
      value: "${profile.email.value}"
  RazerComOrder.prefillContactInfo:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: "contactInfo"
      value: "${profile.contactInfo.value}"
  RazerComOrder.prefillCaseCategoryId:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: case.category
      value: "9"
  RazerComOrder.disallowFileAttachmentPrompt:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: caseReset
      value: true
  RazerComOrder.prefillCaseCategory:
    component: "System.SetVariable"
    properties:
      insightsInclude: false
      variable: caseCategory
      value: "Razer.com Order"
    transitions:
      next: "RazerComOrder.caseResolveEntities"

  RazerComOrder.caseResolveEntities:
    component: "System.ResolveEntities"
    properties:
      variable: case
      nlpResultVariable: iResult
      transitionAfterMatch: true
      useFullEntityMatches: false
    transitions:
      next: "RazerComOrder.showCaseData"
      actions:
        match: "RazerComOrder.caseHiddenAction"

  RazerComOrder.caseHiddenAction:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: "caseEntity"
      value: "${system.entityToResolve.value.name}"

  RazerComOrder.showCaseData:
    component: System.Output
    properties:
      text: "Name: ${case.value.firstName} ${case.value.lastName}<br />Email: ${case.value.email?lower_case}<br />Category: Razer.com Order<br /><#if case.value.orderNumber != 'null'>Order Number: ${case.value.orderNumber}</#if><br /><#if razerComOrder_postalCode.value != 'null'>Postal Code: ${razerComOrder_postalCode.value}<br /></#if>Description: ${case.value.issue}"
      keepTurn: true
    transitions:
      next: "RazerComOrder.casePrompt"

  RazerComOrder.casePrompt:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      autoNumberPostbackActions: "false"
      maxPrompts: 2
      metadata:
        responseItems:
          - type: text
            text: "Are the details above correct?"
            actions:
              - label: "Yes"
                type: postback
                keyword: "a,A,y,Y"
                payload:
                  action: "Yes"
              - label: "No"
                type: postback
                keyword: "b,B,n,N"
                payload:
                  action: "No"
    transitions:
      next: intent
      actions:
        Yes: createCasePrompt
        No: "RazerComOrder.caseResetOptions"
        match: hiddenAction
        cancel: errorOutput

  RazerComOrder.caseResetOptions:
    component: "System.List"
    properties:
      options: "Email, Order Number, Description, Reset"
      prompt: "Which do you want to correct"
    transitions:
      next: intent
      actions:
        "Email": "RazerComOrder.resetEmail"
        "Order Number": "RazerComOrder.resetOrderNumber"
        # "Serial Number": "RazerComOrder.resetSerialNumber"
        "Description": "RazerComOrder.resetDescription"
        "Reset": "RazerComOrder.caseReset"

  RazerComOrder.caseReset:
    component: System.ResetVariables
    properties:
      variableList: "case.orderNumber, razerComOrder_orderNumber, razerComOrder_reason, razerComOrder_postalCode, casePrivateNotes"
    transitions:
      next: "RazerComOrder.start"

  RazerComOrder.resetEmail:
    component: System.ResetVariables
    properties:
      variableList: "case.email"
    transitions:
      next: "RazerComOrder.caseResolveEntities"

  RazerComOrder.resetOrderNumber:
    component: System.ResetVariables
    properties:
      variableList: "case.orderNumber"
    transitions:
      next: "RazerComOrder.caseResolveEntities"

  # RazerComOrder.resetSerialNumber:
  #   component: System.ResetVariables
  #   properties:
  #     variableList: "case.serialNumber"
  #   transitions:
  #     next: "RazerComOrder.caseResolveEntities"

  RazerComOrder.resetDescription:
    component: System.ResetVariables
    properties:
      variableList: "case.issue"
    transitions:
      next: "RazerComOrder.caseResolveEntities"

  #-------- RETURN ORDER START ----------------#
  RazerComOrder.RO_quickAnswerCS:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: user.journey
      value: true
  RazerComOrder.RO_quickTypeCS:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: user.chatType
      value: "CS"
  RazerComOrder.RO_quickAnswerCSTry:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: user.secondTry
      value: true

  RazerComOrder.RO_outputConfirmPrompt:
    component: "System.CommonResponse"
    properties:
      processUserMessage: true
      keepTurn: false
      transitionAfterMatch: true
      maxPrompts: 2
      autoNumberPostbackActions: false
      metadata:
        responseItems:
          - text: "Please confirm you are requesting to return a product you purchase from razer.com for a refund."
            type: text
            actions:
              - skipAutoNumber: true
                payload:
                  action: "yes"
                label: "Yes"
                type: postback
                keyword: "1"
              - skipAutoNumber: true
                payload:
                  action: "no"
                label: "No"
                type: postback
                keyword: "2"
    transitions:
      next: "intent"
      actions:
        yes: "RazerComOrder.outputMore14days"
        no: "RazerComOrder.quickAnswerCS"

  #--------- RETURN ORDER END -----------------#

  #-------- CANCEL ORDER START ----------------#
  RazerComOrder.CO_quickAnswerCS:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: user.journey
      value: true
  RazerComOrder.CO_quickTypeCS:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: user.chatType
      value: "CS"
  RazerComOrder.CO_quickAnswerCSTry:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: user.secondTry
      value: true

  RazerComOrder.CO_outputConfirmPrompt:
    component: "System.CommonResponse"
    properties:
      processUserMessage: true
      keepTurn: false
      transitionAfterMatch: true
      maxPrompts: 2
      autoNumberPostbackActions: false
      metadata:
        responseItems:
          - text: "Please confirm you are requesting to cancel or change your order from razer.com."
            type: text
            actions:
              - skipAutoNumber: true
                payload:
                  action: "yes"
                label: "Yes"
                type: postback
                keyword: "1"
              - skipAutoNumber: true
                payload:
                  action: "no"
                label: "No"
                type: postback
                keyword: "2"
    transitions:
      next: "intent"
      actions:
        yes: "RazerComOrder.outputCancelNotice"
        no: "RazerComOrder.start"

  #--------- CANCEL ORDER END -----------------#

  ########### RAZER ORDER COM END #############
  #############################################

  #############################################
  ############ RAZER EDGE START ###############

  RazerEdge.start:
    component: "System.SetVariable"
    properties:
      variable: "currentFlow"
      value: "Razer Edge"
  #-- PATCH FOR CASE CREATION SPECIFIC FLOWS --#
  RazerEdge.setCaseCreationState:
    component: "System.SetVariable"
    properties:
      variable: "caseCreationState"
      value: "RazerEdge.checkCaseExists"

  RazerEdge.startMenu:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      autoNumberPostbackActions: "false"
      maxPrompts: 2
      metadata:
        responseItems:
          - type: text
            text: "Please let us know what help you need with your Razer Edge below:"
            actions:
              - label: "Set up Razer Edge"
                type: postback
                keyword: "1,a,A, setup razer edge"
                payload:
                  action: "setup"
              - label: "Set up Google Account"
                type: postback
                keyword: "2,b,B,setup google account"
                payload:
                  action: "setupGoogle"
              - label: "Connect or pair to a Bluetooth device "
                type: postback
                keyword: "3,c,C,connect bluetooth,pair bluetooth"
                payload:
                  action: "bluetooth"
              - label: "Adjust refresh rate"
                type: postback
                keyword: "4,d,D,refresh rate"
                payload:
                  action: "refresh"
              - label: "Bluetooth, PC, or internet connection issues"
                type: postback
                keyword: "5,e,E,connection issues"
                payload:
                  action: "connectionIssues"
              - label: "Audio issues"
                type: postback
                keyword: "6,f,F,audio issues"
                payload:
                  action: "audio"
              - label: "Overheating issues"
                type: postback
                keyword: "7,g,G,overheating issues"
                payload:
                  action: "overheating"
    transitions:
      next: intent
      actions:
        setup: RazerEdge.setup
        setupGoogle: RazerEdge.setupGoogle
        bluetooth: RazerEdge.connectBluetooth
        refresh: RazerEdge.adjustRefreshRate
        connectionIssues: RazerEdge.connectionIssues
        audio: RazerEdge.audioIssues
        overheating: RazerEdge.overheatingIssues

  RazerEdge.setup:
    component: System.Output
    properties:
      text: "${rb.razerEdgeSetup}"
      keepTurn: true
    transitions:
      next: RazerEdge.quickAnswerTSEdge

  RazerEdge.setupGoogle:
    component: System.Output
    properties:
      text: "${rb.razerEdgeSetupGoogle}"
      keepTurn: true
    transitions:
      next: RazerEdge.quickAnswerTSEdge

  RazerEdge.connectBluetooth:
    component: System.Output
    properties:
      text: "${rb.razerEdgeConnectBluetooth}"
      keepTurn: true
    transitions:
      next: RazerEdge.quickAnswerTSEdge

  RazerEdge.adjustRefreshRate:
    component: System.Output
    properties:
      text: "${rb.razerEdgeAdjustRefreshRate}"
      keepTurn: true
    transitions:
      next: RazerEdge.quickAnswerTSEdge

  RazerEdge.overheatingIssues:
    component: System.Output
    properties:
      text: "${rb.razerEdgeOverheatingIssues}"
      keepTurn: true
    transitions:
      next: RazerEdge.quickAnswerTSEdge

  RazerEdge.connectionIssues:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      autoNumberPostbackActions: "false"
      maxPrompts: 2
      metadata:
        responseItems:
          - type: text
            text: "For connection issues with your Razer Edge, please make sure your device is up-to-date."
            actions:
              - label: "Connecting to Bluetooth"
                type: postback
                keyword: "1,a,A,bluetooth"
                payload:
                  action: "bluetooth"
              - label: "Connecting to PC"
                type: postback
                keyword: "2,b,B,pc,computer"
                payload:
                  action: "pc"
              - label: "Connecting to the Internet"
                type: postback
                keyword: "3,c,C,internet"
                payload:
                  action: "internet"
    transitions:
      next: intent
      actions:
        bluetooth: RazerEdge.bluetoothConnectionIssues
        pc: RazerEdge.pcConnectionIssues
        internet: RazerEdge.internetConnectionIssues

  RazerEdge.bluetoothConnectionIssues:
    component: System.Output
    properties:
      text: "${rb.razerEdgeBluetoothConnectionIssues}"
      keepTurn: true
    transitions:
      next: RazerEdge.quickAnswerTSEdge

  RazerEdge.internetConnectionIssues:
    component: System.Output
    properties:
      text: "${rb.razerEdgeInternetConnectionIssues}"
      keepTurn: true
    transitions:
      next: RazerEdge.quickAnswerTSEdge

  RazerEdge.pcConnectionIssues:
    component: System.Output
    properties:
      text: "${rb.razerEdgePCConnectionIssues}"
      keepTurn: true
    transitions:
      next: RazerEdge.quickAnswerTSEdge

  RazerEdge.audioIssues:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      autoNumberPostbackActions: "false"
      maxPrompts: 2
      metadata:
        responseItems:
          - type: text
            text: "Please select the audio issues your experiencing below with your Razer Edge:"
            actions:
              - label: "No audio or sound"
                type: postback
                keyword: "1,a,A,no audio,no sound"
                payload:
                  action: "noAudio"
              - label: "No audio on headset"
                type: postback
                keyword: "2,b,B,no audio headset"
                payload:
                  action: "noAudioHeadset"
              - label: "Audio is distorted"
                type: postback
                keyword: "3,c,C,audio distorted"
                payload:
                  action: "audioDistorted"
              - label: "People cannot hear me"
                type: postback
                keyword: "4,d,D,people cannot hear"
                payload:
                  action: "cannotHear"
              - label: "Poor or no sound"
                type: postback
                keyword: "5,e,E,poor sound"
                payload:
                  action: "poorSound"
    transitions:
      next: intent
      actions:
        noAudio: RazerEdge.noAudio
        noAudioHeadset: RazerEdge.noAudioHeadset
        audioDistorted: RazerEdge.audioDistorted
        cannotHear: RazerEdge.peopleCannotHear
        poorSound: RazerEdge.poorSound
        
  RazerEdge.noAudioHeadset:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      autoNumberPostbackActions: "false"
      maxPrompts: 2
      metadata:
        responseItems:
          - type: text
            text: "Please select the type of connection with Razer Edge:"
            actions:
              - label: "Connection via Bluetooth"
                type: postback
                keyword: "1,a,A,bluetooth"
                payload:
                  action: "bluetooth"
              - label: "Connection via USB or analog port"
                type: postback
                keyword: "2,b,B,usb,analog"
                payload:
                  action: "usb"
    transitions:
      next: intent
      actions:
        bluetooth: RazerEdge.noAudioHeadsetBT
        usb: RazerEdge.noAudioHeadsetUSB

  RazerEdge.noAudioHeadsetBT:
    component: System.Output
    properties:
      text: "${rb.razerEdgeNoAudioHeadsetBT}"
      keepTurn: true
    transitions:
      next: RazerEdge.quickAnswerTSEdge

  RazerEdge.noAudioHeadsetUSB:
    component: System.Output
    properties:
      text: "${rb.razerEdgeNoAudioHeadsetUSB}"
      keepTurn: true
    transitions:
      next: RazerEdge.quickAnswerTSEdge

  RazerEdge.noAudio:
    component: System.Output
    properties:
      text: "${rb.razerEdgeNoAudio}"
      keepTurn: true
    transitions:
      next: RazerEdge.quickAnswerTSEdge

  RazerEdge.audioDistorted:
    component: System.Output
    properties:
      text: "${rb.razerEdgeAudioDistorted}"
      keepTurn: true
    transitions:
      next: RazerEdge.quickAnswerTSEdge

  RazerEdge.peopleCannotHear:
    component: System.Output
    properties:
      text: "${rb.razerEdgePeopleCannotHear}"
      keepTurn: true
    transitions:
      next: RazerEdge.quickAnswerTSEdge

  RazerEdge.poorSound:
    component: System.Output
    properties:
      text: "${rb.razerEdgePoorSound}"
      keepTurn: true
    transitions:
      next: RazerEdge.quickAnswerTSEdge

  # ----- CASE CREATION FOR RAZER EDGE ----- #

  RazerEdge.quickAnswerTSEdge:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: user.journey
      value: true
  RazerEdge.quickTypeTSEdge:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: user.chatType
      value: "TSEdge"
  RazerEdge.resolveQuickAnswerTSEdge:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      autoNumberPostbackActions: "false"
      maxPrompts: 2
      metadata:
        responseItems:
          - type: text
            text: "Did I answer your question?"
            actions:
              - label: "Yes"
                type: postback
                keyword: "a,A,y,Y"
                payload:
                  action: "Yes"
              - label: "No"
                type: postback
                keyword: "b,B,n,N"
                payload:
                  action: "No"
    transitions:
      next: intent
      actions:
        Yes: queryResolved
        No: RazerEdge.outputQueryNotResolved
        match: hiddenAction
        cancel: errorOutput

  RazerEdge.outputQueryNotResolved:
    component: "System.CommonResponse"
    properties:
      processUserMessage: true
      keepTurn: false
      transitionAfterMatch: true
      maxPrompts: 2
      autoNumberPostbackActions: false
      metadata:
        responseItems:
          - text: "I am sorry I wasn't able to answer your question. There are several ways to contact us for support. Please select an option below."
            type: text
            actions:
              - skipAutoNumber: true
                payload:
                  action: ticket
                label: Submit a support ticket
                type: postback
                keyword: "1"
              - skipAutoNumber: true
                payload:
                  action: agent
                label: Connect to an agent
                type: postback
                keyword: "2"
    transitions:
      next: "intent"
      actions:
        ticket: RazerEdge.checkCaseExists
        agent: startChat

  RazerEdge.checkCaseExists:
    component: System.ConditionExists
    properties:
      insightsInclude: false
      variable: user.caseCreated
    transitions:
      actions:
        exists: caseAlreadyCreated
        notexists: "RazerEdge.quickAnswerCSTry"

  RazerEdge.quickAnswerCSTry:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: user.secondTry
      value: true
    transitions:
      next: "RazerEdge.clearCasePrivateNotes"

  RazerEdge.clearCasePrivateNotes:
    component: "System.SetVariable"
    properties:
      insightsInclude: false
      variable: casePrivateNotes
      value: ""
  RazerEdge.prefillCaseIssue:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: "case.issue"
      value: "Razer Edge Issues"
  RazerEdge.prefillOrderNumber:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: "case.orderNumber"
      value: "na"
  RazerEdge.prefillSerialNumber:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: "case.serialNumber"
      value: "<#if (profile.contactInfo)??><#list profile.contactInfo.value.customFields as p><#if p.name=='Serial Number'><#if p.value!='Unavailable' && p.value!=''>${p.value}<#else>-</#if></#if></#list><#else>-</#if>"
  # productNumber/productModel is already parsed from the start
  RazerEdge.prefillProductNumber:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: "case.productNumber"
      value: "${productModel.value}"
  # productDescription is already parsed from the start
  RazerEdge.prefillProductDescription:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: "productDescription"
      value: "${productDescription.value}"
  RazerEdge.prefillRMANumber:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: "case.rmaNumber"
      value: "na"
  RazerEdge.prefillAnotherCaseCategoryId:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: "caseCategoryId"
      value: "NULL"
  RazerEdge.prefillFirstName:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: "case.firstName"
      value: "${profile.firstName.value}"
  RazerEdge.prefillLastName:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: "case.lastName"
      value: "${profile.lastName.value}"
  RazerEdge.prefillEmail:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: "case.email"
      value: "${profile.email.value}"
  RazerEdge.prefillContactInfo:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: "contactInfo"
      value: "${profile.contactInfo.value}"
  RazerEdge.prefillCaseCategoryId:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: case.category
      value: "3046"
  RazerEdge.disallowFileAttachmentPrompt:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: caseReset
      value: true
  # TODO: edit
  RazerEdge.prefillCaseCategory:
    component: "System.SetVariable"
    properties:
      insightsInclude: false
      variable: caseCategory
      value: "Razer Edge"
  RazerComOrder.prefillCasePrivateNotes:
    component: "System.SetVariable"
    properties:
      insightsInclude: false
      variable: casePrivateNotes
      value: "+ Serial Number: ${case.value.serialNumber}\n + Product Model: ${case.value.productNumber}\n + Product Description: ${productDescription}"

  RazerEdge.caseResolveEntities:
    component: "System.ResolveEntities"
    properties:
      variable: case
      nlpResultVariable: iResult
      transitionAfterMatch: false
      useFullEntityMatches: false
    transitions:
      next: "RazerEdge.showCaseData"
      actions:
        match: "RazerEdge.caseHiddenAction"
  RazerEdge.caseHiddenAction:
    component: System.SetVariable
    properties:
      insightsInclude: false
      variable: "caseEntity"
      value: "${system.entityToResolve.value.name}"
  RazerEdge.showCaseData:
    component: System.Output
    properties:
      text: "Name: ${case.value.firstName} ${case.value.lastName}<br />
      Email: ${case.value.email?lower_case}<br />
      Category: ${caseCategory}<br />
      <#if case.value.serialNumber != '-'>Serial Number: ${case.value.serialNumber}<br /></#if>
      <#if case.value.productNumber != '-'>Product Model: ${case.value.productNumber}<br /></#if>
      <#if productDescription != '-'>Product Description: ${productDescription}<br /></#if>
      Description: ${case.value.issue}"
      keepTurn: true
    transitions:
      next: "RazerEdge.casePrompt"

  RazerEdge.casePrompt:
    component: System.CommonResponse
    properties:
      processUserMessage: true
      nlpResultVariable: iResult
      transitionAfterMatch: "true"
      autoNumberPostbackActions: "false"
      maxPrompts: 2
      metadata:
        responseItems:
          - type: text
            text: "Are the details above correct?"
            actions:
              - label: "Yes"
                type: postback
                keyword: "a,A,y,Y"
                payload:
                  action: "Yes"
              - label: "No"
                type: postback
                keyword: "b,B,n,N"
                payload:
                  action: "No"
    transitions:
      next: intent
      actions:
        Yes: createCasePrompt
        No: "RazerEdge.caseResetOptions"
        match: hiddenAction
        cancel: errorOutput

  RazerEdge.caseResetOptions:
    component: "System.List"
    properties:
      options: "Email, Description, Reset"
      prompt: "Which do you want to correct"
    transitions:
      next: intent
      actions:
        "Email": "RazerEdge.resetEmail"
        "Description": "RazerEdge.resetDescription"
        "Reset": "RazerEdge.caseReset"

  RazerEdge.caseReset:
    component: System.ResetVariables
    properties:
      variableList: "case.email,case.issue"
    transitions:
      next: "RazerEdge.caseResolveEntities"

  RazerEdge.resetDescription:
    component: System.ResetVariables
    properties:
      variableList: "case.issue"
    transitions:
      next: "RazerEdge.caseResolveEntities"

  RazerEdge.resetEmail:
    component: System.ResetVariables
    properties:
      variableList: "case.email"
    transitions:
      next: "RazerEdge.caseResolveEntities"

  # ----- CASE CREATION FOR RAZER EDGE ----- #
      
  ############ RAZER EDGE END #################
  #############################################
